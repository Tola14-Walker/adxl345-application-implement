
adxl345-application-implement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a5c  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08006ba0  08006ba0  00007ba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007038  08007038  00009200  2**0
                  CONTENTS
  4 .ARM          00000008  08007038  08007038  00008038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007040  08007040  00009200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007040  08007040  00008040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007044  08007044  00008044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  08007048  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000200  08007248  00009200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08007248  000093ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000061c8  00000000  00000000  00009229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001663  00000000  00000000  0000f3f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  00010a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000052e  00000000  00000000  00011140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160ef  00000000  00000000  0001166e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e45  00000000  00000000  0002775d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000860c6  00000000  00000000  000305a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6668  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002da8  00000000  00000000  000b66ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000b9454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000200 	.word	0x20000200
 800015c:	00000000 	.word	0x00000000
 8000160:	08006b84 	.word	0x08006b84

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000204 	.word	0x20000204
 800017c:	08006b84 	.word	0x08006b84

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_fmul>:
 8000190:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000194:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000198:	bf1e      	ittt	ne
 800019a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800019e:	ea92 0f0c 	teqne	r2, ip
 80001a2:	ea93 0f0c 	teqne	r3, ip
 80001a6:	d06f      	beq.n	8000288 <__aeabi_fmul+0xf8>
 80001a8:	441a      	add	r2, r3
 80001aa:	ea80 0c01 	eor.w	ip, r0, r1
 80001ae:	0240      	lsls	r0, r0, #9
 80001b0:	bf18      	it	ne
 80001b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001b6:	d01e      	beq.n	80001f6 <__aeabi_fmul+0x66>
 80001b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80001bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001c4:	fba0 3101 	umull	r3, r1, r0, r1
 80001c8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001cc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001d0:	bf3e      	ittt	cc
 80001d2:	0049      	lslcc	r1, r1, #1
 80001d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001d8:	005b      	lslcc	r3, r3, #1
 80001da:	ea40 0001 	orr.w	r0, r0, r1
 80001de:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001e2:	2afd      	cmp	r2, #253	@ 0xfd
 80001e4:	d81d      	bhi.n	8000222 <__aeabi_fmul+0x92>
 80001e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ee:	bf08      	it	eq
 80001f0:	f020 0001 	biceq.w	r0, r0, #1
 80001f4:	4770      	bx	lr
 80001f6:	f090 0f00 	teq	r0, #0
 80001fa:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001fe:	bf08      	it	eq
 8000200:	0249      	lsleq	r1, r1, #9
 8000202:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000206:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800020a:	3a7f      	subs	r2, #127	@ 0x7f
 800020c:	bfc2      	ittt	gt
 800020e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000212:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000216:	4770      	bxgt	lr
 8000218:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800021c:	f04f 0300 	mov.w	r3, #0
 8000220:	3a01      	subs	r2, #1
 8000222:	dc5d      	bgt.n	80002e0 <__aeabi_fmul+0x150>
 8000224:	f112 0f19 	cmn.w	r2, #25
 8000228:	bfdc      	itt	le
 800022a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800022e:	4770      	bxle	lr
 8000230:	f1c2 0200 	rsb	r2, r2, #0
 8000234:	0041      	lsls	r1, r0, #1
 8000236:	fa21 f102 	lsr.w	r1, r1, r2
 800023a:	f1c2 0220 	rsb	r2, r2, #32
 800023e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000242:	ea5f 0031 	movs.w	r0, r1, rrx
 8000246:	f140 0000 	adc.w	r0, r0, #0
 800024a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800024e:	bf08      	it	eq
 8000250:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000254:	4770      	bx	lr
 8000256:	f092 0f00 	teq	r2, #0
 800025a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800025e:	bf02      	ittt	eq
 8000260:	0040      	lsleq	r0, r0, #1
 8000262:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000266:	3a01      	subeq	r2, #1
 8000268:	d0f9      	beq.n	800025e <__aeabi_fmul+0xce>
 800026a:	ea40 000c 	orr.w	r0, r0, ip
 800026e:	f093 0f00 	teq	r3, #0
 8000272:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000276:	bf02      	ittt	eq
 8000278:	0049      	lsleq	r1, r1, #1
 800027a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800027e:	3b01      	subeq	r3, #1
 8000280:	d0f9      	beq.n	8000276 <__aeabi_fmul+0xe6>
 8000282:	ea41 010c 	orr.w	r1, r1, ip
 8000286:	e78f      	b.n	80001a8 <__aeabi_fmul+0x18>
 8000288:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800028c:	ea92 0f0c 	teq	r2, ip
 8000290:	bf18      	it	ne
 8000292:	ea93 0f0c 	teqne	r3, ip
 8000296:	d00a      	beq.n	80002ae <__aeabi_fmul+0x11e>
 8000298:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800029c:	bf18      	it	ne
 800029e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80002a2:	d1d8      	bne.n	8000256 <__aeabi_fmul+0xc6>
 80002a4:	ea80 0001 	eor.w	r0, r0, r1
 80002a8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f090 0f00 	teq	r0, #0
 80002b2:	bf17      	itett	ne
 80002b4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80002b8:	4608      	moveq	r0, r1
 80002ba:	f091 0f00 	teqne	r1, #0
 80002be:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002c2:	d014      	beq.n	80002ee <__aeabi_fmul+0x15e>
 80002c4:	ea92 0f0c 	teq	r2, ip
 80002c8:	d101      	bne.n	80002ce <__aeabi_fmul+0x13e>
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	d10f      	bne.n	80002ee <__aeabi_fmul+0x15e>
 80002ce:	ea93 0f0c 	teq	r3, ip
 80002d2:	d103      	bne.n	80002dc <__aeabi_fmul+0x14c>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	bf18      	it	ne
 80002d8:	4608      	movne	r0, r1
 80002da:	d108      	bne.n	80002ee <__aeabi_fmul+0x15e>
 80002dc:	ea80 0001 	eor.w	r0, r0, r1
 80002e0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002e4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ec:	4770      	bx	lr
 80002ee:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002f2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002f6:	4770      	bx	lr

080002f8 <__aeabi_drsub>:
 80002f8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002fc:	e002      	b.n	8000304 <__adddf3>
 80002fe:	bf00      	nop

08000300 <__aeabi_dsub>:
 8000300:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000304 <__adddf3>:
 8000304:	b530      	push	{r4, r5, lr}
 8000306:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800030a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800030e:	ea94 0f05 	teq	r4, r5
 8000312:	bf08      	it	eq
 8000314:	ea90 0f02 	teqeq	r0, r2
 8000318:	bf1f      	itttt	ne
 800031a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800031e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000322:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000326:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800032a:	f000 80e2 	beq.w	80004f2 <__adddf3+0x1ee>
 800032e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000332:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000336:	bfb8      	it	lt
 8000338:	426d      	neglt	r5, r5
 800033a:	dd0c      	ble.n	8000356 <__adddf3+0x52>
 800033c:	442c      	add	r4, r5
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	ea82 0000 	eor.w	r0, r2, r0
 800034a:	ea83 0101 	eor.w	r1, r3, r1
 800034e:	ea80 0202 	eor.w	r2, r0, r2
 8000352:	ea81 0303 	eor.w	r3, r1, r3
 8000356:	2d36      	cmp	r5, #54	@ 0x36
 8000358:	bf88      	it	hi
 800035a:	bd30      	pophi	{r4, r5, pc}
 800035c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000360:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000364:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000368:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800036c:	d002      	beq.n	8000374 <__adddf3+0x70>
 800036e:	4240      	negs	r0, r0
 8000370:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000374:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000378:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800037c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000380:	d002      	beq.n	8000388 <__adddf3+0x84>
 8000382:	4252      	negs	r2, r2
 8000384:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000388:	ea94 0f05 	teq	r4, r5
 800038c:	f000 80a7 	beq.w	80004de <__adddf3+0x1da>
 8000390:	f1a4 0401 	sub.w	r4, r4, #1
 8000394:	f1d5 0e20 	rsbs	lr, r5, #32
 8000398:	db0d      	blt.n	80003b6 <__adddf3+0xb2>
 800039a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800039e:	fa22 f205 	lsr.w	r2, r2, r5
 80003a2:	1880      	adds	r0, r0, r2
 80003a4:	f141 0100 	adc.w	r1, r1, #0
 80003a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80003ac:	1880      	adds	r0, r0, r2
 80003ae:	fa43 f305 	asr.w	r3, r3, r5
 80003b2:	4159      	adcs	r1, r3
 80003b4:	e00e      	b.n	80003d4 <__adddf3+0xd0>
 80003b6:	f1a5 0520 	sub.w	r5, r5, #32
 80003ba:	f10e 0e20 	add.w	lr, lr, #32
 80003be:	2a01      	cmp	r2, #1
 80003c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003c4:	bf28      	it	cs
 80003c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ca:	fa43 f305 	asr.w	r3, r3, r5
 80003ce:	18c0      	adds	r0, r0, r3
 80003d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d8:	d507      	bpl.n	80003ea <__adddf3+0xe6>
 80003da:	f04f 0e00 	mov.w	lr, #0
 80003de:	f1dc 0c00 	rsbs	ip, ip, #0
 80003e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ea:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ee:	d31b      	bcc.n	8000428 <__adddf3+0x124>
 80003f0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003f4:	d30c      	bcc.n	8000410 <__adddf3+0x10c>
 80003f6:	0849      	lsrs	r1, r1, #1
 80003f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000400:	f104 0401 	add.w	r4, r4, #1
 8000404:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000408:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800040c:	f080 809a 	bcs.w	8000544 <__adddf3+0x240>
 8000410:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000414:	bf08      	it	eq
 8000416:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800041a:	f150 0000 	adcs.w	r0, r0, #0
 800041e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000422:	ea41 0105 	orr.w	r1, r1, r5
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800042c:	4140      	adcs	r0, r0
 800042e:	eb41 0101 	adc.w	r1, r1, r1
 8000432:	3c01      	subs	r4, #1
 8000434:	bf28      	it	cs
 8000436:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800043a:	d2e9      	bcs.n	8000410 <__adddf3+0x10c>
 800043c:	f091 0f00 	teq	r1, #0
 8000440:	bf04      	itt	eq
 8000442:	4601      	moveq	r1, r0
 8000444:	2000      	moveq	r0, #0
 8000446:	fab1 f381 	clz	r3, r1
 800044a:	bf08      	it	eq
 800044c:	3320      	addeq	r3, #32
 800044e:	f1a3 030b 	sub.w	r3, r3, #11
 8000452:	f1b3 0220 	subs.w	r2, r3, #32
 8000456:	da0c      	bge.n	8000472 <__adddf3+0x16e>
 8000458:	320c      	adds	r2, #12
 800045a:	dd08      	ble.n	800046e <__adddf3+0x16a>
 800045c:	f102 0c14 	add.w	ip, r2, #20
 8000460:	f1c2 020c 	rsb	r2, r2, #12
 8000464:	fa01 f00c 	lsl.w	r0, r1, ip
 8000468:	fa21 f102 	lsr.w	r1, r1, r2
 800046c:	e00c      	b.n	8000488 <__adddf3+0x184>
 800046e:	f102 0214 	add.w	r2, r2, #20
 8000472:	bfd8      	it	le
 8000474:	f1c2 0c20 	rsble	ip, r2, #32
 8000478:	fa01 f102 	lsl.w	r1, r1, r2
 800047c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000480:	bfdc      	itt	le
 8000482:	ea41 010c 	orrle.w	r1, r1, ip
 8000486:	4090      	lslle	r0, r2
 8000488:	1ae4      	subs	r4, r4, r3
 800048a:	bfa2      	ittt	ge
 800048c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000490:	4329      	orrge	r1, r5
 8000492:	bd30      	popge	{r4, r5, pc}
 8000494:	ea6f 0404 	mvn.w	r4, r4
 8000498:	3c1f      	subs	r4, #31
 800049a:	da1c      	bge.n	80004d6 <__adddf3+0x1d2>
 800049c:	340c      	adds	r4, #12
 800049e:	dc0e      	bgt.n	80004be <__adddf3+0x1ba>
 80004a0:	f104 0414 	add.w	r4, r4, #20
 80004a4:	f1c4 0220 	rsb	r2, r4, #32
 80004a8:	fa20 f004 	lsr.w	r0, r0, r4
 80004ac:	fa01 f302 	lsl.w	r3, r1, r2
 80004b0:	ea40 0003 	orr.w	r0, r0, r3
 80004b4:	fa21 f304 	lsr.w	r3, r1, r4
 80004b8:	ea45 0103 	orr.w	r1, r5, r3
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f1c4 040c 	rsb	r4, r4, #12
 80004c2:	f1c4 0220 	rsb	r2, r4, #32
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 f304 	lsl.w	r3, r1, r4
 80004ce:	ea40 0003 	orr.w	r0, r0, r3
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	fa21 f004 	lsr.w	r0, r1, r4
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	f094 0f00 	teq	r4, #0
 80004e2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004e6:	bf06      	itte	eq
 80004e8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ec:	3401      	addeq	r4, #1
 80004ee:	3d01      	subne	r5, #1
 80004f0:	e74e      	b.n	8000390 <__adddf3+0x8c>
 80004f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f6:	bf18      	it	ne
 80004f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004fc:	d029      	beq.n	8000552 <__adddf3+0x24e>
 80004fe:	ea94 0f05 	teq	r4, r5
 8000502:	bf08      	it	eq
 8000504:	ea90 0f02 	teqeq	r0, r2
 8000508:	d005      	beq.n	8000516 <__adddf3+0x212>
 800050a:	ea54 0c00 	orrs.w	ip, r4, r0
 800050e:	bf04      	itt	eq
 8000510:	4619      	moveq	r1, r3
 8000512:	4610      	moveq	r0, r2
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	ea91 0f03 	teq	r1, r3
 800051a:	bf1e      	ittt	ne
 800051c:	2100      	movne	r1, #0
 800051e:	2000      	movne	r0, #0
 8000520:	bd30      	popne	{r4, r5, pc}
 8000522:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000526:	d105      	bne.n	8000534 <__adddf3+0x230>
 8000528:	0040      	lsls	r0, r0, #1
 800052a:	4149      	adcs	r1, r1
 800052c:	bf28      	it	cs
 800052e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000532:	bd30      	pop	{r4, r5, pc}
 8000534:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000538:	bf3c      	itt	cc
 800053a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800053e:	bd30      	popcc	{r4, r5, pc}
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000548:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800054c:	f04f 0000 	mov.w	r0, #0
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000556:	bf1a      	itte	ne
 8000558:	4619      	movne	r1, r3
 800055a:	4610      	movne	r0, r2
 800055c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000560:	bf1c      	itt	ne
 8000562:	460b      	movne	r3, r1
 8000564:	4602      	movne	r2, r0
 8000566:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800056a:	bf06      	itte	eq
 800056c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000570:	ea91 0f03 	teqeq	r1, r3
 8000574:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	bf00      	nop

0800057c <__aeabi_ui2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000590:	f04f 0500 	mov.w	r5, #0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e750      	b.n	800043c <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_i2d>:
 800059c:	f090 0f00 	teq	r0, #0
 80005a0:	bf04      	itt	eq
 80005a2:	2100      	moveq	r1, #0
 80005a4:	4770      	bxeq	lr
 80005a6:	b530      	push	{r4, r5, lr}
 80005a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005b0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005b4:	bf48      	it	mi
 80005b6:	4240      	negmi	r0, r0
 80005b8:	f04f 0100 	mov.w	r1, #0
 80005bc:	e73e      	b.n	800043c <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_f2d>:
 80005c0:	0042      	lsls	r2, r0, #1
 80005c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ce:	bf1f      	itttt	ne
 80005d0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005d4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005dc:	4770      	bxne	lr
 80005de:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005e2:	bf08      	it	eq
 80005e4:	4770      	bxeq	lr
 80005e6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ea:	bf04      	itt	eq
 80005ec:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005f0:	4770      	bxeq	lr
 80005f2:	b530      	push	{r4, r5, lr}
 80005f4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000600:	e71c      	b.n	800043c <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_ul2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	e00a      	b.n	800062a <__aeabi_l2d+0x16>

08000614 <__aeabi_l2d>:
 8000614:	ea50 0201 	orrs.w	r2, r0, r1
 8000618:	bf08      	it	eq
 800061a:	4770      	bxeq	lr
 800061c:	b530      	push	{r4, r5, lr}
 800061e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000622:	d502      	bpl.n	800062a <__aeabi_l2d+0x16>
 8000624:	4240      	negs	r0, r0
 8000626:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800062a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800062e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000632:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000636:	f43f aed8 	beq.w	80003ea <__adddf3+0xe6>
 800063a:	f04f 0203 	mov.w	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000652:	f1c2 0320 	rsb	r3, r2, #32
 8000656:	fa00 fc03 	lsl.w	ip, r0, r3
 800065a:	fa20 f002 	lsr.w	r0, r0, r2
 800065e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000662:	ea40 000e 	orr.w	r0, r0, lr
 8000666:	fa21 f102 	lsr.w	r1, r1, r2
 800066a:	4414      	add	r4, r2
 800066c:	e6bd      	b.n	80003ea <__adddf3+0xe6>
 800066e:	bf00      	nop

08000670 <__aeabi_dmul>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000676:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800067a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800067e:	bf1d      	ittte	ne
 8000680:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000684:	ea94 0f0c 	teqne	r4, ip
 8000688:	ea95 0f0c 	teqne	r5, ip
 800068c:	f000 f8de 	bleq	800084c <__aeabi_dmul+0x1dc>
 8000690:	442c      	add	r4, r5
 8000692:	ea81 0603 	eor.w	r6, r1, r3
 8000696:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800069a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800069e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006a2:	bf18      	it	ne
 80006a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006b0:	d038      	beq.n	8000724 <__aeabi_dmul+0xb4>
 80006b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006c6:	f04f 0600 	mov.w	r6, #0
 80006ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ce:	f09c 0f00 	teq	ip, #0
 80006d2:	bf18      	it	ne
 80006d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006e4:	d204      	bcs.n	80006f0 <__aeabi_dmul+0x80>
 80006e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ea:	416d      	adcs	r5, r5
 80006ec:	eb46 0606 	adc.w	r6, r6, r6
 80006f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000700:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000704:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000708:	bf88      	it	hi
 800070a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800070e:	d81e      	bhi.n	800074e <__aeabi_dmul+0xde>
 8000710:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000714:	bf08      	it	eq
 8000716:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800071a:	f150 0000 	adcs.w	r0, r0, #0
 800071e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000728:	ea46 0101 	orr.w	r1, r6, r1
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000738:	bfc2      	ittt	gt
 800073a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800073e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000742:	bd70      	popgt	{r4, r5, r6, pc}
 8000744:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000748:	f04f 0e00 	mov.w	lr, #0
 800074c:	3c01      	subs	r4, #1
 800074e:	f300 80ab 	bgt.w	80008a8 <__aeabi_dmul+0x238>
 8000752:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000756:	bfde      	ittt	le
 8000758:	2000      	movle	r0, #0
 800075a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800075e:	bd70      	pople	{r4, r5, r6, pc}
 8000760:	f1c4 0400 	rsb	r4, r4, #0
 8000764:	3c20      	subs	r4, #32
 8000766:	da35      	bge.n	80007d4 <__aeabi_dmul+0x164>
 8000768:	340c      	adds	r4, #12
 800076a:	dc1b      	bgt.n	80007a4 <__aeabi_dmul+0x134>
 800076c:	f104 0414 	add.w	r4, r4, #20
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f305 	lsl.w	r3, r0, r5
 8000778:	fa20 f004 	lsr.w	r0, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000790:	fa21 f604 	lsr.w	r6, r1, r4
 8000794:	eb42 0106 	adc.w	r1, r2, r6
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 040c 	rsb	r4, r4, #12
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f304 	lsl.w	r3, r0, r4
 80007b0:	fa20 f005 	lsr.w	r0, r0, r5
 80007b4:	fa01 f204 	lsl.w	r2, r1, r4
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c4:	f141 0100 	adc.w	r1, r1, #0
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f1c4 0520 	rsb	r5, r4, #32
 80007d8:	fa00 f205 	lsl.w	r2, r0, r5
 80007dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007e0:	fa20 f304 	lsr.w	r3, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea43 0302 	orr.w	r3, r3, r2
 80007ec:	fa21 f004 	lsr.w	r0, r1, r4
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	fa21 f204 	lsr.w	r2, r1, r4
 80007f8:	ea20 0002 	bic.w	r0, r0, r2
 80007fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f094 0f00 	teq	r4, #0
 8000810:	d10f      	bne.n	8000832 <__aeabi_dmul+0x1c2>
 8000812:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000816:	0040      	lsls	r0, r0, #1
 8000818:	eb41 0101 	adc.w	r1, r1, r1
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	bf08      	it	eq
 8000822:	3c01      	subeq	r4, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1a6>
 8000826:	ea41 0106 	orr.w	r1, r1, r6
 800082a:	f095 0f00 	teq	r5, #0
 800082e:	bf18      	it	ne
 8000830:	4770      	bxne	lr
 8000832:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000836:	0052      	lsls	r2, r2, #1
 8000838:	eb43 0303 	adc.w	r3, r3, r3
 800083c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000840:	bf08      	it	eq
 8000842:	3d01      	subeq	r5, #1
 8000844:	d0f7      	beq.n	8000836 <__aeabi_dmul+0x1c6>
 8000846:	ea43 0306 	orr.w	r3, r3, r6
 800084a:	4770      	bx	lr
 800084c:	ea94 0f0c 	teq	r4, ip
 8000850:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000854:	bf18      	it	ne
 8000856:	ea95 0f0c 	teqne	r5, ip
 800085a:	d00c      	beq.n	8000876 <__aeabi_dmul+0x206>
 800085c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000866:	d1d1      	bne.n	800080c <__aeabi_dmul+0x19c>
 8000868:	ea81 0103 	eor.w	r1, r1, r3
 800086c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800087a:	bf06      	itte	eq
 800087c:	4610      	moveq	r0, r2
 800087e:	4619      	moveq	r1, r3
 8000880:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000884:	d019      	beq.n	80008ba <__aeabi_dmul+0x24a>
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	d102      	bne.n	8000892 <__aeabi_dmul+0x222>
 800088c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000890:	d113      	bne.n	80008ba <__aeabi_dmul+0x24a>
 8000892:	ea95 0f0c 	teq	r5, ip
 8000896:	d105      	bne.n	80008a4 <__aeabi_dmul+0x234>
 8000898:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800089c:	bf1c      	itt	ne
 800089e:	4610      	movne	r0, r2
 80008a0:	4619      	movne	r1, r3
 80008a2:	d10a      	bne.n	80008ba <__aeabi_dmul+0x24a>
 80008a4:	ea81 0103 	eor.w	r1, r1, r3
 80008a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	bd70      	pop	{r4, r5, r6, pc}
 80008ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008c2:	bd70      	pop	{r4, r5, r6, pc}

080008c4 <__aeabi_ddiv>:
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008d2:	bf1d      	ittte	ne
 80008d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d8:	ea94 0f0c 	teqne	r4, ip
 80008dc:	ea95 0f0c 	teqne	r5, ip
 80008e0:	f000 f8a7 	bleq	8000a32 <__aeabi_ddiv+0x16e>
 80008e4:	eba4 0405 	sub.w	r4, r4, r5
 80008e8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008f4:	f000 8088 	beq.w	8000a08 <__aeabi_ddiv+0x144>
 80008f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008fc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000900:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000904:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000908:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800090c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000910:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000914:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000918:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800091c:	429d      	cmp	r5, r3
 800091e:	bf08      	it	eq
 8000920:	4296      	cmpeq	r6, r2
 8000922:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000926:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800092a:	d202      	bcs.n	8000932 <__aeabi_ddiv+0x6e>
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	1ab6      	subs	r6, r6, r2
 8000934:	eb65 0503 	sbc.w	r5, r5, r3
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000942:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 000c 	orrcs.w	r0, r0, ip
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000988:	085b      	lsrs	r3, r3, #1
 800098a:	ea4f 0232 	mov.w	r2, r2, rrx
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80009a4:	d018      	beq.n	80009d8 <__aeabi_ddiv+0x114>
 80009a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009c2:	d1c0      	bne.n	8000946 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c8:	d10b      	bne.n	80009e2 <__aeabi_ddiv+0x11e>
 80009ca:	ea41 0100 	orr.w	r1, r1, r0
 80009ce:	f04f 0000 	mov.w	r0, #0
 80009d2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009d6:	e7b6      	b.n	8000946 <__aeabi_ddiv+0x82>
 80009d8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009dc:	bf04      	itt	eq
 80009de:	4301      	orreq	r1, r0
 80009e0:	2000      	moveq	r0, #0
 80009e2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009e6:	bf88      	it	hi
 80009e8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009ec:	f63f aeaf 	bhi.w	800074e <__aeabi_dmul+0xde>
 80009f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009f4:	bf04      	itt	eq
 80009f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009fe:	f150 0000 	adcs.w	r0, r0, #0
 8000a02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	pop	{r4, r5, r6, pc}
 8000a08:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a14:	bfc2      	ittt	gt
 8000a16:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a1e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a20:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a24:	f04f 0e00 	mov.w	lr, #0
 8000a28:	3c01      	subs	r4, #1
 8000a2a:	e690      	b.n	800074e <__aeabi_dmul+0xde>
 8000a2c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a30:	e68d      	b.n	800074e <__aeabi_dmul+0xde>
 8000a32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a36:	ea94 0f0c 	teq	r4, ip
 8000a3a:	bf08      	it	eq
 8000a3c:	ea95 0f0c 	teqeq	r5, ip
 8000a40:	f43f af3b 	beq.w	80008ba <__aeabi_dmul+0x24a>
 8000a44:	ea94 0f0c 	teq	r4, ip
 8000a48:	d10a      	bne.n	8000a60 <__aeabi_ddiv+0x19c>
 8000a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a4e:	f47f af34 	bne.w	80008ba <__aeabi_dmul+0x24a>
 8000a52:	ea95 0f0c 	teq	r5, ip
 8000a56:	f47f af25 	bne.w	80008a4 <__aeabi_dmul+0x234>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e72c      	b.n	80008ba <__aeabi_dmul+0x24a>
 8000a60:	ea95 0f0c 	teq	r5, ip
 8000a64:	d106      	bne.n	8000a74 <__aeabi_ddiv+0x1b0>
 8000a66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a6a:	f43f aefd 	beq.w	8000868 <__aeabi_dmul+0x1f8>
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4619      	mov	r1, r3
 8000a72:	e722      	b.n	80008ba <__aeabi_dmul+0x24a>
 8000a74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a7e:	f47f aec5 	bne.w	800080c <__aeabi_dmul+0x19c>
 8000a82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a86:	f47f af0d 	bne.w	80008a4 <__aeabi_dmul+0x234>
 8000a8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a8e:	f47f aeeb 	bne.w	8000868 <__aeabi_dmul+0x1f8>
 8000a92:	e712      	b.n	80008ba <__aeabi_dmul+0x24a>

08000a94 <__gedf2>:
 8000a94:	f04f 3cff 	mov.w	ip, #4294967295
 8000a98:	e006      	b.n	8000aa8 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__ledf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	e002      	b.n	8000aa8 <__cmpdf2+0x4>
 8000aa2:	bf00      	nop

08000aa4 <__cmpdf2>:
 8000aa4:	f04f 0c01 	mov.w	ip, #1
 8000aa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	bf18      	it	ne
 8000aba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000abe:	d01b      	beq.n	8000af8 <__cmpdf2+0x54>
 8000ac0:	b001      	add	sp, #4
 8000ac2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ac6:	bf0c      	ite	eq
 8000ac8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000acc:	ea91 0f03 	teqne	r1, r3
 8000ad0:	bf02      	ittt	eq
 8000ad2:	ea90 0f02 	teqeq	r0, r2
 8000ad6:	2000      	moveq	r0, #0
 8000ad8:	4770      	bxeq	lr
 8000ada:	f110 0f00 	cmn.w	r0, #0
 8000ade:	ea91 0f03 	teq	r1, r3
 8000ae2:	bf58      	it	pl
 8000ae4:	4299      	cmppl	r1, r3
 8000ae6:	bf08      	it	eq
 8000ae8:	4290      	cmpeq	r0, r2
 8000aea:	bf2c      	ite	cs
 8000aec:	17d8      	asrcs	r0, r3, #31
 8000aee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000af2:	f040 0001 	orr.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b00:	d102      	bne.n	8000b08 <__cmpdf2+0x64>
 8000b02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b06:	d107      	bne.n	8000b18 <__cmpdf2+0x74>
 8000b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d1d6      	bne.n	8000ac0 <__cmpdf2+0x1c>
 8000b12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b16:	d0d3      	beq.n	8000ac0 <__cmpdf2+0x1c>
 8000b18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_cdrcmple>:
 8000b20:	4684      	mov	ip, r0
 8000b22:	4610      	mov	r0, r2
 8000b24:	4662      	mov	r2, ip
 8000b26:	468c      	mov	ip, r1
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4663      	mov	r3, ip
 8000b2c:	e000      	b.n	8000b30 <__aeabi_cdcmpeq>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_cdcmpeq>:
 8000b30:	b501      	push	{r0, lr}
 8000b32:	f7ff ffb7 	bl	8000aa4 <__cmpdf2>
 8000b36:	2800      	cmp	r0, #0
 8000b38:	bf48      	it	mi
 8000b3a:	f110 0f00 	cmnmi.w	r0, #0
 8000b3e:	bd01      	pop	{r0, pc}

08000b40 <__aeabi_dcmpeq>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff fff4 	bl	8000b30 <__aeabi_cdcmpeq>
 8000b48:	bf0c      	ite	eq
 8000b4a:	2001      	moveq	r0, #1
 8000b4c:	2000      	movne	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmplt>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffea 	bl	8000b30 <__aeabi_cdcmpeq>
 8000b5c:	bf34      	ite	cc
 8000b5e:	2001      	movcc	r0, #1
 8000b60:	2000      	movcs	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmple>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffe0 	bl	8000b30 <__aeabi_cdcmpeq>
 8000b70:	bf94      	ite	ls
 8000b72:	2001      	movls	r0, #1
 8000b74:	2000      	movhi	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpge>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffce 	bl	8000b20 <__aeabi_cdrcmple>
 8000b84:	bf94      	ite	ls
 8000b86:	2001      	movls	r0, #1
 8000b88:	2000      	movhi	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmpgt>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff ffc4 	bl	8000b20 <__aeabi_cdrcmple>
 8000b98:	bf34      	ite	cc
 8000b9a:	2001      	movcc	r0, #1
 8000b9c:	2000      	movcs	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_dcmpun>:
 8000ba4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bac:	d102      	bne.n	8000bb4 <__aeabi_dcmpun+0x10>
 8000bae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bb2:	d10a      	bne.n	8000bca <__aeabi_dcmpun+0x26>
 8000bb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bbc:	d102      	bne.n	8000bc4 <__aeabi_dcmpun+0x20>
 8000bbe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bc2:	d102      	bne.n	8000bca <__aeabi_dcmpun+0x26>
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	f04f 0001 	mov.w	r0, #1
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_d2iz>:
 8000bd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd8:	d215      	bcs.n	8000c06 <__aeabi_d2iz+0x36>
 8000bda:	d511      	bpl.n	8000c00 <__aeabi_d2iz+0x30>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d912      	bls.n	8000c0c <__aeabi_d2iz+0x3c>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	4240      	negne	r0, r0
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d105      	bne.n	8000c18 <__aeabi_d2iz+0x48>
 8000c0c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c10:	bf08      	it	eq
 8000c12:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_d2f>:
 8000c20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c28:	bf24      	itt	cs
 8000c2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c32:	d90d      	bls.n	8000c50 <__aeabi_d2f+0x30>
 8000c34:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c40:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c48:	bf08      	it	eq
 8000c4a:	f020 0001 	biceq.w	r0, r0, #1
 8000c4e:	4770      	bx	lr
 8000c50:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c54:	d121      	bne.n	8000c9a <__aeabi_d2f+0x7a>
 8000c56:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c5a:	bfbc      	itt	lt
 8000c5c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c60:	4770      	bxlt	lr
 8000c62:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c6a:	f1c2 0218 	rsb	r2, r2, #24
 8000c6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c76:	fa20 f002 	lsr.w	r0, r0, r2
 8000c7a:	bf18      	it	ne
 8000c7c:	f040 0001 	orrne.w	r0, r0, #1
 8000c80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c8c:	ea40 000c 	orr.w	r0, r0, ip
 8000c90:	fa23 f302 	lsr.w	r3, r3, r2
 8000c94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c98:	e7cc      	b.n	8000c34 <__aeabi_d2f+0x14>
 8000c9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9e:	d107      	bne.n	8000cb0 <__aeabi_d2f+0x90>
 8000ca0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca4:	bf1e      	ittt	ne
 8000ca6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000caa:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cae:	4770      	bxne	lr
 8000cb0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cb4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_frsub>:
 8000cc0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cc4:	e002      	b.n	8000ccc <__addsf3>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_fsub>:
 8000cc8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ccc <__addsf3>:
 8000ccc:	0042      	lsls	r2, r0, #1
 8000cce:	bf1f      	itttt	ne
 8000cd0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cd4:	ea92 0f03 	teqne	r2, r3
 8000cd8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cdc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce0:	d06a      	beq.n	8000db8 <__addsf3+0xec>
 8000ce2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ce6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cea:	bfc1      	itttt	gt
 8000cec:	18d2      	addgt	r2, r2, r3
 8000cee:	4041      	eorgt	r1, r0
 8000cf0:	4048      	eorgt	r0, r1
 8000cf2:	4041      	eorgt	r1, r0
 8000cf4:	bfb8      	it	lt
 8000cf6:	425b      	neglt	r3, r3
 8000cf8:	2b19      	cmp	r3, #25
 8000cfa:	bf88      	it	hi
 8000cfc:	4770      	bxhi	lr
 8000cfe:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d02:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d06:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d0a:	bf18      	it	ne
 8000d0c:	4240      	negne	r0, r0
 8000d0e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d12:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d16:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4249      	negne	r1, r1
 8000d1e:	ea92 0f03 	teq	r2, r3
 8000d22:	d03f      	beq.n	8000da4 <__addsf3+0xd8>
 8000d24:	f1a2 0201 	sub.w	r2, r2, #1
 8000d28:	fa41 fc03 	asr.w	ip, r1, r3
 8000d2c:	eb10 000c 	adds.w	r0, r0, ip
 8000d30:	f1c3 0320 	rsb	r3, r3, #32
 8000d34:	fa01 f103 	lsl.w	r1, r1, r3
 8000d38:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__addsf3+0x78>
 8000d3e:	4249      	negs	r1, r1
 8000d40:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d44:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d48:	d313      	bcc.n	8000d72 <__addsf3+0xa6>
 8000d4a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d4e:	d306      	bcc.n	8000d5e <__addsf3+0x92>
 8000d50:	0840      	lsrs	r0, r0, #1
 8000d52:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d56:	f102 0201 	add.w	r2, r2, #1
 8000d5a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d5c:	d251      	bcs.n	8000e02 <__addsf3+0x136>
 8000d5e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	ea40 0003 	orr.w	r0, r0, r3
 8000d70:	4770      	bx	lr
 8000d72:	0049      	lsls	r1, r1, #1
 8000d74:	eb40 0000 	adc.w	r0, r0, r0
 8000d78:	3a01      	subs	r2, #1
 8000d7a:	bf28      	it	cs
 8000d7c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d80:	d2ed      	bcs.n	8000d5e <__addsf3+0x92>
 8000d82:	fab0 fc80 	clz	ip, r0
 8000d86:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d8a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d8e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d92:	bfaa      	itet	ge
 8000d94:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d98:	4252      	neglt	r2, r2
 8000d9a:	4318      	orrge	r0, r3
 8000d9c:	bfbc      	itt	lt
 8000d9e:	40d0      	lsrlt	r0, r2
 8000da0:	4318      	orrlt	r0, r3
 8000da2:	4770      	bx	lr
 8000da4:	f092 0f00 	teq	r2, #0
 8000da8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dac:	bf06      	itte	eq
 8000dae:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000db2:	3201      	addeq	r2, #1
 8000db4:	3b01      	subne	r3, #1
 8000db6:	e7b5      	b.n	8000d24 <__addsf3+0x58>
 8000db8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dbc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc0:	bf18      	it	ne
 8000dc2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc6:	d021      	beq.n	8000e0c <__addsf3+0x140>
 8000dc8:	ea92 0f03 	teq	r2, r3
 8000dcc:	d004      	beq.n	8000dd8 <__addsf3+0x10c>
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	bf08      	it	eq
 8000dd4:	4608      	moveq	r0, r1
 8000dd6:	4770      	bx	lr
 8000dd8:	ea90 0f01 	teq	r0, r1
 8000ddc:	bf1c      	itt	ne
 8000dde:	2000      	movne	r0, #0
 8000de0:	4770      	bxne	lr
 8000de2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000de6:	d104      	bne.n	8000df2 <__addsf3+0x126>
 8000de8:	0040      	lsls	r0, r0, #1
 8000dea:	bf28      	it	cs
 8000dec:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000df6:	bf3c      	itt	cc
 8000df8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dfc:	4770      	bxcc	lr
 8000dfe:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e02:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e06:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e0a:	4770      	bx	lr
 8000e0c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e10:	bf16      	itet	ne
 8000e12:	4608      	movne	r0, r1
 8000e14:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e18:	4601      	movne	r1, r0
 8000e1a:	0242      	lsls	r2, r0, #9
 8000e1c:	bf06      	itte	eq
 8000e1e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e22:	ea90 0f01 	teqeq	r0, r1
 8000e26:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e2a:	4770      	bx	lr

08000e2c <__aeabi_ui2f>:
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	e004      	b.n	8000e3c <__aeabi_i2f+0x8>
 8000e32:	bf00      	nop

08000e34 <__aeabi_i2f>:
 8000e34:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e38:	bf48      	it	mi
 8000e3a:	4240      	negmi	r0, r0
 8000e3c:	ea5f 0c00 	movs.w	ip, r0
 8000e40:	bf08      	it	eq
 8000e42:	4770      	bxeq	lr
 8000e44:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e48:	4601      	mov	r1, r0
 8000e4a:	f04f 0000 	mov.w	r0, #0
 8000e4e:	e01c      	b.n	8000e8a <__aeabi_l2f+0x2a>

08000e50 <__aeabi_ul2f>:
 8000e50:	ea50 0201 	orrs.w	r2, r0, r1
 8000e54:	bf08      	it	eq
 8000e56:	4770      	bxeq	lr
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	e00a      	b.n	8000e74 <__aeabi_l2f+0x14>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_l2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e6c:	d502      	bpl.n	8000e74 <__aeabi_l2f+0x14>
 8000e6e:	4240      	negs	r0, r0
 8000e70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e74:	ea5f 0c01 	movs.w	ip, r1
 8000e78:	bf02      	ittt	eq
 8000e7a:	4684      	moveq	ip, r0
 8000e7c:	4601      	moveq	r1, r0
 8000e7e:	2000      	moveq	r0, #0
 8000e80:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e84:	bf08      	it	eq
 8000e86:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e8a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e8e:	fabc f28c 	clz	r2, ip
 8000e92:	3a08      	subs	r2, #8
 8000e94:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e98:	db10      	blt.n	8000ebc <__aeabi_l2f+0x5c>
 8000e9a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ea4:	f1c2 0220 	rsb	r2, r2, #32
 8000ea8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000eac:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb0:	eb43 0002 	adc.w	r0, r3, r2
 8000eb4:	bf08      	it	eq
 8000eb6:	f020 0001 	biceq.w	r0, r0, #1
 8000eba:	4770      	bx	lr
 8000ebc:	f102 0220 	add.w	r2, r2, #32
 8000ec0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ec4:	f1c2 0220 	rsb	r2, r2, #32
 8000ec8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ecc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed0:	eb43 0002 	adc.w	r0, r3, r2
 8000ed4:	bf08      	it	eq
 8000ed6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eda:	4770      	bx	lr

08000edc <__gesf2>:
 8000edc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ee0:	e006      	b.n	8000ef0 <__cmpsf2+0x4>
 8000ee2:	bf00      	nop

08000ee4 <__lesf2>:
 8000ee4:	f04f 0c01 	mov.w	ip, #1
 8000ee8:	e002      	b.n	8000ef0 <__cmpsf2+0x4>
 8000eea:	bf00      	nop

08000eec <__cmpsf2>:
 8000eec:	f04f 0c01 	mov.w	ip, #1
 8000ef0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ef4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000efc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f00:	bf18      	it	ne
 8000f02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f06:	d011      	beq.n	8000f2c <__cmpsf2+0x40>
 8000f08:	b001      	add	sp, #4
 8000f0a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f0e:	bf18      	it	ne
 8000f10:	ea90 0f01 	teqne	r0, r1
 8000f14:	bf58      	it	pl
 8000f16:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f1a:	bf88      	it	hi
 8000f1c:	17c8      	asrhi	r0, r1, #31
 8000f1e:	bf38      	it	cc
 8000f20:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f24:	bf18      	it	ne
 8000f26:	f040 0001 	orrne.w	r0, r0, #1
 8000f2a:	4770      	bx	lr
 8000f2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f30:	d102      	bne.n	8000f38 <__cmpsf2+0x4c>
 8000f32:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f36:	d105      	bne.n	8000f44 <__cmpsf2+0x58>
 8000f38:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f3c:	d1e4      	bne.n	8000f08 <__cmpsf2+0x1c>
 8000f3e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f42:	d0e1      	beq.n	8000f08 <__cmpsf2+0x1c>
 8000f44:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <__aeabi_cfrcmple>:
 8000f4c:	4684      	mov	ip, r0
 8000f4e:	4608      	mov	r0, r1
 8000f50:	4661      	mov	r1, ip
 8000f52:	e7ff      	b.n	8000f54 <__aeabi_cfcmpeq>

08000f54 <__aeabi_cfcmpeq>:
 8000f54:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f56:	f7ff ffc9 	bl	8000eec <__cmpsf2>
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	bf48      	it	mi
 8000f5e:	f110 0f00 	cmnmi.w	r0, #0
 8000f62:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f64 <__aeabi_fcmpeq>:
 8000f64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f68:	f7ff fff4 	bl	8000f54 <__aeabi_cfcmpeq>
 8000f6c:	bf0c      	ite	eq
 8000f6e:	2001      	moveq	r0, #1
 8000f70:	2000      	movne	r0, #0
 8000f72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f76:	bf00      	nop

08000f78 <__aeabi_fcmplt>:
 8000f78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f7c:	f7ff ffea 	bl	8000f54 <__aeabi_cfcmpeq>
 8000f80:	bf34      	ite	cc
 8000f82:	2001      	movcc	r0, #1
 8000f84:	2000      	movcs	r0, #0
 8000f86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f8a:	bf00      	nop

08000f8c <__aeabi_fcmple>:
 8000f8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f90:	f7ff ffe0 	bl	8000f54 <__aeabi_cfcmpeq>
 8000f94:	bf94      	ite	ls
 8000f96:	2001      	movls	r0, #1
 8000f98:	2000      	movhi	r0, #0
 8000f9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_fcmpge>:
 8000fa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa4:	f7ff ffd2 	bl	8000f4c <__aeabi_cfrcmple>
 8000fa8:	bf94      	ite	ls
 8000faa:	2001      	movls	r0, #1
 8000fac:	2000      	movhi	r0, #0
 8000fae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_fcmpgt>:
 8000fb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb8:	f7ff ffc8 	bl	8000f4c <__aeabi_cfrcmple>
 8000fbc:	bf34      	ite	cc
 8000fbe:	2001      	movcc	r0, #1
 8000fc0:	2000      	movcs	r0, #0
 8000fc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_uldivmod>:
 8000fc8:	b953      	cbnz	r3, 8000fe0 <__aeabi_uldivmod+0x18>
 8000fca:	b94a      	cbnz	r2, 8000fe0 <__aeabi_uldivmod+0x18>
 8000fcc:	2900      	cmp	r1, #0
 8000fce:	bf08      	it	eq
 8000fd0:	2800      	cmpeq	r0, #0
 8000fd2:	bf1c      	itt	ne
 8000fd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000fd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000fdc:	f000 b968 	b.w	80012b0 <__aeabi_idiv0>
 8000fe0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fe4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fe8:	f000 f806 	bl	8000ff8 <__udivmoddi4>
 8000fec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ff4:	b004      	add	sp, #16
 8000ff6:	4770      	bx	lr

08000ff8 <__udivmoddi4>:
 8000ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ffc:	9d08      	ldr	r5, [sp, #32]
 8000ffe:	460c      	mov	r4, r1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d14e      	bne.n	80010a2 <__udivmoddi4+0xaa>
 8001004:	4694      	mov	ip, r2
 8001006:	458c      	cmp	ip, r1
 8001008:	4686      	mov	lr, r0
 800100a:	fab2 f282 	clz	r2, r2
 800100e:	d962      	bls.n	80010d6 <__udivmoddi4+0xde>
 8001010:	b14a      	cbz	r2, 8001026 <__udivmoddi4+0x2e>
 8001012:	f1c2 0320 	rsb	r3, r2, #32
 8001016:	4091      	lsls	r1, r2
 8001018:	fa20 f303 	lsr.w	r3, r0, r3
 800101c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001020:	4319      	orrs	r1, r3
 8001022:	fa00 fe02 	lsl.w	lr, r0, r2
 8001026:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800102a:	fbb1 f4f7 	udiv	r4, r1, r7
 800102e:	fb07 1114 	mls	r1, r7, r4, r1
 8001032:	fa1f f68c 	uxth.w	r6, ip
 8001036:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800103a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800103e:	fb04 f106 	mul.w	r1, r4, r6
 8001042:	4299      	cmp	r1, r3
 8001044:	d90a      	bls.n	800105c <__udivmoddi4+0x64>
 8001046:	eb1c 0303 	adds.w	r3, ip, r3
 800104a:	f104 30ff 	add.w	r0, r4, #4294967295
 800104e:	f080 8110 	bcs.w	8001272 <__udivmoddi4+0x27a>
 8001052:	4299      	cmp	r1, r3
 8001054:	f240 810d 	bls.w	8001272 <__udivmoddi4+0x27a>
 8001058:	3c02      	subs	r4, #2
 800105a:	4463      	add	r3, ip
 800105c:	1a59      	subs	r1, r3, r1
 800105e:	fbb1 f0f7 	udiv	r0, r1, r7
 8001062:	fb07 1110 	mls	r1, r7, r0, r1
 8001066:	fb00 f606 	mul.w	r6, r0, r6
 800106a:	fa1f f38e 	uxth.w	r3, lr
 800106e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001072:	429e      	cmp	r6, r3
 8001074:	d90a      	bls.n	800108c <__udivmoddi4+0x94>
 8001076:	eb1c 0303 	adds.w	r3, ip, r3
 800107a:	f100 31ff 	add.w	r1, r0, #4294967295
 800107e:	f080 80fa 	bcs.w	8001276 <__udivmoddi4+0x27e>
 8001082:	429e      	cmp	r6, r3
 8001084:	f240 80f7 	bls.w	8001276 <__udivmoddi4+0x27e>
 8001088:	4463      	add	r3, ip
 800108a:	3802      	subs	r0, #2
 800108c:	2100      	movs	r1, #0
 800108e:	1b9b      	subs	r3, r3, r6
 8001090:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001094:	b11d      	cbz	r5, 800109e <__udivmoddi4+0xa6>
 8001096:	40d3      	lsrs	r3, r2
 8001098:	2200      	movs	r2, #0
 800109a:	e9c5 3200 	strd	r3, r2, [r5]
 800109e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a2:	428b      	cmp	r3, r1
 80010a4:	d905      	bls.n	80010b2 <__udivmoddi4+0xba>
 80010a6:	b10d      	cbz	r5, 80010ac <__udivmoddi4+0xb4>
 80010a8:	e9c5 0100 	strd	r0, r1, [r5]
 80010ac:	2100      	movs	r1, #0
 80010ae:	4608      	mov	r0, r1
 80010b0:	e7f5      	b.n	800109e <__udivmoddi4+0xa6>
 80010b2:	fab3 f183 	clz	r1, r3
 80010b6:	2900      	cmp	r1, #0
 80010b8:	d146      	bne.n	8001148 <__udivmoddi4+0x150>
 80010ba:	42a3      	cmp	r3, r4
 80010bc:	d302      	bcc.n	80010c4 <__udivmoddi4+0xcc>
 80010be:	4290      	cmp	r0, r2
 80010c0:	f0c0 80ee 	bcc.w	80012a0 <__udivmoddi4+0x2a8>
 80010c4:	1a86      	subs	r6, r0, r2
 80010c6:	eb64 0303 	sbc.w	r3, r4, r3
 80010ca:	2001      	movs	r0, #1
 80010cc:	2d00      	cmp	r5, #0
 80010ce:	d0e6      	beq.n	800109e <__udivmoddi4+0xa6>
 80010d0:	e9c5 6300 	strd	r6, r3, [r5]
 80010d4:	e7e3      	b.n	800109e <__udivmoddi4+0xa6>
 80010d6:	2a00      	cmp	r2, #0
 80010d8:	f040 808f 	bne.w	80011fa <__udivmoddi4+0x202>
 80010dc:	eba1 040c 	sub.w	r4, r1, ip
 80010e0:	2101      	movs	r1, #1
 80010e2:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80010e6:	fa1f f78c 	uxth.w	r7, ip
 80010ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80010ee:	fb08 4416 	mls	r4, r8, r6, r4
 80010f2:	fb07 f006 	mul.w	r0, r7, r6
 80010f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80010fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010fe:	4298      	cmp	r0, r3
 8001100:	d908      	bls.n	8001114 <__udivmoddi4+0x11c>
 8001102:	eb1c 0303 	adds.w	r3, ip, r3
 8001106:	f106 34ff 	add.w	r4, r6, #4294967295
 800110a:	d202      	bcs.n	8001112 <__udivmoddi4+0x11a>
 800110c:	4298      	cmp	r0, r3
 800110e:	f200 80cb 	bhi.w	80012a8 <__udivmoddi4+0x2b0>
 8001112:	4626      	mov	r6, r4
 8001114:	1a1c      	subs	r4, r3, r0
 8001116:	fbb4 f0f8 	udiv	r0, r4, r8
 800111a:	fb08 4410 	mls	r4, r8, r0, r4
 800111e:	fb00 f707 	mul.w	r7, r0, r7
 8001122:	fa1f f38e 	uxth.w	r3, lr
 8001126:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800112a:	429f      	cmp	r7, r3
 800112c:	d908      	bls.n	8001140 <__udivmoddi4+0x148>
 800112e:	eb1c 0303 	adds.w	r3, ip, r3
 8001132:	f100 34ff 	add.w	r4, r0, #4294967295
 8001136:	d202      	bcs.n	800113e <__udivmoddi4+0x146>
 8001138:	429f      	cmp	r7, r3
 800113a:	f200 80ae 	bhi.w	800129a <__udivmoddi4+0x2a2>
 800113e:	4620      	mov	r0, r4
 8001140:	1bdb      	subs	r3, r3, r7
 8001142:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001146:	e7a5      	b.n	8001094 <__udivmoddi4+0x9c>
 8001148:	f1c1 0720 	rsb	r7, r1, #32
 800114c:	408b      	lsls	r3, r1
 800114e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001152:	ea4c 0c03 	orr.w	ip, ip, r3
 8001156:	fa24 f607 	lsr.w	r6, r4, r7
 800115a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800115e:	fbb6 f8f9 	udiv	r8, r6, r9
 8001162:	fa1f fe8c 	uxth.w	lr, ip
 8001166:	fb09 6618 	mls	r6, r9, r8, r6
 800116a:	fa20 f307 	lsr.w	r3, r0, r7
 800116e:	408c      	lsls	r4, r1
 8001170:	fa00 fa01 	lsl.w	sl, r0, r1
 8001174:	fb08 f00e 	mul.w	r0, r8, lr
 8001178:	431c      	orrs	r4, r3
 800117a:	0c23      	lsrs	r3, r4, #16
 800117c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001180:	4298      	cmp	r0, r3
 8001182:	fa02 f201 	lsl.w	r2, r2, r1
 8001186:	d90a      	bls.n	800119e <__udivmoddi4+0x1a6>
 8001188:	eb1c 0303 	adds.w	r3, ip, r3
 800118c:	f108 36ff 	add.w	r6, r8, #4294967295
 8001190:	f080 8081 	bcs.w	8001296 <__udivmoddi4+0x29e>
 8001194:	4298      	cmp	r0, r3
 8001196:	d97e      	bls.n	8001296 <__udivmoddi4+0x29e>
 8001198:	f1a8 0802 	sub.w	r8, r8, #2
 800119c:	4463      	add	r3, ip
 800119e:	1a1e      	subs	r6, r3, r0
 80011a0:	fbb6 f3f9 	udiv	r3, r6, r9
 80011a4:	fb09 6613 	mls	r6, r9, r3, r6
 80011a8:	fb03 fe0e 	mul.w	lr, r3, lr
 80011ac:	b2a4      	uxth	r4, r4
 80011ae:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80011b2:	45a6      	cmp	lr, r4
 80011b4:	d908      	bls.n	80011c8 <__udivmoddi4+0x1d0>
 80011b6:	eb1c 0404 	adds.w	r4, ip, r4
 80011ba:	f103 30ff 	add.w	r0, r3, #4294967295
 80011be:	d266      	bcs.n	800128e <__udivmoddi4+0x296>
 80011c0:	45a6      	cmp	lr, r4
 80011c2:	d964      	bls.n	800128e <__udivmoddi4+0x296>
 80011c4:	3b02      	subs	r3, #2
 80011c6:	4464      	add	r4, ip
 80011c8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80011cc:	fba0 8302 	umull	r8, r3, r0, r2
 80011d0:	eba4 040e 	sub.w	r4, r4, lr
 80011d4:	429c      	cmp	r4, r3
 80011d6:	46c6      	mov	lr, r8
 80011d8:	461e      	mov	r6, r3
 80011da:	d350      	bcc.n	800127e <__udivmoddi4+0x286>
 80011dc:	d04d      	beq.n	800127a <__udivmoddi4+0x282>
 80011de:	b155      	cbz	r5, 80011f6 <__udivmoddi4+0x1fe>
 80011e0:	ebba 030e 	subs.w	r3, sl, lr
 80011e4:	eb64 0406 	sbc.w	r4, r4, r6
 80011e8:	fa04 f707 	lsl.w	r7, r4, r7
 80011ec:	40cb      	lsrs	r3, r1
 80011ee:	431f      	orrs	r7, r3
 80011f0:	40cc      	lsrs	r4, r1
 80011f2:	e9c5 7400 	strd	r7, r4, [r5]
 80011f6:	2100      	movs	r1, #0
 80011f8:	e751      	b.n	800109e <__udivmoddi4+0xa6>
 80011fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80011fe:	f1c2 0320 	rsb	r3, r2, #32
 8001202:	40d9      	lsrs	r1, r3
 8001204:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001208:	fa20 f303 	lsr.w	r3, r0, r3
 800120c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001210:	fbb1 f0f8 	udiv	r0, r1, r8
 8001214:	fb08 1110 	mls	r1, r8, r0, r1
 8001218:	4094      	lsls	r4, r2
 800121a:	431c      	orrs	r4, r3
 800121c:	fa1f f78c 	uxth.w	r7, ip
 8001220:	0c23      	lsrs	r3, r4, #16
 8001222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001226:	fb00 f107 	mul.w	r1, r0, r7
 800122a:	4299      	cmp	r1, r3
 800122c:	d908      	bls.n	8001240 <__udivmoddi4+0x248>
 800122e:	eb1c 0303 	adds.w	r3, ip, r3
 8001232:	f100 36ff 	add.w	r6, r0, #4294967295
 8001236:	d22c      	bcs.n	8001292 <__udivmoddi4+0x29a>
 8001238:	4299      	cmp	r1, r3
 800123a:	d92a      	bls.n	8001292 <__udivmoddi4+0x29a>
 800123c:	3802      	subs	r0, #2
 800123e:	4463      	add	r3, ip
 8001240:	1a5b      	subs	r3, r3, r1
 8001242:	fbb3 f1f8 	udiv	r1, r3, r8
 8001246:	fb08 3311 	mls	r3, r8, r1, r3
 800124a:	b2a4      	uxth	r4, r4
 800124c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001250:	fb01 f307 	mul.w	r3, r1, r7
 8001254:	42a3      	cmp	r3, r4
 8001256:	d908      	bls.n	800126a <__udivmoddi4+0x272>
 8001258:	eb1c 0404 	adds.w	r4, ip, r4
 800125c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001260:	d213      	bcs.n	800128a <__udivmoddi4+0x292>
 8001262:	42a3      	cmp	r3, r4
 8001264:	d911      	bls.n	800128a <__udivmoddi4+0x292>
 8001266:	3902      	subs	r1, #2
 8001268:	4464      	add	r4, ip
 800126a:	1ae4      	subs	r4, r4, r3
 800126c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001270:	e73b      	b.n	80010ea <__udivmoddi4+0xf2>
 8001272:	4604      	mov	r4, r0
 8001274:	e6f2      	b.n	800105c <__udivmoddi4+0x64>
 8001276:	4608      	mov	r0, r1
 8001278:	e708      	b.n	800108c <__udivmoddi4+0x94>
 800127a:	45c2      	cmp	sl, r8
 800127c:	d2af      	bcs.n	80011de <__udivmoddi4+0x1e6>
 800127e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001282:	eb63 060c 	sbc.w	r6, r3, ip
 8001286:	3801      	subs	r0, #1
 8001288:	e7a9      	b.n	80011de <__udivmoddi4+0x1e6>
 800128a:	4631      	mov	r1, r6
 800128c:	e7ed      	b.n	800126a <__udivmoddi4+0x272>
 800128e:	4603      	mov	r3, r0
 8001290:	e79a      	b.n	80011c8 <__udivmoddi4+0x1d0>
 8001292:	4630      	mov	r0, r6
 8001294:	e7d4      	b.n	8001240 <__udivmoddi4+0x248>
 8001296:	46b0      	mov	r8, r6
 8001298:	e781      	b.n	800119e <__udivmoddi4+0x1a6>
 800129a:	4463      	add	r3, ip
 800129c:	3802      	subs	r0, #2
 800129e:	e74f      	b.n	8001140 <__udivmoddi4+0x148>
 80012a0:	4606      	mov	r6, r0
 80012a2:	4623      	mov	r3, r4
 80012a4:	4608      	mov	r0, r1
 80012a6:	e711      	b.n	80010cc <__udivmoddi4+0xd4>
 80012a8:	3e02      	subs	r6, #2
 80012aa:	4463      	add	r3, ip
 80012ac:	e732      	b.n	8001114 <__udivmoddi4+0x11c>
 80012ae:	bf00      	nop

080012b0 <__aeabi_idiv0>:
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop

080012b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012bc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d013      	beq.n	80012f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80012cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80012d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00b      	beq.n	80012f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80012dc:	e000      	b.n	80012e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80012de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80012e0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f9      	beq.n	80012de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80012ea:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80012f4:	687b      	ldr	r3, [r7, #4]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e009      	b.n	8001326 <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	1c5a      	adds	r2, r3, #1
 8001316:	60ba      	str	r2, [r7, #8]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ffca 	bl	80012b4 <ITM_SendChar>
    for (int i = 0; i < len; i++)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3301      	adds	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	429a      	cmp	r2, r3
 800132c:	dbf1      	blt.n	8001312 <_write+0x12>
    }
    return len;
 800132e:	687b      	ldr	r3, [r7, #4]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <adxl_write>:
 * To read Polling.
 * - Write to
 */

void adxl_write (uint8_t Reg, uint8_t data)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	460a      	mov	r2, r1
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	4613      	mov	r3, r2
 8001346:	71bb      	strb	r3, [r7, #6]
	uint8_t writeBuf[2];
	writeBuf[0] = Reg|0x40;  // multi-byte write enabled
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800134e:	b2db      	uxtb	r3, r3
 8001350:	733b      	strb	r3, [r7, #12]
	writeBuf[1] = data;
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // pull the cs pin low to enable the slave
 8001356:	2200      	movs	r2, #0
 8001358:	2140      	movs	r1, #64	@ 0x40
 800135a:	4809      	ldr	r0, [pc, #36]	@ (8001380 <adxl_write+0x48>)
 800135c:	f001 f910 	bl	8002580 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, writeBuf, 2, 100);  // transmit the address and data
 8001360:	f107 010c 	add.w	r1, r7, #12
 8001364:	2364      	movs	r3, #100	@ 0x64
 8001366:	2202      	movs	r2, #2
 8001368:	4806      	ldr	r0, [pc, #24]	@ (8001384 <adxl_write+0x4c>)
 800136a:	f001 ff44 	bl	80031f6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // pull the cs pin high to disable the slave
 800136e:	2201      	movs	r2, #1
 8001370:	2140      	movs	r1, #64	@ 0x40
 8001372:	4803      	ldr	r0, [pc, #12]	@ (8001380 <adxl_write+0x48>)
 8001374:	f001 f904 	bl	8002580 <HAL_GPIO_WritePin>
}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40020400 	.word	0x40020400
 8001384:	2000021c 	.word	0x2000021c

08001388 <adxl_read>:

void adxl_read (uint8_t Reg, uint8_t *Buffer, size_t len)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	73fb      	strb	r3, [r7, #15]
	Reg |= 0x80;  // read operation
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800139c:	b2db      	uxtb	r3, r3
 800139e:	73fb      	strb	r3, [r7, #15]
	Reg |= 0x40;  // multi-byte read
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // pull the CS pin low to enable the slave
 80013aa:	2200      	movs	r2, #0
 80013ac:	2140      	movs	r1, #64	@ 0x40
 80013ae:	480d      	ldr	r0, [pc, #52]	@ (80013e4 <adxl_read+0x5c>)
 80013b0:	f001 f8e6 	bl	8002580 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, &Reg, 1, 100);  // send the address from where you want to read data
 80013b4:	f107 010f 	add.w	r1, r7, #15
 80013b8:	2364      	movs	r3, #100	@ 0x64
 80013ba:	2201      	movs	r2, #1
 80013bc:	480a      	ldr	r0, [pc, #40]	@ (80013e8 <adxl_read+0x60>)
 80013be:	f001 ff1a 	bl	80031f6 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi1, Buffer, len, 100);  // read 6 BYTES of data
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	2364      	movs	r3, #100	@ 0x64
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	4807      	ldr	r0, [pc, #28]	@ (80013e8 <adxl_read+0x60>)
 80013cc:	f002 f856 	bl	800347c <HAL_SPI_Receive>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // pull the CS pin high to disable the slave
 80013d0:	2201      	movs	r2, #1
 80013d2:	2140      	movs	r1, #64	@ 0x40
 80013d4:	4803      	ldr	r0, [pc, #12]	@ (80013e4 <adxl_read+0x5c>)
 80013d6:	f001 f8d3 	bl	8002580 <HAL_GPIO_WritePin>
}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40020400 	.word	0x40020400
 80013e8:	2000021c 	.word	0x2000021c

080013ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7)
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	2b80      	cmp	r3, #128	@ 0x80
 80013fa:	d12a      	bne.n	8001452 <HAL_GPIO_EXTI_Callback+0x66>
    {
//        printf("Interrupt detected\n");

        uint8_t int_source;
        adxl_read(INT_SOURCE, &int_source, 1);
 80013fc:	4b17      	ldr	r3, [pc, #92]	@ (800145c <HAL_GPIO_EXTI_Callback+0x70>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	f107 010f 	add.w	r1, r7, #15
 8001404:	2201      	movs	r2, #1
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ffbe 	bl	8001388 <adxl_read>

        if (int_source & (1 << 5))
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	f003 0320 	and.w	r3, r3, #32
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_EXTI_Callback+0x32>
        {
            printf("Double Tap detected.\n");
 8001416:	4812      	ldr	r0, [pc, #72]	@ (8001460 <HAL_GPIO_EXTI_Callback+0x74>)
 8001418:	f003 f9ae 	bl	8004778 <puts>
        else if (int_source & (1 << 3))
        {
            printf("Inactivity detected.\n");
        }
    }
}
 800141c:	e019      	b.n	8001452 <HAL_GPIO_EXTI_Callback+0x66>
        else if (int_source & (1 << 6))
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_EXTI_Callback+0x44>
            printf("Single Tap detected.\n");
 8001428:	480e      	ldr	r0, [pc, #56]	@ (8001464 <HAL_GPIO_EXTI_Callback+0x78>)
 800142a:	f003 f9a5 	bl	8004778 <puts>
}
 800142e:	e010      	b.n	8001452 <HAL_GPIO_EXTI_Callback+0x66>
        else if (int_source & (1 << 4))
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_EXTI_Callback+0x56>
            printf("Activity detected.\n");
 800143a:	480b      	ldr	r0, [pc, #44]	@ (8001468 <HAL_GPIO_EXTI_Callback+0x7c>)
 800143c:	f003 f99c 	bl	8004778 <puts>
}
 8001440:	e007      	b.n	8001452 <HAL_GPIO_EXTI_Callback+0x66>
        else if (int_source & (1 << 3))
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	2b00      	cmp	r3, #0
 800144a:	d002      	beq.n	8001452 <HAL_GPIO_EXTI_Callback+0x66>
            printf("Inactivity detected.\n");
 800144c:	4807      	ldr	r0, [pc, #28]	@ (800146c <HAL_GPIO_EXTI_Callback+0x80>)
 800144e:	f003 f993 	bl	8004778 <puts>
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000010 	.word	0x20000010
 8001460:	08006ba0 	.word	0x08006ba0
 8001464:	08006bb8 	.word	0x08006bb8
 8001468:	08006bd0 	.word	0x08006bd0
 800146c:	08006be4 	.word	0x08006be4

08001470 <adxl_init>:
//    }
//    __enable_irq();
//}

void adxl_init (void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	adxl_read(DEVICE, &chipID, 1);
 8001474:	4b41      	ldr	r3, [pc, #260]	@ (800157c <adxl_init+0x10c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2201      	movs	r2, #1
 800147a:	4941      	ldr	r1, [pc, #260]	@ (8001580 <adxl_init+0x110>)
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff83 	bl	8001388 <adxl_read>
	if (chipID == 0xE5)
 8001482:	4b3f      	ldr	r3, [pc, #252]	@ (8001580 <adxl_init+0x110>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2be5      	cmp	r3, #229	@ 0xe5
 8001488:	d175      	bne.n	8001576 <adxl_init+0x106>
	{
		adxl_write (POWER_CTL, 0x00);		// Standby mode for initialize. (Reset all Bits.)
 800148a:	4b3e      	ldr	r3, [pc, #248]	@ (8001584 <adxl_init+0x114>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff51 	bl	8001338 <adxl_write>
		// 000[1][1011] = 0x0B = 200  Hz
		// 000[1][1010] = 0x0A = 100  Hz
		// 000[1][1001] = 0x09 = 50   Hz
		// 000[1][1000] = 0x08 = 25   Hz
		// 000[1][0111] = 0x07 = 12.5 Hz
		adxl_write (BW_RATE, 0x0D);			// Disable sleep mode and Output Data Rate 800Hz
 8001496:	4b3c      	ldr	r3, [pc, #240]	@ (8001588 <adxl_init+0x118>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	210d      	movs	r1, #13
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff4b 	bl	8001338 <adxl_write>
	////////// DATA FORMAT //////////
		// 00[0]01011		Set the interrupt to active high
		// 0000[1]011		Set in full resolution mode
		// 00001[0]11		Set in the right-justified mode
		// 000010[11]		Set the g range in // ±16 g
		adxl_write (DATA_FORMAT, 0x0B);
 80014a2:	4b3a      	ldr	r3, [pc, #232]	@ (800158c <adxl_init+0x11c>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	210b      	movs	r1, #11
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff45 	bl	8001338 <adxl_write>
	////////// OFFSET CALIBRATION //////////
		// The scale factor of offset is 15.6mg/LSB = 0.0156g/LSB
		// x_avg (100 samples) = -0.04989g
		// y_avg (100 samples) = -0.03662g
		// z_avg (100 samples) = 0.946931g
		adxl_write (OFSX, 0x03);			// Set offset x-axis 3 x 0.0156g = +0.0468g
 80014ae:	4b38      	ldr	r3, [pc, #224]	@ (8001590 <adxl_init+0x120>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2103      	movs	r1, #3
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff3f 	bl	8001338 <adxl_write>
		adxl_write (OFSY, 0x03);			// Set offset y-axis 3 x 0.0156g = +0.0468g
 80014ba:	4b36      	ldr	r3, [pc, #216]	@ (8001594 <adxl_init+0x124>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2103      	movs	r1, #3
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff39 	bl	8001338 <adxl_write>
		adxl_write (OFSZ, 0x03);			// Set offset z-axis 3 x 0.0156g = +0.0468g
 80014c6:	4b34      	ldr	r3, [pc, #208]	@ (8001598 <adxl_init+0x128>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2103      	movs	r1, #3
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff33 	bl	8001338 <adxl_write>

	////////// TAP DETECTION //////////
		// Threshold tap, the scale factor is 62.5mg/LSB = 0.0625g/LSB
		adxl_write (THRESH_TAP, 0x18);		// Set threshold 24 x 0.0625 = 1.5g
 80014d2:	4b32      	ldr	r3, [pc, #200]	@ (800159c <adxl_init+0x12c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2118      	movs	r1, #24
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff2d 	bl	8001338 <adxl_write>
//		adxl_write (THRESH_TAP, 0xFF);		// Set threshold 255 x 0.0625 = 15.9375g (Maximum)
		// Tap duration, the scale factor is 625us/LSB = 0.625ms/LSB
		adxl_write (DUR, 0x50);				// Set duration 80 x 0.625ms = 50ms
 80014de:	4b30      	ldr	r3, [pc, #192]	@ (80015a0 <adxl_init+0x130>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2150      	movs	r1, #80	@ 0x50
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff27 	bl	8001338 <adxl_write>
		// Tap latency, the scale factor is 1.25ms/LSB
		adxl_write (Latent, 0x20);			// Set latency 32 x 1.25ms = 40ms
 80014ea:	4b2e      	ldr	r3, [pc, #184]	@ (80015a4 <adxl_init+0x134>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2120      	movs	r1, #32
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff21 	bl	8001338 <adxl_write>
		// Tap Window, the scale factor is 1.25ms/LSB
		adxl_write (Window, 0xF0);			// Set window 240 x 1.25ms = 300ms
 80014f6:	4b2c      	ldr	r3, [pc, #176]	@ (80015a8 <adxl_init+0x138>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	21f0      	movs	r1, #240	@ 0xf0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff1b 	bl	8001338 <adxl_write>
		// Tap Axes control
		adxl_write (TAP_AXES, 0x01),		// Enable z-axis for detect tap function
 8001502:	4b2a      	ldr	r3, [pc, #168]	@ (80015ac <adxl_init+0x13c>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2101      	movs	r1, #1
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff15 	bl	8001338 <adxl_write>

	////////// ACTIVITY ANS INACTIVITY DETECTION //////////
		// Threshold activity, the scale factor is 62.5mg/LSB = 0.0625g/LSB
		adxl_write (THRESH_ACT, 0x03);		// set threshold activity 3 x 0.0625g = 0.1875g
 800150e:	4b28      	ldr	r3, [pc, #160]	@ (80015b0 <adxl_init+0x140>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2103      	movs	r1, #3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff0f 	bl	8001338 <adxl_write>
//		adxl_write (THRESH_ACT, 0x05);		// set threshold activity 4 x 0.0625g = 0.25g
		// Threshold inactivity, The scale factor of is 62.5mg/LSB = 0.0625g/LSB
		adxl_write (THRESH_INACT, 0x02);	// set threshold inactivity 2 x 0.0625g = 0.125g
 800151a:	4b26      	ldr	r3, [pc, #152]	@ (80015b4 <adxl_init+0x144>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2102      	movs	r1, #2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff09 	bl	8001338 <adxl_write>
//		adxl_write (THRESH_INACT, 0x05);	// set threshold inactivity 4 x 0.0625g = 0.25g
		// Time inactivity, the scale factor is 1sec/LSB
		adxl_write (TIME_INACT, 0x05);		// set time inactivity 5 x 1sec = 5sec
 8001526:	4b24      	ldr	r3, [pc, #144]	@ (80015b8 <adxl_init+0x148>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2105      	movs	r1, #5
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff03 	bl	8001338 <adxl_write>
		// Control activity detection axis
		// ACT_ACT_CTL 0x60: 0110 0000 DC-coupled and detected X and Y axis
		// ACT_INACT_CTL 0x06: 0000 0110 DC-coupled and detected X and Y axis
		adxl_write (ACT_INACT_CTL, 0x66);
 8001532:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <adxl_init+0x14c>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2166      	movs	r1, #102	@ 0x66
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fefd 	bl	8001338 <adxl_write>

	////////// INTERRUPTS //////////
		adxl_write (INT_ENABLE, 0x00);		// Clear interrupt functions
 800153e:	4b20      	ldr	r3, [pc, #128]	@ (80015c0 <adxl_init+0x150>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fef7 	bl	8001338 <adxl_write>
		adxl_write (INT_MAP, 0x78);			// Set Single-Double Tap and Activity-Inactivity INIT2
 800154a:	4b1e      	ldr	r3, [pc, #120]	@ (80015c4 <adxl_init+0x154>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2178      	movs	r1, #120	@ 0x78
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fef1 	bl	8001338 <adxl_write>
		adxl_write (INT_ENABLE, 0x78);		// Enable interrupt tap, activity and inactivity functions
 8001556:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <adxl_init+0x150>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2178      	movs	r1, #120	@ 0x78
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff feeb 	bl	8001338 <adxl_write>

	////////// POWER CONTROL //////////
		// 00[1]11000		Enable the link bit
		// 001[1]1000		Enable the  AUTO-SLEEP bit
		// 0011[1]000		Change Power mode to Measurement mode
		adxl_write (POWER_CTL, 0x38);
 8001562:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <adxl_init+0x114>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2138      	movs	r1, #56	@ 0x38
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fee5 	bl	8001338 <adxl_write>
		HAL_Delay(500);
 800156e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001572:	f000 fd45 	bl	8002000 <HAL_Delay>
	}
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000294 	.word	0x20000294
 8001580:	20000284 	.word	0x20000284
 8001584:	2000000d 	.word	0x2000000d
 8001588:	2000000c 	.word	0x2000000c
 800158c:	20000011 	.word	0x20000011
 8001590:	20000001 	.word	0x20000001
 8001594:	20000002 	.word	0x20000002
 8001598:	20000003 	.word	0x20000003
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000004 	.word	0x20000004
 80015a4:	20000005 	.word	0x20000005
 80015a8:	20000006 	.word	0x20000006
 80015ac:	2000000b 	.word	0x2000000b
 80015b0:	20000007 	.word	0x20000007
 80015b4:	20000008 	.word	0x20000008
 80015b8:	20000009 	.word	0x20000009
 80015bc:	2000000a 	.word	0x2000000a
 80015c0:	2000000e 	.word	0x2000000e
 80015c4:	2000000f 	.word	0x2000000f

080015c8 <setBasePosition>:

void setBasePosition(float x, float y, float z)
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b08b      	sub	sp, #44	@ 0x2c
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
    float absX = fabs(x);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015da:	61fb      	str	r3, [r7, #28]
    float absY = fabs(y);
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015e2:	61bb      	str	r3, [r7, #24]
    float absZ = fabs(z);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015ea:	617b      	str	r3, [r7, #20]

    float basePosition = 0; // To store the final base position
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
    char axis = ' ';        // To identify which axis is selected
 80015f2:	2320      	movs	r3, #32
 80015f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    // Dynamically choose the dominant axis
    if (absX >= absY && absX >= absZ)
 80015f8:	69b9      	ldr	r1, [r7, #24]
 80015fa:	69f8      	ldr	r0, [r7, #28]
 80015fc:	f7ff fcd0 	bl	8000fa0 <__aeabi_fcmpge>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00c      	beq.n	8001620 <setBasePosition+0x58>
 8001606:	6979      	ldr	r1, [r7, #20]
 8001608:	69f8      	ldr	r0, [r7, #28]
 800160a:	f7ff fcc9 	bl	8000fa0 <__aeabi_fcmpge>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <setBasePosition+0x58>
    {
        basePosition = x;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
        axis = 'X';
 8001618:	2358      	movs	r3, #88	@ 0x58
 800161a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800161e:	e026      	b.n	800166e <setBasePosition+0xa6>
    }
    else if (absY >= absX && absY >= absZ)
 8001620:	69f9      	ldr	r1, [r7, #28]
 8001622:	69b8      	ldr	r0, [r7, #24]
 8001624:	f7ff fcbc 	bl	8000fa0 <__aeabi_fcmpge>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00c      	beq.n	8001648 <setBasePosition+0x80>
 800162e:	6979      	ldr	r1, [r7, #20]
 8001630:	69b8      	ldr	r0, [r7, #24]
 8001632:	f7ff fcb5 	bl	8000fa0 <__aeabi_fcmpge>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <setBasePosition+0x80>
    {
        basePosition = y;
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
        axis = 'Y';
 8001640:	2359      	movs	r3, #89	@ 0x59
 8001642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001646:	e012      	b.n	800166e <setBasePosition+0xa6>
    }
    else if (absZ >= absX && absZ >= absY)
 8001648:	69f9      	ldr	r1, [r7, #28]
 800164a:	6978      	ldr	r0, [r7, #20]
 800164c:	f7ff fca8 	bl	8000fa0 <__aeabi_fcmpge>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00b      	beq.n	800166e <setBasePosition+0xa6>
 8001656:	69b9      	ldr	r1, [r7, #24]
 8001658:	6978      	ldr	r0, [r7, #20]
 800165a:	f7ff fca1 	bl	8000fa0 <__aeabi_fcmpge>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d004      	beq.n	800166e <setBasePosition+0xa6>
    {
        basePosition = z;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
        axis = 'Z';
 8001668:	235a      	movs	r3, #90	@ 0x5a
 800166a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }

    // Output the result
    printf("Setting %c as the Base Position: %.2f\n", axis, basePosition);
 800166e:	f897 4023 	ldrb.w	r4, [r7, #35]	@ 0x23
 8001672:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001674:	f7fe ffa4 	bl	80005c0 <__aeabi_f2d>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4621      	mov	r1, r4
 800167e:	4803      	ldr	r0, [pc, #12]	@ (800168c <setBasePosition+0xc4>)
 8001680:	f003 f812 	bl	80046a8 <iprintf>
}
 8001684:	bf00      	nop
 8001686:	372c      	adds	r7, #44	@ 0x2c
 8001688:	46bd      	mov	sp, r7
 800168a:	bd90      	pop	{r4, r7, pc}
 800168c:	08006bfc 	.word	0x08006bfc

08001690 <adxl_read_data>:


void adxl_read_data (void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	adxl_read (DATAX0, XData, 2);
 8001694:	4b48      	ldr	r3, [pc, #288]	@ (80017b8 <adxl_read_data+0x128>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2202      	movs	r2, #2
 800169a:	4948      	ldr	r1, [pc, #288]	@ (80017bc <adxl_read_data+0x12c>)
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fe73 	bl	8001388 <adxl_read>
	adxl_read (DATAY0, YData, 2);
 80016a2:	4b47      	ldr	r3, [pc, #284]	@ (80017c0 <adxl_read_data+0x130>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2202      	movs	r2, #2
 80016a8:	4946      	ldr	r1, [pc, #280]	@ (80017c4 <adxl_read_data+0x134>)
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fe6c 	bl	8001388 <adxl_read>
	adxl_read (DATAZ0, ZData, 2);
 80016b0:	4b45      	ldr	r3, [pc, #276]	@ (80017c8 <adxl_read_data+0x138>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2202      	movs	r2, #2
 80016b6:	4945      	ldr	r1, [pc, #276]	@ (80017cc <adxl_read_data+0x13c>)
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fe65 	bl	8001388 <adxl_read>

	x = ((XData[1] << 8) | XData[0]);
 80016be:	4b3f      	ldr	r3, [pc, #252]	@ (80017bc <adxl_read_data+0x12c>)
 80016c0:	785b      	ldrb	r3, [r3, #1]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	4b3d      	ldr	r3, [pc, #244]	@ (80017bc <adxl_read_data+0x12c>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	4313      	orrs	r3, r2
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	4b3f      	ldr	r3, [pc, #252]	@ (80017d0 <adxl_read_data+0x140>)
 80016d2:	801a      	strh	r2, [r3, #0]
	y = ((YData[1] << 8) | YData[0]);
 80016d4:	4b3b      	ldr	r3, [pc, #236]	@ (80017c4 <adxl_read_data+0x134>)
 80016d6:	785b      	ldrb	r3, [r3, #1]
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	b21a      	sxth	r2, r3
 80016dc:	4b39      	ldr	r3, [pc, #228]	@ (80017c4 <adxl_read_data+0x134>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	4b3b      	ldr	r3, [pc, #236]	@ (80017d4 <adxl_read_data+0x144>)
 80016e8:	801a      	strh	r2, [r3, #0]
	z = ((ZData[1] << 8) | ZData[0]);
 80016ea:	4b38      	ldr	r3, [pc, #224]	@ (80017cc <adxl_read_data+0x13c>)
 80016ec:	785b      	ldrb	r3, [r3, #1]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	4b36      	ldr	r3, [pc, #216]	@ (80017cc <adxl_read_data+0x13c>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	4b36      	ldr	r3, [pc, #216]	@ (80017d8 <adxl_read_data+0x148>)
 80016fe:	801a      	strh	r2, [r3, #0]

	// Convert into 'g'
	xg = (float)x*0.0039 ;
 8001700:	4b33      	ldr	r3, [pc, #204]	@ (80017d0 <adxl_read_data+0x140>)
 8001702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fb94 	bl	8000e34 <__aeabi_i2f>
 800170c:	4603      	mov	r3, r0
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff56 	bl	80005c0 <__aeabi_f2d>
 8001714:	a326      	add	r3, pc, #152	@ (adr r3, 80017b0 <adxl_read_data+0x120>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe ffa9 	bl	8000670 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f7ff fa7b 	bl	8000c20 <__aeabi_d2f>
 800172a:	4603      	mov	r3, r0
 800172c:	4a2b      	ldr	r2, [pc, #172]	@ (80017dc <adxl_read_data+0x14c>)
 800172e:	6013      	str	r3, [r2, #0]
	yg = (float)y*0.0039 ;
 8001730:	4b28      	ldr	r3, [pc, #160]	@ (80017d4 <adxl_read_data+0x144>)
 8001732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fb7c 	bl	8000e34 <__aeabi_i2f>
 800173c:	4603      	mov	r3, r0
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe ff3e 	bl	80005c0 <__aeabi_f2d>
 8001744:	a31a      	add	r3, pc, #104	@ (adr r3, 80017b0 <adxl_read_data+0x120>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	f7fe ff91 	bl	8000670 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff fa63 	bl	8000c20 <__aeabi_d2f>
 800175a:	4603      	mov	r3, r0
 800175c:	4a20      	ldr	r2, [pc, #128]	@ (80017e0 <adxl_read_data+0x150>)
 800175e:	6013      	str	r3, [r2, #0]
	zg = (float)z*0.0039 ;
 8001760:	4b1d      	ldr	r3, [pc, #116]	@ (80017d8 <adxl_read_data+0x148>)
 8001762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fb64 	bl	8000e34 <__aeabi_i2f>
 800176c:	4603      	mov	r3, r0
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe ff26 	bl	80005c0 <__aeabi_f2d>
 8001774:	a30e      	add	r3, pc, #56	@ (adr r3, 80017b0 <adxl_read_data+0x120>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7fe ff79 	bl	8000670 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff fa4b 	bl	8000c20 <__aeabi_d2f>
 800178a:	4603      	mov	r3, r0
 800178c:	4a15      	ldr	r2, [pc, #84]	@ (80017e4 <adxl_read_data+0x154>)
 800178e:	6013      	str	r3, [r2, #0]

	setBasePosition(xg,yg,zg);
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <adxl_read_data+0x14c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a12      	ldr	r2, [pc, #72]	@ (80017e0 <adxl_read_data+0x150>)
 8001796:	6811      	ldr	r1, [r2, #0]
 8001798:	4a12      	ldr	r2, [pc, #72]	@ (80017e4 <adxl_read_data+0x154>)
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff13 	bl	80015c8 <setBasePosition>

	HAL_Delay(100);
 80017a2:	2064      	movs	r0, #100	@ 0x64
 80017a4:	f000 fc2c 	bl	8002000 <HAL_Delay>
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	f3af 8000 	nop.w
 80017b0:	8e8a71de 	.word	0x8e8a71de
 80017b4:	3f6ff2e4 	.word	0x3f6ff2e4
 80017b8:	20000012 	.word	0x20000012
 80017bc:	20000274 	.word	0x20000274
 80017c0:	20000013 	.word	0x20000013
 80017c4:	20000278 	.word	0x20000278
 80017c8:	20000014 	.word	0x20000014
 80017cc:	2000027c 	.word	0x2000027c
 80017d0:	2000027e 	.word	0x2000027e
 80017d4:	20000280 	.word	0x20000280
 80017d8:	20000282 	.word	0x20000282
 80017dc:	20000288 	.word	0x20000288
 80017e0:	2000028c 	.word	0x2000028c
 80017e4:	20000290 	.word	0x20000290

080017e8 <Detect_Bad_Tilt>:
 * Function to read the Bad Detection by changing the detect the angle of delta.
 *
 * The concept read the angle delta is by convert the coordinate from Cartesian to Spherical.
 */
void Detect_Bad_Tilt(float x_g, float y_g, float z_g)
{
 80017e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017ec:	b08f      	sub	sp, #60	@ 0x3c
 80017ee:	af04      	add	r7, sp, #16
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
	//	r = sqrt(pow(x_g,2) + pow(y_g,2) + pow(z_g,2));
	//	delta_angle = acos(z_g/(r));
	//	phi_angle = atan(y_g/x_g);

	// REF an-1057
	theta_angle = atan(x_g / sqrt((y_g * y_g) + (z_g * z_g)));
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7fe fee2 	bl	80005c0 <__aeabi_f2d>
 80017fc:	4604      	mov	r4, r0
 80017fe:	460d      	mov	r5, r1
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	68b8      	ldr	r0, [r7, #8]
 8001804:	f7fe fcc4 	bl	8000190 <__aeabi_fmul>
 8001808:	4603      	mov	r3, r0
 800180a:	461e      	mov	r6, r3
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7fe fcbe 	bl	8000190 <__aeabi_fmul>
 8001814:	4603      	mov	r3, r0
 8001816:	4619      	mov	r1, r3
 8001818:	4630      	mov	r0, r6
 800181a:	f7ff fa57 	bl	8000ccc <__addsf3>
 800181e:	4603      	mov	r3, r0
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fecd 	bl	80005c0 <__aeabi_f2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f004 ff1b 	bl	8006668 <sqrt>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4620      	mov	r0, r4
 8001838:	4629      	mov	r1, r5
 800183a:	f7ff f843 	bl	80008c4 <__aeabi_ddiv>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f004 ff33 	bl	80066b0 <atan>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	f7ff f9e5 	bl	8000c20 <__aeabi_d2f>
 8001856:	4603      	mov	r3, r0
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
	psi_angle = atan(y_g /sqrt((x_g * x_g) + (z_g * z_g)) );
 800185a:	68b8      	ldr	r0, [r7, #8]
 800185c:	f7fe feb0 	bl	80005c0 <__aeabi_f2d>
 8001860:	4604      	mov	r4, r0
 8001862:	460d      	mov	r5, r1
 8001864:	68f9      	ldr	r1, [r7, #12]
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f7fe fc92 	bl	8000190 <__aeabi_fmul>
 800186c:	4603      	mov	r3, r0
 800186e:	461e      	mov	r6, r3
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe fc8c 	bl	8000190 <__aeabi_fmul>
 8001878:	4603      	mov	r3, r0
 800187a:	4619      	mov	r1, r3
 800187c:	4630      	mov	r0, r6
 800187e:	f7ff fa25 	bl	8000ccc <__addsf3>
 8001882:	4603      	mov	r3, r0
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe9b 	bl	80005c0 <__aeabi_f2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	f004 fee9 	bl	8006668 <sqrt>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f7ff f811 	bl	80008c4 <__aeabi_ddiv>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f004 ff01 	bl	80066b0 <atan>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f7ff f9b3 	bl	8000c20 <__aeabi_d2f>
 80018ba:	4603      	mov	r3, r0
 80018bc:	623b      	str	r3, [r7, #32]
    phi_angle = atan(sqrt((x_g * x_g) + (y_g * y_g)) / z_g);
 80018be:	68f9      	ldr	r1, [r7, #12]
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f7fe fc65 	bl	8000190 <__aeabi_fmul>
 80018c6:	4603      	mov	r3, r0
 80018c8:	461c      	mov	r4, r3
 80018ca:	68b9      	ldr	r1, [r7, #8]
 80018cc:	68b8      	ldr	r0, [r7, #8]
 80018ce:	f7fe fc5f 	bl	8000190 <__aeabi_fmul>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4619      	mov	r1, r3
 80018d6:	4620      	mov	r0, r4
 80018d8:	f7ff f9f8 	bl	8000ccc <__addsf3>
 80018dc:	4603      	mov	r3, r0
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fe6e 	bl	80005c0 <__aeabi_f2d>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f004 febc 	bl	8006668 <sqrt>
 80018f0:	4604      	mov	r4, r0
 80018f2:	460d      	mov	r5, r1
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7fe fe63 	bl	80005c0 <__aeabi_f2d>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4620      	mov	r0, r4
 8001900:	4629      	mov	r1, r5
 8001902:	f7fe ffdf 	bl	80008c4 <__aeabi_ddiv>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	f004 fecf 	bl	80066b0 <atan>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f7ff f981 	bl	8000c20 <__aeabi_d2f>
 800191e:	4603      	mov	r3, r0
 8001920:	61fb      	str	r3, [r7, #28]

	theta_deg = theta_angle * (180/3.14);
 8001922:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001924:	f7fe fe4c 	bl	80005c0 <__aeabi_f2d>
 8001928:	a32f      	add	r3, pc, #188	@ (adr r3, 80019e8 <Detect_Bad_Tilt+0x200>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	f7fe fe9f 	bl	8000670 <__aeabi_dmul>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff f971 	bl	8000c20 <__aeabi_d2f>
 800193e:	4603      	mov	r3, r0
 8001940:	61bb      	str	r3, [r7, #24]
	psi_deg = psi_angle * (180/3.14);
 8001942:	6a38      	ldr	r0, [r7, #32]
 8001944:	f7fe fe3c 	bl	80005c0 <__aeabi_f2d>
 8001948:	a327      	add	r3, pc, #156	@ (adr r3, 80019e8 <Detect_Bad_Tilt+0x200>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe fe8f 	bl	8000670 <__aeabi_dmul>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f7ff f961 	bl	8000c20 <__aeabi_d2f>
 800195e:	4603      	mov	r3, r0
 8001960:	617b      	str	r3, [r7, #20]
	phi_deg = phi_angle * (180/3.14);
 8001962:	69f8      	ldr	r0, [r7, #28]
 8001964:	f7fe fe2c 	bl	80005c0 <__aeabi_f2d>
 8001968:	a31f      	add	r3, pc, #124	@ (adr r3, 80019e8 <Detect_Bad_Tilt+0x200>)
 800196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196e:	f7fe fe7f 	bl	8000670 <__aeabi_dmul>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f7ff f951 	bl	8000c20 <__aeabi_d2f>
 800197e:	4603      	mov	r3, r0
 8001980:	613b      	str	r3, [r7, #16]

	printf("Theta = %.2f	| 	Psi = %.2f 	|	Phi = %.2f\r\n", theta_deg, psi_deg, phi_deg);
 8001982:	69b8      	ldr	r0, [r7, #24]
 8001984:	f7fe fe1c 	bl	80005c0 <__aeabi_f2d>
 8001988:	4680      	mov	r8, r0
 800198a:	4689      	mov	r9, r1
 800198c:	6978      	ldr	r0, [r7, #20]
 800198e:	f7fe fe17 	bl	80005c0 <__aeabi_f2d>
 8001992:	4604      	mov	r4, r0
 8001994:	460d      	mov	r5, r1
 8001996:	6938      	ldr	r0, [r7, #16]
 8001998:	f7fe fe12 	bl	80005c0 <__aeabi_f2d>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019a4:	e9cd 4500 	strd	r4, r5, [sp]
 80019a8:	4642      	mov	r2, r8
 80019aa:	464b      	mov	r3, r9
 80019ac:	4810      	ldr	r0, [pc, #64]	@ (80019f0 <Detect_Bad_Tilt+0x208>)
 80019ae:	f002 fe7b 	bl	80046a8 <iprintf>

	if (theta_deg >= 30.0 && theta_deg <= 90.0)
 80019b2:	4910      	ldr	r1, [pc, #64]	@ (80019f4 <Detect_Bad_Tilt+0x20c>)
 80019b4:	69b8      	ldr	r0, [r7, #24]
 80019b6:	f7ff faf3 	bl	8000fa0 <__aeabi_fcmpge>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d100      	bne.n	80019c2 <Detect_Bad_Tilt+0x1da>
	{
		printf("Bad Rider Detected! \r\n");
	}
}
 80019c0:	e00a      	b.n	80019d8 <Detect_Bad_Tilt+0x1f0>
	if (theta_deg >= 30.0 && theta_deg <= 90.0)
 80019c2:	490d      	ldr	r1, [pc, #52]	@ (80019f8 <Detect_Bad_Tilt+0x210>)
 80019c4:	69b8      	ldr	r0, [r7, #24]
 80019c6:	f7ff fae1 	bl	8000f8c <__aeabi_fcmple>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d100      	bne.n	80019d2 <Detect_Bad_Tilt+0x1ea>
}
 80019d0:	e002      	b.n	80019d8 <Detect_Bad_Tilt+0x1f0>
		printf("Bad Rider Detected! \r\n");
 80019d2:	480a      	ldr	r0, [pc, #40]	@ (80019fc <Detect_Bad_Tilt+0x214>)
 80019d4:	f002 fed0 	bl	8004778 <puts>
}
 80019d8:	bf00      	nop
 80019da:	372c      	adds	r7, #44	@ 0x2c
 80019dc:	46bd      	mov	sp, r7
 80019de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019e2:	bf00      	nop
 80019e4:	f3af 8000 	nop.w
 80019e8:	61d59ae7 	.word	0x61d59ae7
 80019ec:	404ca994 	.word	0x404ca994
 80019f0:	08006c24 	.word	0x08006c24
 80019f4:	41f00000 	.word	0x41f00000
 80019f8:	42b40000 	.word	0x42b40000
 80019fc:	08006c50 	.word	0x08006c50

08001a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a00:	b5b0      	push	{r4, r5, r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a04:	f000 fa8d 	bl	8001f22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a08:	f000 f82a 	bl	8001a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a0c:	f000 f8ac 	bl	8001b68 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001a10:	f000 f874 	bl	8001afc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  adxl_init();
 8001a14:	f7ff fd2c 	bl	8001470 <adxl_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  adxl_read_data();
 8001a18:	f7ff fe3a 	bl	8001690 <adxl_read_data>

	  Detect_Bad_Tilt(x,y,z);
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a54 <main+0x54>)
 8001a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fa06 	bl	8000e34 <__aeabi_i2f>
 8001a28:	4604      	mov	r4, r0
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a58 <main+0x58>)
 8001a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff f9ff 	bl	8000e34 <__aeabi_i2f>
 8001a36:	4605      	mov	r5, r0
 8001a38:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <main+0x5c>)
 8001a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff f9f8 	bl	8000e34 <__aeabi_i2f>
 8001a44:	4603      	mov	r3, r0
 8001a46:	461a      	mov	r2, r3
 8001a48:	4629      	mov	r1, r5
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f7ff fecc 	bl	80017e8 <Detect_Bad_Tilt>
	  adxl_read_data();
 8001a50:	bf00      	nop
 8001a52:	e7e1      	b.n	8001a18 <main+0x18>
 8001a54:	2000027e 	.word	0x2000027e
 8001a58:	20000280 	.word	0x20000280
 8001a5c:	20000282 	.word	0x20000282

08001a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b092      	sub	sp, #72	@ 0x48
 8001a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	2234      	movs	r2, #52	@ 0x34
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f002 ff62 	bl	8004938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a74:	463b      	mov	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a82:	4b1d      	ldr	r3, [pc, #116]	@ (8001af8 <SystemClock_Config+0x98>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8001a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8001af8 <SystemClock_Config+0x98>)
 8001a8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a90:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a92:	2302      	movs	r3, #2
 8001a94:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a96:	2301      	movs	r3, #1
 8001a98:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a9a:	2310      	movs	r3, #16
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001aa6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001aaa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001aac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ab0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 fd92 	bl	80025e0 <HAL_RCC_OscConfig>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001ac2:	f000 f8b3 	bl	8001c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac6:	230f      	movs	r3, #15
 8001ac8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aca:	2303      	movs	r3, #3
 8001acc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ada:	463b      	mov	r3, r7
 8001adc:	2101      	movs	r1, #1
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f001 f8ae 	bl	8002c40 <HAL_RCC_ClockConfig>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001aea:	f000 f89f 	bl	8001c2c <Error_Handler>
  }
}
 8001aee:	bf00      	nop
 8001af0:	3748      	adds	r7, #72	@ 0x48
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40007000 	.word	0x40007000

08001afc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b00:	4b17      	ldr	r3, [pc, #92]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b02:	4a18      	ldr	r2, [pc, #96]	@ (8001b64 <MX_SPI1_Init+0x68>)
 8001b04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b06:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b0e:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b30:	2218      	movs	r2, #24
 8001b32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b40:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b48:	220a      	movs	r2, #10
 8001b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b4e:	f001 fac9 	bl	80030e4 <HAL_SPI_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b58:	f000 f868 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	2000021c 	.word	0x2000021c
 8001b64:	40013000 	.word	0x40013000

08001b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	4b28      	ldr	r3, [pc, #160]	@ (8001c20 <MX_GPIO_Init+0xb8>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	4a27      	ldr	r2, [pc, #156]	@ (8001c20 <MX_GPIO_Init+0xb8>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	61d3      	str	r3, [r2, #28]
 8001b8a:	4b25      	ldr	r3, [pc, #148]	@ (8001c20 <MX_GPIO_Init+0xb8>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b96:	4b22      	ldr	r3, [pc, #136]	@ (8001c20 <MX_GPIO_Init+0xb8>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	4a21      	ldr	r2, [pc, #132]	@ (8001c20 <MX_GPIO_Init+0xb8>)
 8001b9c:	f043 0304 	orr.w	r3, r3, #4
 8001ba0:	61d3      	str	r3, [r2, #28]
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c20 <MX_GPIO_Init+0xb8>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bae:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <MX_GPIO_Init+0xb8>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8001c20 <MX_GPIO_Init+0xb8>)
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	61d3      	str	r3, [r2, #28]
 8001bba:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <MX_GPIO_Init+0xb8>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2140      	movs	r1, #64	@ 0x40
 8001bca:	4816      	ldr	r0, [pc, #88]	@ (8001c24 <MX_GPIO_Init+0xbc>)
 8001bcc:	f000 fcd8 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bd0:	2380      	movs	r3, #128	@ 0x80
 8001bd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bd4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	4619      	mov	r1, r3
 8001be4:	4810      	ldr	r0, [pc, #64]	@ (8001c28 <MX_GPIO_Init+0xc0>)
 8001be6:	f000 fb3b 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bea:	2340      	movs	r3, #64	@ 0x40
 8001bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4808      	ldr	r0, [pc, #32]	@ (8001c24 <MX_GPIO_Init+0xbc>)
 8001c02:	f000 fb2d 	bl	8002260 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2017      	movs	r0, #23
 8001c0c:	f000 faf1 	bl	80021f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c10:	2017      	movs	r0, #23
 8001c12:	f000 fb0a 	bl	800222a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c16:	bf00      	nop
 8001c18:	3720      	adds	r7, #32
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020400 	.word	0x40020400
 8001c28:	40020800 	.word	0x40020800

08001c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c30:	b672      	cpsid	i
}
 8001c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <Error_Handler+0x8>

08001c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001c3e:	4b14      	ldr	r3, [pc, #80]	@ (8001c90 <HAL_MspInit+0x58>)
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	4a13      	ldr	r2, [pc, #76]	@ (8001c90 <HAL_MspInit+0x58>)
 8001c44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c48:	6253      	str	r3, [r2, #36]	@ 0x24
 8001c4a:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <HAL_MspInit+0x58>)
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <HAL_MspInit+0x58>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001c90 <HAL_MspInit+0x58>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6213      	str	r3, [r2, #32]
 8001c62:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <HAL_MspInit+0x58>)
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <HAL_MspInit+0x58>)
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	4a07      	ldr	r2, [pc, #28]	@ (8001c90 <HAL_MspInit+0x58>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c78:	6253      	str	r3, [r2, #36]	@ 0x24
 8001c7a:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <HAL_MspInit+0x58>)
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	40023800 	.word	0x40023800

08001c94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	@ 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a17      	ldr	r2, [pc, #92]	@ (8001d10 <HAL_SPI_MspInit+0x7c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d127      	bne.n	8001d06 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cb6:	4b17      	ldr	r3, [pc, #92]	@ (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4a16      	ldr	r2, [pc, #88]	@ (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cc0:	6213      	str	r3, [r2, #32]
 8001cc2:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	4a10      	ldr	r2, [pc, #64]	@ (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	61d3      	str	r3, [r2, #28]
 8001cda:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <HAL_SPI_MspInit+0x80>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ce6:	23e0      	movs	r3, #224	@ 0xe0
 8001ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4805      	ldr	r0, [pc, #20]	@ (8001d18 <HAL_SPI_MspInit+0x84>)
 8001d02:	f000 faad 	bl	8002260 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d06:	bf00      	nop
 8001d08:	3728      	adds	r7, #40	@ 0x28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40013000 	.word	0x40013000
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40020000 	.word	0x40020000

08001d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <NMI_Handler+0x4>

08001d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <HardFault_Handler+0x4>

08001d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <MemManage_Handler+0x4>

08001d34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <BusFault_Handler+0x4>

08001d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <UsageFault_Handler+0x4>

08001d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d6c:	f000 f92c 	bl	8001fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001d78:	2080      	movs	r0, #128	@ 0x80
 8001d7a:	f000 fc19 	bl	80025b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  return 1;
 8001d86:	2301      	movs	r3, #1
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <_kill>:

int _kill(int pid, int sig)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d9a:	f002 fe1f 	bl	80049dc <__errno>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2216      	movs	r2, #22
 8001da2:	601a      	str	r2, [r3, #0]
  return -1;
 8001da4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_exit>:

void _exit (int status)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ffe7 	bl	8001d90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dc2:	bf00      	nop
 8001dc4:	e7fd      	b.n	8001dc2 <_exit+0x12>

08001dc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e00a      	b.n	8001dee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dd8:	f3af 8000 	nop.w
 8001ddc:	4601      	mov	r1, r0
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	60ba      	str	r2, [r7, #8]
 8001de4:	b2ca      	uxtb	r2, r1
 8001de6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3301      	adds	r3, #1
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	dbf0      	blt.n	8001dd8 <_read+0x12>
  }

  return len;
 8001df6:	687b      	ldr	r3, [r7, #4]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr

08001e16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e26:	605a      	str	r2, [r3, #4]
  return 0;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <_isatty>:

int _isatty(int file)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e3c:	2301      	movs	r3, #1
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e68:	4a14      	ldr	r2, [pc, #80]	@ (8001ebc <_sbrk+0x5c>)
 8001e6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <_sbrk+0x60>)
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e74:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <_sbrk+0x64>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <_sbrk+0x64>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	@ (8001ec8 <_sbrk+0x68>)
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d207      	bcs.n	8001ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e90:	f002 fda4 	bl	80049dc <__errno>
 8001e94:	4603      	mov	r3, r0
 8001e96:	220c      	movs	r2, #12
 8001e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9e:	e009      	b.n	8001eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	@ (8001ec4 <_sbrk+0x64>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	4a05      	ldr	r2, [pc, #20]	@ (8001ec4 <_sbrk+0x64>)
 8001eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20014000 	.word	0x20014000
 8001ec0:	00000400 	.word	0x00000400
 8001ec4:	20000298 	.word	0x20000298
 8001ec8:	200003f0 	.word	0x200003f0

08001ecc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ed8:	f7ff fff8 	bl	8001ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001edc:	480b      	ldr	r0, [pc, #44]	@ (8001f0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ede:	490c      	ldr	r1, [pc, #48]	@ (8001f10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8001f14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a09      	ldr	r2, [pc, #36]	@ (8001f18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ef4:	4c09      	ldr	r4, [pc, #36]	@ (8001f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f02:	f002 fd71 	bl	80049e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f06:	f7ff fd7b 	bl	8001a00 <main>
  bx lr
 8001f0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f10:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001f14:	08007048 	.word	0x08007048
  ldr r2, =_sbss
 8001f18:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001f1c:	200003ec 	.word	0x200003ec

08001f20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <ADC1_IRQHandler>

08001f22 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	f000 f955 	bl	80021dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f32:	200f      	movs	r0, #15
 8001f34:	f000 f80e 	bl	8001f54 <HAL_InitTick>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	71fb      	strb	r3, [r7, #7]
 8001f42:	e001      	b.n	8001f48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f44:	f7ff fe78 	bl	8001c38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f48:	79fb      	ldrb	r3, [r7, #7]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f60:	4b16      	ldr	r3, [pc, #88]	@ (8001fbc <HAL_InitTick+0x68>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d022      	beq.n	8001fae <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f68:	4b15      	ldr	r3, [pc, #84]	@ (8001fc0 <HAL_InitTick+0x6c>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <HAL_InitTick+0x68>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 f962 	bl	8002246 <HAL_SYSTICK_Config>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10f      	bne.n	8001fa8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b0f      	cmp	r3, #15
 8001f8c:	d809      	bhi.n	8001fa2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	f04f 30ff 	mov.w	r0, #4294967295
 8001f96:	f000 f92c 	bl	80021f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc4 <HAL_InitTick+0x70>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	e007      	b.n	8001fb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
 8001fa6:	e004      	b.n	8001fb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	e001      	b.n	8001fb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000020 	.word	0x20000020
 8001fc0:	20000018 	.word	0x20000018
 8001fc4:	2000001c 	.word	0x2000001c

08001fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fcc:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <HAL_IncTick+0x1c>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <HAL_IncTick+0x20>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4a03      	ldr	r2, [pc, #12]	@ (8001fe4 <HAL_IncTick+0x1c>)
 8001fd8:	6013      	str	r3, [r2, #0]
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	2000029c 	.word	0x2000029c
 8001fe8:	20000020 	.word	0x20000020

08001fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff0:	4b02      	ldr	r3, [pc, #8]	@ (8001ffc <HAL_GetTick+0x10>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	2000029c 	.word	0x2000029c

08002000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff fff0 	bl	8001fec <HAL_GetTick>
 800200c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d004      	beq.n	8002024 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800201a:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <HAL_Delay+0x40>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4413      	add	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002024:	bf00      	nop
 8002026:	f7ff ffe1 	bl	8001fec <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	429a      	cmp	r2, r3
 8002034:	d8f7      	bhi.n	8002026 <HAL_Delay+0x26>
  {
  }
}
 8002036:	bf00      	nop
 8002038:	bf00      	nop
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000020 	.word	0x20000020

08002044 <__NVIC_SetPriorityGrouping>:
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002054:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002060:	4013      	ands	r3, r2
 8002062:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800206c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002076:	4a04      	ldr	r2, [pc, #16]	@ (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	60d3      	str	r3, [r2, #12]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_GetPriorityGrouping>:
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002090:	4b04      	ldr	r3, [pc, #16]	@ (80020a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	f003 0307 	and.w	r3, r3, #7
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <__NVIC_EnableIRQ>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	db0b      	blt.n	80020d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	f003 021f 	and.w	r2, r3, #31
 80020c0:	4906      	ldr	r1, [pc, #24]	@ (80020dc <__NVIC_EnableIRQ+0x34>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	2001      	movs	r0, #1
 80020ca:	fa00 f202 	lsl.w	r2, r0, r2
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	e000e100 	.word	0xe000e100

080020e0 <__NVIC_SetPriority>:
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	6039      	str	r1, [r7, #0]
 80020ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	db0a      	blt.n	800210a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	490c      	ldr	r1, [pc, #48]	@ (800212c <__NVIC_SetPriority+0x4c>)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	0112      	lsls	r2, r2, #4
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	440b      	add	r3, r1
 8002104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002108:	e00a      	b.n	8002120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4908      	ldr	r1, [pc, #32]	@ (8002130 <__NVIC_SetPriority+0x50>)
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	3b04      	subs	r3, #4
 8002118:	0112      	lsls	r2, r2, #4
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	440b      	add	r3, r1
 800211e:	761a      	strb	r2, [r3, #24]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000e100 	.word	0xe000e100
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <NVIC_EncodePriority>:
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	@ 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f1c3 0307 	rsb	r3, r3, #7
 800214e:	2b04      	cmp	r3, #4
 8002150:	bf28      	it	cs
 8002152:	2304      	movcs	r3, #4
 8002154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3304      	adds	r3, #4
 800215a:	2b06      	cmp	r3, #6
 800215c:	d902      	bls.n	8002164 <NVIC_EncodePriority+0x30>
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3b03      	subs	r3, #3
 8002162:	e000      	b.n	8002166 <NVIC_EncodePriority+0x32>
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	f04f 32ff 	mov.w	r2, #4294967295
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43da      	mvns	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	401a      	ands	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800217c:	f04f 31ff 	mov.w	r1, #4294967295
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43d9      	mvns	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	4313      	orrs	r3, r2
}
 800218e:	4618      	mov	r0, r3
 8002190:	3724      	adds	r7, #36	@ 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <SysTick_Config>:
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021a8:	d301      	bcc.n	80021ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00f      	b.n	80021ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ae:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <SysTick_Config+0x40>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b6:	210f      	movs	r1, #15
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	f7ff ff90 	bl	80020e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c0:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <SysTick_Config+0x40>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c6:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <SysTick_Config+0x40>)
 80021c8:	2207      	movs	r2, #7
 80021ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	e000e010 	.word	0xe000e010

080021dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff2d 	bl	8002044 <__NVIC_SetPriorityGrouping>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
 80021fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002204:	f7ff ff42 	bl	800208c <__NVIC_GetPriorityGrouping>
 8002208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	6978      	ldr	r0, [r7, #20]
 8002210:	f7ff ff90 	bl	8002134 <NVIC_EncodePriority>
 8002214:	4602      	mov	r2, r0
 8002216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff5f 	bl	80020e0 <__NVIC_SetPriority>
}
 8002222:	bf00      	nop
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	4603      	mov	r3, r0
 8002232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff35 	bl	80020a8 <__NVIC_EnableIRQ>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ffa2 	bl	8002198 <SysTick_Config>
 8002254:	4603      	mov	r3, r0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002276:	e160      	b.n	800253a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2101      	movs	r1, #1
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	fa01 f303 	lsl.w	r3, r1, r3
 8002284:	4013      	ands	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8152 	beq.w	8002534 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b01      	cmp	r3, #1
 800229a:	d005      	beq.n	80022a8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d130      	bne.n	800230a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80022de:	2201      	movs	r2, #1
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	f003 0201 	and.w	r2, r3, #1
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b03      	cmp	r3, #3
 8002314:	d017      	beq.n	8002346 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	2203      	movs	r2, #3
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d123      	bne.n	800239a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	08da      	lsrs	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3208      	adds	r2, #8
 800235a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	220f      	movs	r2, #15
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	08da      	lsrs	r2, r3, #3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3208      	adds	r2, #8
 8002394:	6939      	ldr	r1, [r7, #16]
 8002396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	2203      	movs	r2, #3
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 0203 	and.w	r2, r3, #3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80ac 	beq.w	8002534 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002558 <HAL_GPIO_Init+0x2f8>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	4a5d      	ldr	r2, [pc, #372]	@ (8002558 <HAL_GPIO_Init+0x2f8>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6213      	str	r3, [r2, #32]
 80023e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002558 <HAL_GPIO_Init+0x2f8>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80023f4:	4a59      	ldr	r2, [pc, #356]	@ (800255c <HAL_GPIO_Init+0x2fc>)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002400:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a51      	ldr	r2, [pc, #324]	@ (8002560 <HAL_GPIO_Init+0x300>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d025      	beq.n	800246c <HAL_GPIO_Init+0x20c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a50      	ldr	r2, [pc, #320]	@ (8002564 <HAL_GPIO_Init+0x304>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d01f      	beq.n	8002468 <HAL_GPIO_Init+0x208>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a4f      	ldr	r2, [pc, #316]	@ (8002568 <HAL_GPIO_Init+0x308>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d019      	beq.n	8002464 <HAL_GPIO_Init+0x204>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a4e      	ldr	r2, [pc, #312]	@ (800256c <HAL_GPIO_Init+0x30c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d013      	beq.n	8002460 <HAL_GPIO_Init+0x200>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a4d      	ldr	r2, [pc, #308]	@ (8002570 <HAL_GPIO_Init+0x310>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d00d      	beq.n	800245c <HAL_GPIO_Init+0x1fc>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a4c      	ldr	r2, [pc, #304]	@ (8002574 <HAL_GPIO_Init+0x314>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d007      	beq.n	8002458 <HAL_GPIO_Init+0x1f8>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a4b      	ldr	r2, [pc, #300]	@ (8002578 <HAL_GPIO_Init+0x318>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d101      	bne.n	8002454 <HAL_GPIO_Init+0x1f4>
 8002450:	2306      	movs	r3, #6
 8002452:	e00c      	b.n	800246e <HAL_GPIO_Init+0x20e>
 8002454:	2307      	movs	r3, #7
 8002456:	e00a      	b.n	800246e <HAL_GPIO_Init+0x20e>
 8002458:	2305      	movs	r3, #5
 800245a:	e008      	b.n	800246e <HAL_GPIO_Init+0x20e>
 800245c:	2304      	movs	r3, #4
 800245e:	e006      	b.n	800246e <HAL_GPIO_Init+0x20e>
 8002460:	2303      	movs	r3, #3
 8002462:	e004      	b.n	800246e <HAL_GPIO_Init+0x20e>
 8002464:	2302      	movs	r3, #2
 8002466:	e002      	b.n	800246e <HAL_GPIO_Init+0x20e>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <HAL_GPIO_Init+0x20e>
 800246c:	2300      	movs	r3, #0
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	f002 0203 	and.w	r2, r2, #3
 8002474:	0092      	lsls	r2, r2, #2
 8002476:	4093      	lsls	r3, r2
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800247e:	4937      	ldr	r1, [pc, #220]	@ (800255c <HAL_GPIO_Init+0x2fc>)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	3302      	adds	r3, #2
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248c:	4b3b      	ldr	r3, [pc, #236]	@ (800257c <HAL_GPIO_Init+0x31c>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	43db      	mvns	r3, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024b0:	4a32      	ldr	r2, [pc, #200]	@ (800257c <HAL_GPIO_Init+0x31c>)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b6:	4b31      	ldr	r3, [pc, #196]	@ (800257c <HAL_GPIO_Init+0x31c>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024da:	4a28      	ldr	r2, [pc, #160]	@ (800257c <HAL_GPIO_Init+0x31c>)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024e0:	4b26      	ldr	r3, [pc, #152]	@ (800257c <HAL_GPIO_Init+0x31c>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002504:	4a1d      	ldr	r2, [pc, #116]	@ (800257c <HAL_GPIO_Init+0x31c>)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800250a:	4b1c      	ldr	r3, [pc, #112]	@ (800257c <HAL_GPIO_Init+0x31c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	43db      	mvns	r3, r3
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800252e:	4a13      	ldr	r2, [pc, #76]	@ (800257c <HAL_GPIO_Init+0x31c>)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	3301      	adds	r3, #1
 8002538:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	f47f ae97 	bne.w	8002278 <HAL_GPIO_Init+0x18>
  }
}
 800254a:	bf00      	nop
 800254c:	bf00      	nop
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
 800255c:	40010000 	.word	0x40010000
 8002560:	40020000 	.word	0x40020000
 8002564:	40020400 	.word	0x40020400
 8002568:	40020800 	.word	0x40020800
 800256c:	40020c00 	.word	0x40020c00
 8002570:	40021000 	.word	0x40021000
 8002574:	40021400 	.word	0x40021400
 8002578:	40021800 	.word	0x40021800
 800257c:	40010400 	.word	0x40010400

08002580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	807b      	strh	r3, [r7, #2]
 800258c:	4613      	mov	r3, r2
 800258e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002590:	787b      	ldrb	r3, [r7, #1]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800259c:	e003      	b.n	80025a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	041a      	lsls	r2, r3, #16
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	619a      	str	r2, [r3, #24]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025ba:	4b08      	ldr	r3, [pc, #32]	@ (80025dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d006      	beq.n	80025d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025c6:	4a05      	ldr	r2, [pc, #20]	@ (80025dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe ff0c 	bl	80013ec <HAL_GPIO_EXTI_Callback>
  }
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40010400 	.word	0x40010400

080025e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e31d      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025f2:	4b94      	ldr	r3, [pc, #592]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025fc:	4b91      	ldr	r3, [pc, #580]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002604:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d07b      	beq.n	800270a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	2b08      	cmp	r3, #8
 8002616:	d006      	beq.n	8002626 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2b0c      	cmp	r3, #12
 800261c:	d10f      	bne.n	800263e <HAL_RCC_OscConfig+0x5e>
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002624:	d10b      	bne.n	800263e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002626:	4b87      	ldr	r3, [pc, #540]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d06a      	beq.n	8002708 <HAL_RCC_OscConfig+0x128>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d166      	bne.n	8002708 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e2f7      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d106      	bne.n	8002654 <HAL_RCC_OscConfig+0x74>
 8002646:	4b7f      	ldr	r3, [pc, #508]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a7e      	ldr	r2, [pc, #504]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 800264c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	e02d      	b.n	80026b0 <HAL_RCC_OscConfig+0xd0>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10c      	bne.n	8002676 <HAL_RCC_OscConfig+0x96>
 800265c:	4b79      	ldr	r3, [pc, #484]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a78      	ldr	r2, [pc, #480]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b76      	ldr	r3, [pc, #472]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a75      	ldr	r2, [pc, #468]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	e01c      	b.n	80026b0 <HAL_RCC_OscConfig+0xd0>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b05      	cmp	r3, #5
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0xb8>
 800267e:	4b71      	ldr	r3, [pc, #452]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a70      	ldr	r2, [pc, #448]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 8002684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b6e      	ldr	r3, [pc, #440]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6d      	ldr	r2, [pc, #436]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0xd0>
 8002698:	4b6a      	ldr	r3, [pc, #424]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a69      	ldr	r2, [pc, #420]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 800269e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b67      	ldr	r3, [pc, #412]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a66      	ldr	r2, [pc, #408]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 80026aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d013      	beq.n	80026e0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7ff fc98 	bl	8001fec <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c0:	f7ff fc94 	bl	8001fec <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	@ 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e2ad      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0xe0>
 80026de:	e014      	b.n	800270a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7ff fc84 	bl	8001fec <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e8:	f7ff fc80 	bl	8001fec <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	@ 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e299      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026fa:	4b52      	ldr	r3, [pc, #328]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x108>
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d05a      	beq.n	80027cc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	2b04      	cmp	r3, #4
 800271a:	d005      	beq.n	8002728 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	2b0c      	cmp	r3, #12
 8002720:	d119      	bne.n	8002756 <HAL_RCC_OscConfig+0x176>
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d116      	bne.n	8002756 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002728:	4b46      	ldr	r3, [pc, #280]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_OscConfig+0x160>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d001      	beq.n	8002740 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e276      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002740:	4b40      	ldr	r3, [pc, #256]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	021b      	lsls	r3, r3, #8
 800274e:	493d      	ldr	r1, [pc, #244]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002754:	e03a      	b.n	80027cc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d020      	beq.n	80027a0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800275e:	4b3a      	ldr	r3, [pc, #232]	@ (8002848 <HAL_RCC_OscConfig+0x268>)
 8002760:	2201      	movs	r2, #1
 8002762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7ff fc42 	bl	8001fec <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276c:	f7ff fc3e 	bl	8001fec <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e257      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800277e:	4b31      	ldr	r3, [pc, #196]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278a:	4b2e      	ldr	r3, [pc, #184]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	492a      	ldr	r1, [pc, #168]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 800279a:	4313      	orrs	r3, r2
 800279c:	604b      	str	r3, [r1, #4]
 800279e:	e015      	b.n	80027cc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a0:	4b29      	ldr	r3, [pc, #164]	@ (8002848 <HAL_RCC_OscConfig+0x268>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f7ff fc21 	bl	8001fec <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ae:	f7ff fc1d 	bl	8001fec <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e236      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027c0:	4b20      	ldr	r3, [pc, #128]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f0      	bne.n	80027ae <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80b8 	beq.w	800294a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d170      	bne.n	80028c2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027e0:	4b18      	ldr	r3, [pc, #96]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_OscConfig+0x218>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e21a      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1a      	ldr	r2, [r3, #32]
 80027fc:	4b11      	ldr	r3, [pc, #68]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8002804:	429a      	cmp	r2, r3
 8002806:	d921      	bls.n	800284c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	4618      	mov	r0, r3
 800280e:	f000 fc09 	bl	8003024 <RCC_SetFlashLatencyFromMSIRange>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e208      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800281c:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4906      	ldr	r1, [pc, #24]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 800282a:	4313      	orrs	r3, r2
 800282c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800282e:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	061b      	lsls	r3, r3, #24
 800283c:	4901      	ldr	r1, [pc, #4]	@ (8002844 <HAL_RCC_OscConfig+0x264>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]
 8002842:	e020      	b.n	8002886 <HAL_RCC_OscConfig+0x2a6>
 8002844:	40023800 	.word	0x40023800
 8002848:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800284c:	4b99      	ldr	r3, [pc, #612]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4996      	ldr	r1, [pc, #600]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800285e:	4b95      	ldr	r3, [pc, #596]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	061b      	lsls	r3, r3, #24
 800286c:	4991      	ldr	r1, [pc, #580]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 800286e:	4313      	orrs	r3, r2
 8002870:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fbd4 	bl	8003024 <RCC_SetFlashLatencyFromMSIRange>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e1d3      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	0b5b      	lsrs	r3, r3, #13
 800288c:	3301      	adds	r3, #1
 800288e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002896:	4a87      	ldr	r2, [pc, #540]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002898:	6892      	ldr	r2, [r2, #8]
 800289a:	0912      	lsrs	r2, r2, #4
 800289c:	f002 020f 	and.w	r2, r2, #15
 80028a0:	4985      	ldr	r1, [pc, #532]	@ (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 80028a2:	5c8a      	ldrb	r2, [r1, r2]
 80028a4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028a6:	4a85      	ldr	r2, [pc, #532]	@ (8002abc <HAL_RCC_OscConfig+0x4dc>)
 80028a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028aa:	4b85      	ldr	r3, [pc, #532]	@ (8002ac0 <HAL_RCC_OscConfig+0x4e0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fb50 	bl	8001f54 <HAL_InitTick>
 80028b4:	4603      	mov	r3, r0
 80028b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d045      	beq.n	800294a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	e1b5      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d029      	beq.n	800291e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028ca:	4b7e      	ldr	r3, [pc, #504]	@ (8002ac4 <HAL_RCC_OscConfig+0x4e4>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7ff fb8c 	bl	8001fec <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028d8:	f7ff fb88 	bl	8001fec <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e1a1      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028ea:	4b72      	ldr	r3, [pc, #456]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028f6:	4b6f      	ldr	r3, [pc, #444]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	496c      	ldr	r1, [pc, #432]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002908:	4b6a      	ldr	r3, [pc, #424]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	061b      	lsls	r3, r3, #24
 8002916:	4967      	ldr	r1, [pc, #412]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002918:	4313      	orrs	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
 800291c:	e015      	b.n	800294a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800291e:	4b69      	ldr	r3, [pc, #420]	@ (8002ac4 <HAL_RCC_OscConfig+0x4e4>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7ff fb62 	bl	8001fec <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800292c:	f7ff fb5e 	bl	8001fec <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e177      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800293e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d030      	beq.n	80029b8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d016      	beq.n	800298c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ac8 <HAL_RCC_OscConfig+0x4e8>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002964:	f7ff fb42 	bl	8001fec <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296c:	f7ff fb3e 	bl	8001fec <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e157      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800297e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x38c>
 800298a:	e015      	b.n	80029b8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298c:	4b4e      	ldr	r3, [pc, #312]	@ (8002ac8 <HAL_RCC_OscConfig+0x4e8>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002992:	f7ff fb2b 	bl	8001fec <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800299a:	f7ff fb27 	bl	8001fec <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e140      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029ac:	4b41      	ldr	r3, [pc, #260]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 80029ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f0      	bne.n	800299a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80b5 	beq.w	8002b30 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c6:	2300      	movs	r3, #0
 80029c8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ca:	4b3a      	ldr	r3, [pc, #232]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10d      	bne.n	80029f2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	4b37      	ldr	r3, [pc, #220]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 80029d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029da:	4a36      	ldr	r2, [pc, #216]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 80029dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e0:	6253      	str	r3, [r2, #36]	@ 0x24
 80029e2:	4b34      	ldr	r3, [pc, #208]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 80029e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ee:	2301      	movs	r3, #1
 80029f0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f2:	4b36      	ldr	r3, [pc, #216]	@ (8002acc <HAL_RCC_OscConfig+0x4ec>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d118      	bne.n	8002a30 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fe:	4b33      	ldr	r3, [pc, #204]	@ (8002acc <HAL_RCC_OscConfig+0x4ec>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a32      	ldr	r2, [pc, #200]	@ (8002acc <HAL_RCC_OscConfig+0x4ec>)
 8002a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0a:	f7ff faef 	bl	8001fec <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a12:	f7ff faeb 	bl	8001fec <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b64      	cmp	r3, #100	@ 0x64
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e104      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	4b29      	ldr	r3, [pc, #164]	@ (8002acc <HAL_RCC_OscConfig+0x4ec>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d106      	bne.n	8002a46 <HAL_RCC_OscConfig+0x466>
 8002a38:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a42:	6353      	str	r3, [r2, #52]	@ 0x34
 8002a44:	e02d      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4c2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x488>
 8002a4e:	4b19      	ldr	r3, [pc, #100]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a52:	4a18      	ldr	r2, [pc, #96]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a58:	6353      	str	r3, [r2, #52]	@ 0x34
 8002a5a:	4b16      	ldr	r3, [pc, #88]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a5e:	4a15      	ldr	r2, [pc, #84]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002a60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a64:	6353      	str	r3, [r2, #52]	@ 0x34
 8002a66:	e01c      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4c2>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b05      	cmp	r3, #5
 8002a6e:	d10c      	bne.n	8002a8a <HAL_RCC_OscConfig+0x4aa>
 8002a70:	4b10      	ldr	r3, [pc, #64]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a74:	4a0f      	ldr	r2, [pc, #60]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002a76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a7a:	6353      	str	r3, [r2, #52]	@ 0x34
 8002a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a80:	4a0c      	ldr	r2, [pc, #48]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002a82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a86:	6353      	str	r3, [r2, #52]	@ 0x34
 8002a88:	e00b      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4c2>
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8e:	4a09      	ldr	r2, [pc, #36]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002a90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a94:	6353      	str	r3, [r2, #52]	@ 0x34
 8002a96:	4b07      	ldr	r3, [pc, #28]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9a:	4a06      	ldr	r2, [pc, #24]	@ (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 8002a9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002aa0:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d024      	beq.n	8002af4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aaa:	f7ff fa9f 	bl	8001fec <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ab0:	e019      	b.n	8002ae6 <HAL_RCC_OscConfig+0x506>
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	08006c74 	.word	0x08006c74
 8002abc:	20000018 	.word	0x20000018
 8002ac0:	2000001c 	.word	0x2000001c
 8002ac4:	42470020 	.word	0x42470020
 8002ac8:	42470680 	.word	0x42470680
 8002acc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad0:	f7ff fa8c 	bl	8001fec <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e0a3      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ae6:	4b54      	ldr	r3, [pc, #336]	@ (8002c38 <HAL_RCC_OscConfig+0x658>)
 8002ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0ee      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x4f0>
 8002af2:	e014      	b.n	8002b1e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af4:	f7ff fa7a 	bl	8001fec <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002afa:	e00a      	b.n	8002b12 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afc:	f7ff fa76 	bl	8001fec <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e08d      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b12:	4b49      	ldr	r3, [pc, #292]	@ (8002c38 <HAL_RCC_OscConfig+0x658>)
 8002b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1ee      	bne.n	8002afc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b1e:	7ffb      	ldrb	r3, [r7, #31]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d105      	bne.n	8002b30 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b24:	4b44      	ldr	r3, [pc, #272]	@ (8002c38 <HAL_RCC_OscConfig+0x658>)
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	4a43      	ldr	r2, [pc, #268]	@ (8002c38 <HAL_RCC_OscConfig+0x658>)
 8002b2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b2e:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d079      	beq.n	8002c2c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2b0c      	cmp	r3, #12
 8002b3c:	d056      	beq.n	8002bec <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d13b      	bne.n	8002bbe <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b46:	4b3d      	ldr	r3, [pc, #244]	@ (8002c3c <HAL_RCC_OscConfig+0x65c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7ff fa4e 	bl	8001fec <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b54:	f7ff fa4a 	bl	8001fec <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e063      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b66:	4b34      	ldr	r3, [pc, #208]	@ (8002c38 <HAL_RCC_OscConfig+0x658>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b72:	4b31      	ldr	r3, [pc, #196]	@ (8002c38 <HAL_RCC_OscConfig+0x658>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b82:	4319      	orrs	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	492b      	ldr	r1, [pc, #172]	@ (8002c38 <HAL_RCC_OscConfig+0x658>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b90:	4b2a      	ldr	r3, [pc, #168]	@ (8002c3c <HAL_RCC_OscConfig+0x65c>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b96:	f7ff fa29 	bl	8001fec <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9e:	f7ff fa25 	bl	8001fec <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e03e      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bb0:	4b21      	ldr	r3, [pc, #132]	@ (8002c38 <HAL_RCC_OscConfig+0x658>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0x5be>
 8002bbc:	e036      	b.n	8002c2c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8002c3c <HAL_RCC_OscConfig+0x65c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7ff fa12 	bl	8001fec <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7ff fa0e 	bl	8001fec <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e027      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bde:	4b16      	ldr	r3, [pc, #88]	@ (8002c38 <HAL_RCC_OscConfig+0x658>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x5ec>
 8002bea:	e01f      	b.n	8002c2c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e01a      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c38 <HAL_RCC_OscConfig+0x658>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d10d      	bne.n	8002c28 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d106      	bne.n	8002c28 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3720      	adds	r7, #32
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	42470060 	.word	0x42470060

08002c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e11a      	b.n	8002e8a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c54:	4b8f      	ldr	r3, [pc, #572]	@ (8002e94 <HAL_RCC_ClockConfig+0x254>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d919      	bls.n	8002c96 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d105      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x34>
 8002c68:	4b8a      	ldr	r3, [pc, #552]	@ (8002e94 <HAL_RCC_ClockConfig+0x254>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a89      	ldr	r2, [pc, #548]	@ (8002e94 <HAL_RCC_ClockConfig+0x254>)
 8002c6e:	f043 0304 	orr.w	r3, r3, #4
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b87      	ldr	r3, [pc, #540]	@ (8002e94 <HAL_RCC_ClockConfig+0x254>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f023 0201 	bic.w	r2, r3, #1
 8002c7c:	4985      	ldr	r1, [pc, #532]	@ (8002e94 <HAL_RCC_ClockConfig+0x254>)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c84:	4b83      	ldr	r3, [pc, #524]	@ (8002e94 <HAL_RCC_ClockConfig+0x254>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d001      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e0f9      	b.n	8002e8a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d008      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca2:	4b7d      	ldr	r3, [pc, #500]	@ (8002e98 <HAL_RCC_ClockConfig+0x258>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	497a      	ldr	r1, [pc, #488]	@ (8002e98 <HAL_RCC_ClockConfig+0x258>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 808e 	beq.w	8002dde <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d107      	bne.n	8002cda <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cca:	4b73      	ldr	r3, [pc, #460]	@ (8002e98 <HAL_RCC_ClockConfig+0x258>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d121      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e0d7      	b.n	8002e8a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ce2:	4b6d      	ldr	r3, [pc, #436]	@ (8002e98 <HAL_RCC_ClockConfig+0x258>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d115      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e0cb      	b.n	8002e8a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cfa:	4b67      	ldr	r3, [pc, #412]	@ (8002e98 <HAL_RCC_ClockConfig+0x258>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e0bf      	b.n	8002e8a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d0a:	4b63      	ldr	r3, [pc, #396]	@ (8002e98 <HAL_RCC_ClockConfig+0x258>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e0b7      	b.n	8002e8a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002e98 <HAL_RCC_ClockConfig+0x258>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f023 0203 	bic.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	495c      	ldr	r1, [pc, #368]	@ (8002e98 <HAL_RCC_ClockConfig+0x258>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d2c:	f7ff f95e 	bl	8001fec <HAL_GetTick>
 8002d30:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d112      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d3a:	e00a      	b.n	8002d52 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3c:	f7ff f956 	bl	8001fec <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e09b      	b.n	8002e8a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d52:	4b51      	ldr	r3, [pc, #324]	@ (8002e98 <HAL_RCC_ClockConfig+0x258>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d1ee      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xfc>
 8002d5e:	e03e      	b.n	8002dde <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d112      	bne.n	8002d8e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6a:	f7ff f93f 	bl	8001fec <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e084      	b.n	8002e8a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d80:	4b45      	ldr	r3, [pc, #276]	@ (8002e98 <HAL_RCC_ClockConfig+0x258>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 030c 	and.w	r3, r3, #12
 8002d88:	2b0c      	cmp	r3, #12
 8002d8a:	d1ee      	bne.n	8002d6a <HAL_RCC_ClockConfig+0x12a>
 8002d8c:	e027      	b.n	8002dde <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d11d      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d96:	e00a      	b.n	8002dae <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d98:	f7ff f928 	bl	8001fec <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e06d      	b.n	8002e8a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dae:	4b3a      	ldr	r3, [pc, #232]	@ (8002e98 <HAL_RCC_ClockConfig+0x258>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d1ee      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x158>
 8002dba:	e010      	b.n	8002dde <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dbc:	f7ff f916 	bl	8001fec <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e05b      	b.n	8002e8a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002dd2:	4b31      	ldr	r3, [pc, #196]	@ (8002e98 <HAL_RCC_ClockConfig+0x258>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1ee      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dde:	4b2d      	ldr	r3, [pc, #180]	@ (8002e94 <HAL_RCC_ClockConfig+0x254>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d219      	bcs.n	8002e20 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d105      	bne.n	8002dfe <HAL_RCC_ClockConfig+0x1be>
 8002df2:	4b28      	ldr	r3, [pc, #160]	@ (8002e94 <HAL_RCC_ClockConfig+0x254>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a27      	ldr	r2, [pc, #156]	@ (8002e94 <HAL_RCC_ClockConfig+0x254>)
 8002df8:	f043 0304 	orr.w	r3, r3, #4
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	4b25      	ldr	r3, [pc, #148]	@ (8002e94 <HAL_RCC_ClockConfig+0x254>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 0201 	bic.w	r2, r3, #1
 8002e06:	4923      	ldr	r1, [pc, #140]	@ (8002e94 <HAL_RCC_ClockConfig+0x254>)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b21      	ldr	r3, [pc, #132]	@ (8002e94 <HAL_RCC_ClockConfig+0x254>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e034      	b.n	8002e8a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002e98 <HAL_RCC_ClockConfig+0x258>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4917      	ldr	r1, [pc, #92]	@ (8002e98 <HAL_RCC_ClockConfig+0x258>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d009      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e4a:	4b13      	ldr	r3, [pc, #76]	@ (8002e98 <HAL_RCC_ClockConfig+0x258>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	490f      	ldr	r1, [pc, #60]	@ (8002e98 <HAL_RCC_ClockConfig+0x258>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e5e:	f000 f823 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 8002e62:	4602      	mov	r2, r0
 8002e64:	4b0c      	ldr	r3, [pc, #48]	@ (8002e98 <HAL_RCC_ClockConfig+0x258>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	490b      	ldr	r1, [pc, #44]	@ (8002e9c <HAL_RCC_ClockConfig+0x25c>)
 8002e70:	5ccb      	ldrb	r3, [r1, r3]
 8002e72:	fa22 f303 	lsr.w	r3, r2, r3
 8002e76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea0 <HAL_RCC_ClockConfig+0x260>)
 8002e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <HAL_RCC_ClockConfig+0x264>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff f868 	bl	8001f54 <HAL_InitTick>
 8002e84:	4603      	mov	r3, r0
 8002e86:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e88:	7afb      	ldrb	r3, [r7, #11]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023c00 	.word	0x40023c00
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	08006c74 	.word	0x08006c74
 8002ea0:	20000018 	.word	0x20000018
 8002ea4:	2000001c 	.word	0x2000001c

08002ea8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eac:	b08e      	sub	sp, #56	@ 0x38
 8002eae:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002eb0:	4b58      	ldr	r3, [pc, #352]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b0c      	cmp	r3, #12
 8002ebe:	d00d      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x34>
 8002ec0:	2b0c      	cmp	r3, #12
 8002ec2:	f200 8092 	bhi.w	8002fea <HAL_RCC_GetSysClockFreq+0x142>
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d002      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x28>
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d003      	beq.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x2e>
 8002ece:	e08c      	b.n	8002fea <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ed0:	4b51      	ldr	r3, [pc, #324]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x170>)
 8002ed2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002ed4:	e097      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ed6:	4b51      	ldr	r3, [pc, #324]	@ (800301c <HAL_RCC_GetSysClockFreq+0x174>)
 8002ed8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002eda:	e094      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ede:	0c9b      	lsrs	r3, r3, #18
 8002ee0:	f003 020f 	and.w	r2, r3, #15
 8002ee4:	4b4e      	ldr	r3, [pc, #312]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x178>)
 8002ee6:	5c9b      	ldrb	r3, [r3, r2]
 8002ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eec:	0d9b      	lsrs	r3, r3, #22
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef6:	4b47      	ldr	r3, [pc, #284]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d021      	beq.n	8002f46 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f04:	2200      	movs	r2, #0
 8002f06:	61bb      	str	r3, [r7, #24]
 8002f08:	61fa      	str	r2, [r7, #28]
 8002f0a:	4b44      	ldr	r3, [pc, #272]	@ (800301c <HAL_RCC_GetSysClockFreq+0x174>)
 8002f0c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002f10:	464a      	mov	r2, r9
 8002f12:	fb03 f202 	mul.w	r2, r3, r2
 8002f16:	2300      	movs	r3, #0
 8002f18:	4644      	mov	r4, r8
 8002f1a:	fb04 f303 	mul.w	r3, r4, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	4a3e      	ldr	r2, [pc, #248]	@ (800301c <HAL_RCC_GetSysClockFreq+0x174>)
 8002f22:	4644      	mov	r4, r8
 8002f24:	fba4 0102 	umull	r0, r1, r4, r2
 8002f28:	440b      	add	r3, r1
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2e:	2200      	movs	r2, #0
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	617a      	str	r2, [r7, #20]
 8002f34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f38:	f7fe f846 	bl	8000fc8 <__aeabi_uldivmod>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4613      	mov	r3, r2
 8002f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f44:	e04e      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f48:	2200      	movs	r2, #0
 8002f4a:	469a      	mov	sl, r3
 8002f4c:	4693      	mov	fp, r2
 8002f4e:	4652      	mov	r2, sl
 8002f50:	465b      	mov	r3, fp
 8002f52:	f04f 0000 	mov.w	r0, #0
 8002f56:	f04f 0100 	mov.w	r1, #0
 8002f5a:	0159      	lsls	r1, r3, #5
 8002f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f60:	0150      	lsls	r0, r2, #5
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	ebb2 080a 	subs.w	r8, r2, sl
 8002f6a:	eb63 090b 	sbc.w	r9, r3, fp
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f82:	ebb2 0408 	subs.w	r4, r2, r8
 8002f86:	eb63 0509 	sbc.w	r5, r3, r9
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	00eb      	lsls	r3, r5, #3
 8002f94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f98:	00e2      	lsls	r2, r4, #3
 8002f9a:	4614      	mov	r4, r2
 8002f9c:	461d      	mov	r5, r3
 8002f9e:	eb14 030a 	adds.w	r3, r4, sl
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	eb45 030b 	adc.w	r3, r5, fp
 8002fa8:	607b      	str	r3, [r7, #4]
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fb6:	4629      	mov	r1, r5
 8002fb8:	028b      	lsls	r3, r1, #10
 8002fba:	4620      	mov	r0, r4
 8002fbc:	4629      	mov	r1, r5
 8002fbe:	4604      	mov	r4, r0
 8002fc0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002fc4:	4601      	mov	r1, r0
 8002fc6:	028a      	lsls	r2, r1, #10
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4619      	mov	r1, r3
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	2200      	movs	r2, #0
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	60fa      	str	r2, [r7, #12]
 8002fd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fd8:	f7fd fff6 	bl	8000fc8 <__aeabi_uldivmod>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002fe8:	e00d      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002fea:	4b0a      	ldr	r3, [pc, #40]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	0b5b      	lsrs	r3, r3, #13
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003008:	4618      	mov	r0, r3
 800300a:	3738      	adds	r7, #56	@ 0x38
 800300c:	46bd      	mov	sp, r7
 800300e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800
 8003018:	00f42400 	.word	0x00f42400
 800301c:	016e3600 	.word	0x016e3600
 8003020:	08006c68 	.word	0x08006c68

08003024 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800302c:	2300      	movs	r3, #0
 800302e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003030:	4b29      	ldr	r3, [pc, #164]	@ (80030d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d12c      	bne.n	8003096 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800303c:	4b26      	ldr	r3, [pc, #152]	@ (80030d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003048:	4b24      	ldr	r3, [pc, #144]	@ (80030dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	e016      	b.n	8003082 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003054:	4b20      	ldr	r3, [pc, #128]	@ (80030d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	4a1f      	ldr	r2, [pc, #124]	@ (80030d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800305a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800305e:	6253      	str	r3, [r2, #36]	@ 0x24
 8003060:	4b1d      	ldr	r3, [pc, #116]	@ (80030d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800306c:	4b1b      	ldr	r3, [pc, #108]	@ (80030dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8003074:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003076:	4b18      	ldr	r3, [pc, #96]	@ (80030d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307a:	4a17      	ldr	r2, [pc, #92]	@ (80030d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800307c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003080:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8003088:	d105      	bne.n	8003096 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003090:	d101      	bne.n	8003096 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003092:	2301      	movs	r3, #1
 8003094:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d105      	bne.n	80030a8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800309c:	4b10      	ldr	r3, [pc, #64]	@ (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a0f      	ldr	r2, [pc, #60]	@ (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030a2:	f043 0304 	orr.w	r3, r3, #4
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	4b0d      	ldr	r3, [pc, #52]	@ (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f023 0201 	bic.w	r2, r3, #1
 80030b0:	490b      	ldr	r1, [pc, #44]	@ (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030b8:	4b09      	ldr	r3, [pc, #36]	@ (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d001      	beq.n	80030ca <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	371c      	adds	r7, #28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40007000 	.word	0x40007000
 80030e0:	40023c00 	.word	0x40023c00

080030e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e07b      	b.n	80031ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d108      	bne.n	8003110 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003106:	d009      	beq.n	800311c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	61da      	str	r2, [r3, #28]
 800310e:	e005      	b.n	800311c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fe fdac 	bl	8001c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003152:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a0:	ea42 0103 	orr.w	r1, r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	f003 0104 	and.w	r1, r3, #4
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	f003 0210 	and.w	r2, r3, #16
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69da      	ldr	r2, [r3, #28]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b088      	sub	sp, #32
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	603b      	str	r3, [r7, #0]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_SPI_Transmit+0x22>
 8003214:	2302      	movs	r3, #2
 8003216:	e12d      	b.n	8003474 <HAL_SPI_Transmit+0x27e>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003220:	f7fe fee4 	bl	8001fec <HAL_GetTick>
 8003224:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003226:	88fb      	ldrh	r3, [r7, #6]
 8003228:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d002      	beq.n	800323c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003236:	2302      	movs	r3, #2
 8003238:	77fb      	strb	r3, [r7, #31]
    goto error;
 800323a:	e116      	b.n	800346a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_SPI_Transmit+0x52>
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d102      	bne.n	800324e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800324c:	e10d      	b.n	800346a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2203      	movs	r2, #3
 8003252:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	88fa      	ldrh	r2, [r7, #6]
 8003266:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	88fa      	ldrh	r2, [r7, #6]
 800326c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003294:	d10f      	bne.n	80032b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c0:	2b40      	cmp	r3, #64	@ 0x40
 80032c2:	d007      	beq.n	80032d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032dc:	d14f      	bne.n	800337e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <HAL_SPI_Transmit+0xf6>
 80032e6:	8afb      	ldrh	r3, [r7, #22]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d142      	bne.n	8003372 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	881a      	ldrh	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	1c9a      	adds	r2, r3, #2
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003310:	e02f      	b.n	8003372 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b02      	cmp	r3, #2
 800331e:	d112      	bne.n	8003346 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003324:	881a      	ldrh	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003330:	1c9a      	adds	r2, r3, #2
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800333a:	b29b      	uxth	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003344:	e015      	b.n	8003372 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003346:	f7fe fe51 	bl	8001fec <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d803      	bhi.n	800335e <HAL_SPI_Transmit+0x168>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d102      	bne.n	8003364 <HAL_SPI_Transmit+0x16e>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d106      	bne.n	8003372 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003370:	e07b      	b.n	800346a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1ca      	bne.n	8003312 <HAL_SPI_Transmit+0x11c>
 800337c:	e050      	b.n	8003420 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_SPI_Transmit+0x196>
 8003386:	8afb      	ldrh	r3, [r7, #22]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d144      	bne.n	8003416 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	330c      	adds	r3, #12
 8003396:	7812      	ldrb	r2, [r2, #0]
 8003398:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033b2:	e030      	b.n	8003416 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d113      	bne.n	80033ea <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	330c      	adds	r3, #12
 80033cc:	7812      	ldrb	r2, [r2, #0]
 80033ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033de:	b29b      	uxth	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80033e8:	e015      	b.n	8003416 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ea:	f7fe fdff 	bl	8001fec <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d803      	bhi.n	8003402 <HAL_SPI_Transmit+0x20c>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003400:	d102      	bne.n	8003408 <HAL_SPI_Transmit+0x212>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d106      	bne.n	8003416 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003414:	e029      	b.n	800346a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1c9      	bne.n	80033b4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	6839      	ldr	r1, [r7, #0]
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 fbdf 	bl	8003be8 <SPI_EndRxTxTransaction>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	e003      	b.n	800346a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003472:	7ffb      	ldrb	r3, [r7, #31]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3720      	adds	r7, #32
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	4613      	mov	r3, r2
 800348a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b01      	cmp	r3, #1
 800349a:	d002      	beq.n	80034a2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800349c:	2302      	movs	r3, #2
 800349e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034a0:	e0fb      	b.n	800369a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034aa:	d112      	bne.n	80034d2 <HAL_SPI_Receive+0x56>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10e      	bne.n	80034d2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2204      	movs	r2, #4
 80034b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034bc:	88fa      	ldrh	r2, [r7, #6]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	4613      	mov	r3, r2
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f8ef 	bl	80036ac <HAL_SPI_TransmitReceive>
 80034ce:	4603      	mov	r3, r0
 80034d0:	e0e8      	b.n	80036a4 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_SPI_Receive+0x64>
 80034dc:	2302      	movs	r3, #2
 80034de:	e0e1      	b.n	80036a4 <HAL_SPI_Receive+0x228>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034e8:	f7fe fd80 	bl	8001fec <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_SPI_Receive+0x7e>
 80034f4:	88fb      	ldrh	r3, [r7, #6]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d102      	bne.n	8003500 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034fe:	e0cc      	b.n	800369a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2204      	movs	r2, #4
 8003504:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	88fa      	ldrh	r2, [r7, #6]
 8003518:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	88fa      	ldrh	r2, [r7, #6]
 800351e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003546:	d10f      	bne.n	8003568 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003556:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003566:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003572:	2b40      	cmp	r3, #64	@ 0x40
 8003574:	d007      	beq.n	8003586 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003584:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d16a      	bne.n	8003664 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800358e:	e032      	b.n	80035f6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d115      	bne.n	80035ca <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f103 020c 	add.w	r2, r3, #12
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035aa:	7812      	ldrb	r2, [r2, #0]
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035c8:	e015      	b.n	80035f6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ca:	f7fe fd0f 	bl	8001fec <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d803      	bhi.n	80035e2 <HAL_SPI_Receive+0x166>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d102      	bne.n	80035e8 <HAL_SPI_Receive+0x16c>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80035f4:	e051      	b.n	800369a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1c7      	bne.n	8003590 <HAL_SPI_Receive+0x114>
 8003600:	e035      	b.n	800366e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d113      	bne.n	8003638 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361a:	b292      	uxth	r2, r2
 800361c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003622:	1c9a      	adds	r2, r3, #2
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003636:	e015      	b.n	8003664 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003638:	f7fe fcd8 	bl	8001fec <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d803      	bhi.n	8003650 <HAL_SPI_Receive+0x1d4>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364e:	d102      	bne.n	8003656 <HAL_SPI_Receive+0x1da>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003662:	e01a      	b.n	800369a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1c9      	bne.n	8003602 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	6839      	ldr	r1, [r7, #0]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fa52 	bl	8003b1c <SPI_EndRxTransaction>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	75fb      	strb	r3, [r7, #23]
 8003690:	e003      	b.n	800369a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80036a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08c      	sub	sp, #48	@ 0x30
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036ba:	2301      	movs	r3, #1
 80036bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_SPI_TransmitReceive+0x26>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e198      	b.n	8003a04 <HAL_SPI_TransmitReceive+0x358>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036da:	f7fe fc87 	bl	8001fec <HAL_GetTick>
 80036de:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80036f0:	887b      	ldrh	r3, [r7, #2]
 80036f2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d00f      	beq.n	800371c <HAL_SPI_TransmitReceive+0x70>
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003702:	d107      	bne.n	8003714 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d103      	bne.n	8003714 <HAL_SPI_TransmitReceive+0x68>
 800370c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003710:	2b04      	cmp	r3, #4
 8003712:	d003      	beq.n	800371c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003714:	2302      	movs	r3, #2
 8003716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800371a:	e16d      	b.n	80039f8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d005      	beq.n	800372e <HAL_SPI_TransmitReceive+0x82>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <HAL_SPI_TransmitReceive+0x82>
 8003728:	887b      	ldrh	r3, [r7, #2]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d103      	bne.n	8003736 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003734:	e160      	b.n	80039f8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b04      	cmp	r3, #4
 8003740:	d003      	beq.n	800374a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2205      	movs	r2, #5
 8003746:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	887a      	ldrh	r2, [r7, #2]
 800375a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	887a      	ldrh	r2, [r7, #2]
 8003760:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	887a      	ldrh	r2, [r7, #2]
 800376c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	887a      	ldrh	r2, [r7, #2]
 8003772:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800378a:	2b40      	cmp	r3, #64	@ 0x40
 800378c:	d007      	beq.n	800379e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800379c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037a6:	d17c      	bne.n	80038a2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <HAL_SPI_TransmitReceive+0x10a>
 80037b0:	8b7b      	ldrh	r3, [r7, #26]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d16a      	bne.n	800388c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ba:	881a      	ldrh	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c6:	1c9a      	adds	r2, r3, #2
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037da:	e057      	b.n	800388c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d11b      	bne.n	8003822 <HAL_SPI_TransmitReceive+0x176>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d016      	beq.n	8003822 <HAL_SPI_TransmitReceive+0x176>
 80037f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d113      	bne.n	8003822 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fe:	881a      	ldrh	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	1c9a      	adds	r2, r3, #2
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b01      	cmp	r3, #1
 800382e:	d119      	bne.n	8003864 <HAL_SPI_TransmitReceive+0x1b8>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d014      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003844:	b292      	uxth	r2, r2
 8003846:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384c:	1c9a      	adds	r2, r3, #2
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003860:	2301      	movs	r3, #1
 8003862:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003864:	f7fe fbc2 	bl	8001fec <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003870:	429a      	cmp	r2, r3
 8003872:	d80b      	bhi.n	800388c <HAL_SPI_TransmitReceive+0x1e0>
 8003874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387a:	d007      	beq.n	800388c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800388a:	e0b5      	b.n	80039f8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1a2      	bne.n	80037dc <HAL_SPI_TransmitReceive+0x130>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d19d      	bne.n	80037dc <HAL_SPI_TransmitReceive+0x130>
 80038a0:	e080      	b.n	80039a4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <HAL_SPI_TransmitReceive+0x204>
 80038aa:	8b7b      	ldrh	r3, [r7, #26]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d16f      	bne.n	8003990 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	330c      	adds	r3, #12
 80038ba:	7812      	ldrb	r2, [r2, #0]
 80038bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d6:	e05b      	b.n	8003990 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d11c      	bne.n	8003920 <HAL_SPI_TransmitReceive+0x274>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d017      	beq.n	8003920 <HAL_SPI_TransmitReceive+0x274>
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d114      	bne.n	8003920 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	330c      	adds	r3, #12
 8003900:	7812      	ldrb	r2, [r2, #0]
 8003902:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b01      	cmp	r3, #1
 800392c:	d119      	bne.n	8003962 <HAL_SPI_TransmitReceive+0x2b6>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d014      	beq.n	8003962 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800395e:	2301      	movs	r3, #1
 8003960:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003962:	f7fe fb43 	bl	8001fec <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800396e:	429a      	cmp	r2, r3
 8003970:	d803      	bhi.n	800397a <HAL_SPI_TransmitReceive+0x2ce>
 8003972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003978:	d102      	bne.n	8003980 <HAL_SPI_TransmitReceive+0x2d4>
 800397a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800397c:	2b00      	cmp	r3, #0
 800397e:	d107      	bne.n	8003990 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800398e:	e033      	b.n	80039f8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d19e      	bne.n	80038d8 <HAL_SPI_TransmitReceive+0x22c>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d199      	bne.n	80038d8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f91d 	bl	8003be8 <SPI_EndRxTxTransaction>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d006      	beq.n	80039c2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2220      	movs	r2, #32
 80039be:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80039c0:	e01a      	b.n	80039f8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10a      	bne.n	80039e0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ee:	e003      	b.n	80039f8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003a00:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3730      	adds	r7, #48	@ 0x30
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a1c:	f7fe fae6 	bl	8001fec <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	4413      	add	r3, r2
 8003a2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a2c:	f7fe fade 	bl	8001fec <HAL_GetTick>
 8003a30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a32:	4b39      	ldr	r3, [pc, #228]	@ (8003b18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	015b      	lsls	r3, r3, #5
 8003a38:	0d1b      	lsrs	r3, r3, #20
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	fb02 f303 	mul.w	r3, r2, r3
 8003a40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a42:	e054      	b.n	8003aee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4a:	d050      	beq.n	8003aee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a4c:	f7fe face 	bl	8001fec <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d902      	bls.n	8003a62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d13d      	bne.n	8003ade <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a7a:	d111      	bne.n	8003aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a84:	d004      	beq.n	8003a90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a8e:	d107      	bne.n	8003aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aa8:	d10f      	bne.n	8003aca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ac8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e017      	b.n	8003b0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4013      	ands	r3, r2
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	bf0c      	ite	eq
 8003afe:	2301      	moveq	r3, #1
 8003b00:	2300      	movne	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d19b      	bne.n	8003a44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3720      	adds	r7, #32
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20000018 	.word	0x20000018

08003b1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b30:	d111      	bne.n	8003b56 <SPI_EndRxTransaction+0x3a>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b3a:	d004      	beq.n	8003b46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b44:	d107      	bne.n	8003b56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b54:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b5e:	d12a      	bne.n	8003bb6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b68:	d012      	beq.n	8003b90 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2200      	movs	r2, #0
 8003b72:	2180      	movs	r1, #128	@ 0x80
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f7ff ff49 	bl	8003a0c <SPI_WaitFlagStateUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d02d      	beq.n	8003bdc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e026      	b.n	8003bde <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2200      	movs	r2, #0
 8003b98:	2101      	movs	r1, #1
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f7ff ff36 	bl	8003a0c <SPI_WaitFlagStateUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d01a      	beq.n	8003bdc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003baa:	f043 0220 	orr.w	r2, r3, #32
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e013      	b.n	8003bde <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f7ff ff23 	bl	8003a0c <SPI_WaitFlagStateUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd0:	f043 0220 	orr.w	r2, r3, #32
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e000      	b.n	8003bde <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c64 <SPI_EndRxTxTransaction+0x7c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c68 <SPI_EndRxTxTransaction+0x80>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	0d5b      	lsrs	r3, r3, #21
 8003c00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c04:	fb02 f303 	mul.w	r3, r2, r3
 8003c08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c12:	d112      	bne.n	8003c3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2180      	movs	r1, #128	@ 0x80
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f7ff fef4 	bl	8003a0c <SPI_WaitFlagStateUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d016      	beq.n	8003c58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2e:	f043 0220 	orr.w	r2, r3, #32
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e00f      	b.n	8003c5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c50:	2b80      	cmp	r3, #128	@ 0x80
 8003c52:	d0f2      	beq.n	8003c3a <SPI_EndRxTxTransaction+0x52>
 8003c54:	e000      	b.n	8003c58 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c56:	bf00      	nop
  }

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000018 	.word	0x20000018
 8003c68:	165e9f81 	.word	0x165e9f81

08003c6c <__cvt>:
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c72:	461d      	mov	r5, r3
 8003c74:	bfbb      	ittet	lt
 8003c76:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003c7a:	461d      	movlt	r5, r3
 8003c7c:	2300      	movge	r3, #0
 8003c7e:	232d      	movlt	r3, #45	@ 0x2d
 8003c80:	b088      	sub	sp, #32
 8003c82:	4614      	mov	r4, r2
 8003c84:	bfb8      	it	lt
 8003c86:	4614      	movlt	r4, r2
 8003c88:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003c8a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003c8c:	7013      	strb	r3, [r2, #0]
 8003c8e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003c90:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003c94:	f023 0820 	bic.w	r8, r3, #32
 8003c98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c9c:	d005      	beq.n	8003caa <__cvt+0x3e>
 8003c9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003ca2:	d100      	bne.n	8003ca6 <__cvt+0x3a>
 8003ca4:	3601      	adds	r6, #1
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e000      	b.n	8003cac <__cvt+0x40>
 8003caa:	2303      	movs	r3, #3
 8003cac:	aa07      	add	r2, sp, #28
 8003cae:	9204      	str	r2, [sp, #16]
 8003cb0:	aa06      	add	r2, sp, #24
 8003cb2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003cb6:	e9cd 3600 	strd	r3, r6, [sp]
 8003cba:	4622      	mov	r2, r4
 8003cbc:	462b      	mov	r3, r5
 8003cbe:	f000 ff53 	bl	8004b68 <_dtoa_r>
 8003cc2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003cc6:	4607      	mov	r7, r0
 8003cc8:	d119      	bne.n	8003cfe <__cvt+0x92>
 8003cca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003ccc:	07db      	lsls	r3, r3, #31
 8003cce:	d50e      	bpl.n	8003cee <__cvt+0x82>
 8003cd0:	eb00 0906 	add.w	r9, r0, r6
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	4620      	mov	r0, r4
 8003cda:	4629      	mov	r1, r5
 8003cdc:	f7fc ff30 	bl	8000b40 <__aeabi_dcmpeq>
 8003ce0:	b108      	cbz	r0, 8003ce6 <__cvt+0x7a>
 8003ce2:	f8cd 901c 	str.w	r9, [sp, #28]
 8003ce6:	2230      	movs	r2, #48	@ 0x30
 8003ce8:	9b07      	ldr	r3, [sp, #28]
 8003cea:	454b      	cmp	r3, r9
 8003cec:	d31e      	bcc.n	8003d2c <__cvt+0xc0>
 8003cee:	4638      	mov	r0, r7
 8003cf0:	9b07      	ldr	r3, [sp, #28]
 8003cf2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003cf4:	1bdb      	subs	r3, r3, r7
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	b008      	add	sp, #32
 8003cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cfe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003d02:	eb00 0906 	add.w	r9, r0, r6
 8003d06:	d1e5      	bne.n	8003cd4 <__cvt+0x68>
 8003d08:	7803      	ldrb	r3, [r0, #0]
 8003d0a:	2b30      	cmp	r3, #48	@ 0x30
 8003d0c:	d10a      	bne.n	8003d24 <__cvt+0xb8>
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2300      	movs	r3, #0
 8003d12:	4620      	mov	r0, r4
 8003d14:	4629      	mov	r1, r5
 8003d16:	f7fc ff13 	bl	8000b40 <__aeabi_dcmpeq>
 8003d1a:	b918      	cbnz	r0, 8003d24 <__cvt+0xb8>
 8003d1c:	f1c6 0601 	rsb	r6, r6, #1
 8003d20:	f8ca 6000 	str.w	r6, [sl]
 8003d24:	f8da 3000 	ldr.w	r3, [sl]
 8003d28:	4499      	add	r9, r3
 8003d2a:	e7d3      	b.n	8003cd4 <__cvt+0x68>
 8003d2c:	1c59      	adds	r1, r3, #1
 8003d2e:	9107      	str	r1, [sp, #28]
 8003d30:	701a      	strb	r2, [r3, #0]
 8003d32:	e7d9      	b.n	8003ce8 <__cvt+0x7c>

08003d34 <__exponent>:
 8003d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d36:	2900      	cmp	r1, #0
 8003d38:	bfb6      	itet	lt
 8003d3a:	232d      	movlt	r3, #45	@ 0x2d
 8003d3c:	232b      	movge	r3, #43	@ 0x2b
 8003d3e:	4249      	neglt	r1, r1
 8003d40:	2909      	cmp	r1, #9
 8003d42:	7002      	strb	r2, [r0, #0]
 8003d44:	7043      	strb	r3, [r0, #1]
 8003d46:	dd29      	ble.n	8003d9c <__exponent+0x68>
 8003d48:	f10d 0307 	add.w	r3, sp, #7
 8003d4c:	461d      	mov	r5, r3
 8003d4e:	270a      	movs	r7, #10
 8003d50:	fbb1 f6f7 	udiv	r6, r1, r7
 8003d54:	461a      	mov	r2, r3
 8003d56:	fb07 1416 	mls	r4, r7, r6, r1
 8003d5a:	3430      	adds	r4, #48	@ 0x30
 8003d5c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003d60:	460c      	mov	r4, r1
 8003d62:	2c63      	cmp	r4, #99	@ 0x63
 8003d64:	4631      	mov	r1, r6
 8003d66:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d6a:	dcf1      	bgt.n	8003d50 <__exponent+0x1c>
 8003d6c:	3130      	adds	r1, #48	@ 0x30
 8003d6e:	1e94      	subs	r4, r2, #2
 8003d70:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003d74:	4623      	mov	r3, r4
 8003d76:	1c41      	adds	r1, r0, #1
 8003d78:	42ab      	cmp	r3, r5
 8003d7a:	d30a      	bcc.n	8003d92 <__exponent+0x5e>
 8003d7c:	f10d 0309 	add.w	r3, sp, #9
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	42ac      	cmp	r4, r5
 8003d84:	bf88      	it	hi
 8003d86:	2300      	movhi	r3, #0
 8003d88:	3302      	adds	r3, #2
 8003d8a:	4403      	add	r3, r0
 8003d8c:	1a18      	subs	r0, r3, r0
 8003d8e:	b003      	add	sp, #12
 8003d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d92:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003d96:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003d9a:	e7ed      	b.n	8003d78 <__exponent+0x44>
 8003d9c:	2330      	movs	r3, #48	@ 0x30
 8003d9e:	3130      	adds	r1, #48	@ 0x30
 8003da0:	7083      	strb	r3, [r0, #2]
 8003da2:	70c1      	strb	r1, [r0, #3]
 8003da4:	1d03      	adds	r3, r0, #4
 8003da6:	e7f1      	b.n	8003d8c <__exponent+0x58>

08003da8 <_printf_float>:
 8003da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dac:	b091      	sub	sp, #68	@ 0x44
 8003dae:	460c      	mov	r4, r1
 8003db0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003db4:	4616      	mov	r6, r2
 8003db6:	461f      	mov	r7, r3
 8003db8:	4605      	mov	r5, r0
 8003dba:	f000 fdc5 	bl	8004948 <_localeconv_r>
 8003dbe:	6803      	ldr	r3, [r0, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	9308      	str	r3, [sp, #32]
 8003dc4:	f7fc f9dc 	bl	8000180 <strlen>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	930e      	str	r3, [sp, #56]	@ 0x38
 8003dcc:	f8d8 3000 	ldr.w	r3, [r8]
 8003dd0:	9009      	str	r0, [sp, #36]	@ 0x24
 8003dd2:	3307      	adds	r3, #7
 8003dd4:	f023 0307 	bic.w	r3, r3, #7
 8003dd8:	f103 0208 	add.w	r2, r3, #8
 8003ddc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003de0:	f8d4 b000 	ldr.w	fp, [r4]
 8003de4:	f8c8 2000 	str.w	r2, [r8]
 8003de8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003dec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003df0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003df2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003df6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003dfe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003e02:	4b9c      	ldr	r3, [pc, #624]	@ (8004074 <_printf_float+0x2cc>)
 8003e04:	f7fc fece 	bl	8000ba4 <__aeabi_dcmpun>
 8003e08:	bb70      	cbnz	r0, 8003e68 <_printf_float+0xc0>
 8003e0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e12:	4b98      	ldr	r3, [pc, #608]	@ (8004074 <_printf_float+0x2cc>)
 8003e14:	f7fc fea8 	bl	8000b68 <__aeabi_dcmple>
 8003e18:	bb30      	cbnz	r0, 8003e68 <_printf_float+0xc0>
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	4640      	mov	r0, r8
 8003e20:	4649      	mov	r1, r9
 8003e22:	f7fc fe97 	bl	8000b54 <__aeabi_dcmplt>
 8003e26:	b110      	cbz	r0, 8003e2e <_printf_float+0x86>
 8003e28:	232d      	movs	r3, #45	@ 0x2d
 8003e2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e2e:	4a92      	ldr	r2, [pc, #584]	@ (8004078 <_printf_float+0x2d0>)
 8003e30:	4b92      	ldr	r3, [pc, #584]	@ (800407c <_printf_float+0x2d4>)
 8003e32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003e36:	bf94      	ite	ls
 8003e38:	4690      	movls	r8, r2
 8003e3a:	4698      	movhi	r8, r3
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	f04f 0900 	mov.w	r9, #0
 8003e42:	6123      	str	r3, [r4, #16]
 8003e44:	f02b 0304 	bic.w	r3, fp, #4
 8003e48:	6023      	str	r3, [r4, #0]
 8003e4a:	4633      	mov	r3, r6
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	4628      	mov	r0, r5
 8003e50:	9700      	str	r7, [sp, #0]
 8003e52:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003e54:	f000 f9d4 	bl	8004200 <_printf_common>
 8003e58:	3001      	adds	r0, #1
 8003e5a:	f040 8090 	bne.w	8003f7e <_printf_float+0x1d6>
 8003e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e62:	b011      	add	sp, #68	@ 0x44
 8003e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e68:	4642      	mov	r2, r8
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	4640      	mov	r0, r8
 8003e6e:	4649      	mov	r1, r9
 8003e70:	f7fc fe98 	bl	8000ba4 <__aeabi_dcmpun>
 8003e74:	b148      	cbz	r0, 8003e8a <_printf_float+0xe2>
 8003e76:	464b      	mov	r3, r9
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	bfb8      	it	lt
 8003e7c:	232d      	movlt	r3, #45	@ 0x2d
 8003e7e:	4a80      	ldr	r2, [pc, #512]	@ (8004080 <_printf_float+0x2d8>)
 8003e80:	bfb8      	it	lt
 8003e82:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003e86:	4b7f      	ldr	r3, [pc, #508]	@ (8004084 <_printf_float+0x2dc>)
 8003e88:	e7d3      	b.n	8003e32 <_printf_float+0x8a>
 8003e8a:	6863      	ldr	r3, [r4, #4]
 8003e8c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	d13f      	bne.n	8003f14 <_printf_float+0x16c>
 8003e94:	2306      	movs	r3, #6
 8003e96:	6063      	str	r3, [r4, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003e9e:	6023      	str	r3, [r4, #0]
 8003ea0:	9206      	str	r2, [sp, #24]
 8003ea2:	aa0e      	add	r2, sp, #56	@ 0x38
 8003ea4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003ea8:	aa0d      	add	r2, sp, #52	@ 0x34
 8003eaa:	9203      	str	r2, [sp, #12]
 8003eac:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003eb0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003eb4:	6863      	ldr	r3, [r4, #4]
 8003eb6:	4642      	mov	r2, r8
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	4628      	mov	r0, r5
 8003ebc:	464b      	mov	r3, r9
 8003ebe:	910a      	str	r1, [sp, #40]	@ 0x28
 8003ec0:	f7ff fed4 	bl	8003c6c <__cvt>
 8003ec4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003ec6:	4680      	mov	r8, r0
 8003ec8:	2947      	cmp	r1, #71	@ 0x47
 8003eca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003ecc:	d128      	bne.n	8003f20 <_printf_float+0x178>
 8003ece:	1cc8      	adds	r0, r1, #3
 8003ed0:	db02      	blt.n	8003ed8 <_printf_float+0x130>
 8003ed2:	6863      	ldr	r3, [r4, #4]
 8003ed4:	4299      	cmp	r1, r3
 8003ed6:	dd40      	ble.n	8003f5a <_printf_float+0x1b2>
 8003ed8:	f1aa 0a02 	sub.w	sl, sl, #2
 8003edc:	fa5f fa8a 	uxtb.w	sl, sl
 8003ee0:	4652      	mov	r2, sl
 8003ee2:	3901      	subs	r1, #1
 8003ee4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003ee8:	910d      	str	r1, [sp, #52]	@ 0x34
 8003eea:	f7ff ff23 	bl	8003d34 <__exponent>
 8003eee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003ef0:	4681      	mov	r9, r0
 8003ef2:	1813      	adds	r3, r2, r0
 8003ef4:	2a01      	cmp	r2, #1
 8003ef6:	6123      	str	r3, [r4, #16]
 8003ef8:	dc02      	bgt.n	8003f00 <_printf_float+0x158>
 8003efa:	6822      	ldr	r2, [r4, #0]
 8003efc:	07d2      	lsls	r2, r2, #31
 8003efe:	d501      	bpl.n	8003f04 <_printf_float+0x15c>
 8003f00:	3301      	adds	r3, #1
 8003f02:	6123      	str	r3, [r4, #16]
 8003f04:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d09e      	beq.n	8003e4a <_printf_float+0xa2>
 8003f0c:	232d      	movs	r3, #45	@ 0x2d
 8003f0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f12:	e79a      	b.n	8003e4a <_printf_float+0xa2>
 8003f14:	2947      	cmp	r1, #71	@ 0x47
 8003f16:	d1bf      	bne.n	8003e98 <_printf_float+0xf0>
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1bd      	bne.n	8003e98 <_printf_float+0xf0>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e7ba      	b.n	8003e96 <_printf_float+0xee>
 8003f20:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f24:	d9dc      	bls.n	8003ee0 <_printf_float+0x138>
 8003f26:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003f2a:	d118      	bne.n	8003f5e <_printf_float+0x1b6>
 8003f2c:	2900      	cmp	r1, #0
 8003f2e:	6863      	ldr	r3, [r4, #4]
 8003f30:	dd0b      	ble.n	8003f4a <_printf_float+0x1a2>
 8003f32:	6121      	str	r1, [r4, #16]
 8003f34:	b913      	cbnz	r3, 8003f3c <_printf_float+0x194>
 8003f36:	6822      	ldr	r2, [r4, #0]
 8003f38:	07d0      	lsls	r0, r2, #31
 8003f3a:	d502      	bpl.n	8003f42 <_printf_float+0x19a>
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	440b      	add	r3, r1
 8003f40:	6123      	str	r3, [r4, #16]
 8003f42:	f04f 0900 	mov.w	r9, #0
 8003f46:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003f48:	e7dc      	b.n	8003f04 <_printf_float+0x15c>
 8003f4a:	b913      	cbnz	r3, 8003f52 <_printf_float+0x1aa>
 8003f4c:	6822      	ldr	r2, [r4, #0]
 8003f4e:	07d2      	lsls	r2, r2, #31
 8003f50:	d501      	bpl.n	8003f56 <_printf_float+0x1ae>
 8003f52:	3302      	adds	r3, #2
 8003f54:	e7f4      	b.n	8003f40 <_printf_float+0x198>
 8003f56:	2301      	movs	r3, #1
 8003f58:	e7f2      	b.n	8003f40 <_printf_float+0x198>
 8003f5a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003f5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f60:	4299      	cmp	r1, r3
 8003f62:	db05      	blt.n	8003f70 <_printf_float+0x1c8>
 8003f64:	6823      	ldr	r3, [r4, #0]
 8003f66:	6121      	str	r1, [r4, #16]
 8003f68:	07d8      	lsls	r0, r3, #31
 8003f6a:	d5ea      	bpl.n	8003f42 <_printf_float+0x19a>
 8003f6c:	1c4b      	adds	r3, r1, #1
 8003f6e:	e7e7      	b.n	8003f40 <_printf_float+0x198>
 8003f70:	2900      	cmp	r1, #0
 8003f72:	bfcc      	ite	gt
 8003f74:	2201      	movgt	r2, #1
 8003f76:	f1c1 0202 	rsble	r2, r1, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	e7e0      	b.n	8003f40 <_printf_float+0x198>
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	055a      	lsls	r2, r3, #21
 8003f82:	d407      	bmi.n	8003f94 <_printf_float+0x1ec>
 8003f84:	6923      	ldr	r3, [r4, #16]
 8003f86:	4642      	mov	r2, r8
 8003f88:	4631      	mov	r1, r6
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	47b8      	blx	r7
 8003f8e:	3001      	adds	r0, #1
 8003f90:	d12b      	bne.n	8003fea <_printf_float+0x242>
 8003f92:	e764      	b.n	8003e5e <_printf_float+0xb6>
 8003f94:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f98:	f240 80dc 	bls.w	8004154 <_printf_float+0x3ac>
 8003f9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f7fc fdcc 	bl	8000b40 <__aeabi_dcmpeq>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d033      	beq.n	8004014 <_printf_float+0x26c>
 8003fac:	2301      	movs	r3, #1
 8003fae:	4631      	mov	r1, r6
 8003fb0:	4628      	mov	r0, r5
 8003fb2:	4a35      	ldr	r2, [pc, #212]	@ (8004088 <_printf_float+0x2e0>)
 8003fb4:	47b8      	blx	r7
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	f43f af51 	beq.w	8003e5e <_printf_float+0xb6>
 8003fbc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003fc0:	4543      	cmp	r3, r8
 8003fc2:	db02      	blt.n	8003fca <_printf_float+0x222>
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	07d8      	lsls	r0, r3, #31
 8003fc8:	d50f      	bpl.n	8003fea <_printf_float+0x242>
 8003fca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003fce:	4631      	mov	r1, r6
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	47b8      	blx	r7
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	f43f af42 	beq.w	8003e5e <_printf_float+0xb6>
 8003fda:	f04f 0900 	mov.w	r9, #0
 8003fde:	f108 38ff 	add.w	r8, r8, #4294967295
 8003fe2:	f104 0a1a 	add.w	sl, r4, #26
 8003fe6:	45c8      	cmp	r8, r9
 8003fe8:	dc09      	bgt.n	8003ffe <_printf_float+0x256>
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	079b      	lsls	r3, r3, #30
 8003fee:	f100 8102 	bmi.w	80041f6 <_printf_float+0x44e>
 8003ff2:	68e0      	ldr	r0, [r4, #12]
 8003ff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003ff6:	4298      	cmp	r0, r3
 8003ff8:	bfb8      	it	lt
 8003ffa:	4618      	movlt	r0, r3
 8003ffc:	e731      	b.n	8003e62 <_printf_float+0xba>
 8003ffe:	2301      	movs	r3, #1
 8004000:	4652      	mov	r2, sl
 8004002:	4631      	mov	r1, r6
 8004004:	4628      	mov	r0, r5
 8004006:	47b8      	blx	r7
 8004008:	3001      	adds	r0, #1
 800400a:	f43f af28 	beq.w	8003e5e <_printf_float+0xb6>
 800400e:	f109 0901 	add.w	r9, r9, #1
 8004012:	e7e8      	b.n	8003fe6 <_printf_float+0x23e>
 8004014:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004016:	2b00      	cmp	r3, #0
 8004018:	dc38      	bgt.n	800408c <_printf_float+0x2e4>
 800401a:	2301      	movs	r3, #1
 800401c:	4631      	mov	r1, r6
 800401e:	4628      	mov	r0, r5
 8004020:	4a19      	ldr	r2, [pc, #100]	@ (8004088 <_printf_float+0x2e0>)
 8004022:	47b8      	blx	r7
 8004024:	3001      	adds	r0, #1
 8004026:	f43f af1a 	beq.w	8003e5e <_printf_float+0xb6>
 800402a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800402e:	ea59 0303 	orrs.w	r3, r9, r3
 8004032:	d102      	bne.n	800403a <_printf_float+0x292>
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	07d9      	lsls	r1, r3, #31
 8004038:	d5d7      	bpl.n	8003fea <_printf_float+0x242>
 800403a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800403e:	4631      	mov	r1, r6
 8004040:	4628      	mov	r0, r5
 8004042:	47b8      	blx	r7
 8004044:	3001      	adds	r0, #1
 8004046:	f43f af0a 	beq.w	8003e5e <_printf_float+0xb6>
 800404a:	f04f 0a00 	mov.w	sl, #0
 800404e:	f104 0b1a 	add.w	fp, r4, #26
 8004052:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004054:	425b      	negs	r3, r3
 8004056:	4553      	cmp	r3, sl
 8004058:	dc01      	bgt.n	800405e <_printf_float+0x2b6>
 800405a:	464b      	mov	r3, r9
 800405c:	e793      	b.n	8003f86 <_printf_float+0x1de>
 800405e:	2301      	movs	r3, #1
 8004060:	465a      	mov	r2, fp
 8004062:	4631      	mov	r1, r6
 8004064:	4628      	mov	r0, r5
 8004066:	47b8      	blx	r7
 8004068:	3001      	adds	r0, #1
 800406a:	f43f aef8 	beq.w	8003e5e <_printf_float+0xb6>
 800406e:	f10a 0a01 	add.w	sl, sl, #1
 8004072:	e7ee      	b.n	8004052 <_printf_float+0x2aa>
 8004074:	7fefffff 	.word	0x7fefffff
 8004078:	08006c84 	.word	0x08006c84
 800407c:	08006c88 	.word	0x08006c88
 8004080:	08006c8c 	.word	0x08006c8c
 8004084:	08006c90 	.word	0x08006c90
 8004088:	08006c94 	.word	0x08006c94
 800408c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800408e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004092:	4553      	cmp	r3, sl
 8004094:	bfa8      	it	ge
 8004096:	4653      	movge	r3, sl
 8004098:	2b00      	cmp	r3, #0
 800409a:	4699      	mov	r9, r3
 800409c:	dc36      	bgt.n	800410c <_printf_float+0x364>
 800409e:	f04f 0b00 	mov.w	fp, #0
 80040a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040a6:	f104 021a 	add.w	r2, r4, #26
 80040aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80040ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80040ae:	eba3 0309 	sub.w	r3, r3, r9
 80040b2:	455b      	cmp	r3, fp
 80040b4:	dc31      	bgt.n	800411a <_printf_float+0x372>
 80040b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80040b8:	459a      	cmp	sl, r3
 80040ba:	dc3a      	bgt.n	8004132 <_printf_float+0x38a>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	07da      	lsls	r2, r3, #31
 80040c0:	d437      	bmi.n	8004132 <_printf_float+0x38a>
 80040c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80040c4:	ebaa 0903 	sub.w	r9, sl, r3
 80040c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80040ca:	ebaa 0303 	sub.w	r3, sl, r3
 80040ce:	4599      	cmp	r9, r3
 80040d0:	bfa8      	it	ge
 80040d2:	4699      	movge	r9, r3
 80040d4:	f1b9 0f00 	cmp.w	r9, #0
 80040d8:	dc33      	bgt.n	8004142 <_printf_float+0x39a>
 80040da:	f04f 0800 	mov.w	r8, #0
 80040de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040e2:	f104 0b1a 	add.w	fp, r4, #26
 80040e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80040e8:	ebaa 0303 	sub.w	r3, sl, r3
 80040ec:	eba3 0309 	sub.w	r3, r3, r9
 80040f0:	4543      	cmp	r3, r8
 80040f2:	f77f af7a 	ble.w	8003fea <_printf_float+0x242>
 80040f6:	2301      	movs	r3, #1
 80040f8:	465a      	mov	r2, fp
 80040fa:	4631      	mov	r1, r6
 80040fc:	4628      	mov	r0, r5
 80040fe:	47b8      	blx	r7
 8004100:	3001      	adds	r0, #1
 8004102:	f43f aeac 	beq.w	8003e5e <_printf_float+0xb6>
 8004106:	f108 0801 	add.w	r8, r8, #1
 800410a:	e7ec      	b.n	80040e6 <_printf_float+0x33e>
 800410c:	4642      	mov	r2, r8
 800410e:	4631      	mov	r1, r6
 8004110:	4628      	mov	r0, r5
 8004112:	47b8      	blx	r7
 8004114:	3001      	adds	r0, #1
 8004116:	d1c2      	bne.n	800409e <_printf_float+0x2f6>
 8004118:	e6a1      	b.n	8003e5e <_printf_float+0xb6>
 800411a:	2301      	movs	r3, #1
 800411c:	4631      	mov	r1, r6
 800411e:	4628      	mov	r0, r5
 8004120:	920a      	str	r2, [sp, #40]	@ 0x28
 8004122:	47b8      	blx	r7
 8004124:	3001      	adds	r0, #1
 8004126:	f43f ae9a 	beq.w	8003e5e <_printf_float+0xb6>
 800412a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800412c:	f10b 0b01 	add.w	fp, fp, #1
 8004130:	e7bb      	b.n	80040aa <_printf_float+0x302>
 8004132:	4631      	mov	r1, r6
 8004134:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004138:	4628      	mov	r0, r5
 800413a:	47b8      	blx	r7
 800413c:	3001      	adds	r0, #1
 800413e:	d1c0      	bne.n	80040c2 <_printf_float+0x31a>
 8004140:	e68d      	b.n	8003e5e <_printf_float+0xb6>
 8004142:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004144:	464b      	mov	r3, r9
 8004146:	4631      	mov	r1, r6
 8004148:	4628      	mov	r0, r5
 800414a:	4442      	add	r2, r8
 800414c:	47b8      	blx	r7
 800414e:	3001      	adds	r0, #1
 8004150:	d1c3      	bne.n	80040da <_printf_float+0x332>
 8004152:	e684      	b.n	8003e5e <_printf_float+0xb6>
 8004154:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004158:	f1ba 0f01 	cmp.w	sl, #1
 800415c:	dc01      	bgt.n	8004162 <_printf_float+0x3ba>
 800415e:	07db      	lsls	r3, r3, #31
 8004160:	d536      	bpl.n	80041d0 <_printf_float+0x428>
 8004162:	2301      	movs	r3, #1
 8004164:	4642      	mov	r2, r8
 8004166:	4631      	mov	r1, r6
 8004168:	4628      	mov	r0, r5
 800416a:	47b8      	blx	r7
 800416c:	3001      	adds	r0, #1
 800416e:	f43f ae76 	beq.w	8003e5e <_printf_float+0xb6>
 8004172:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004176:	4631      	mov	r1, r6
 8004178:	4628      	mov	r0, r5
 800417a:	47b8      	blx	r7
 800417c:	3001      	adds	r0, #1
 800417e:	f43f ae6e 	beq.w	8003e5e <_printf_float+0xb6>
 8004182:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004186:	2200      	movs	r2, #0
 8004188:	2300      	movs	r3, #0
 800418a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800418e:	f7fc fcd7 	bl	8000b40 <__aeabi_dcmpeq>
 8004192:	b9c0      	cbnz	r0, 80041c6 <_printf_float+0x41e>
 8004194:	4653      	mov	r3, sl
 8004196:	f108 0201 	add.w	r2, r8, #1
 800419a:	4631      	mov	r1, r6
 800419c:	4628      	mov	r0, r5
 800419e:	47b8      	blx	r7
 80041a0:	3001      	adds	r0, #1
 80041a2:	d10c      	bne.n	80041be <_printf_float+0x416>
 80041a4:	e65b      	b.n	8003e5e <_printf_float+0xb6>
 80041a6:	2301      	movs	r3, #1
 80041a8:	465a      	mov	r2, fp
 80041aa:	4631      	mov	r1, r6
 80041ac:	4628      	mov	r0, r5
 80041ae:	47b8      	blx	r7
 80041b0:	3001      	adds	r0, #1
 80041b2:	f43f ae54 	beq.w	8003e5e <_printf_float+0xb6>
 80041b6:	f108 0801 	add.w	r8, r8, #1
 80041ba:	45d0      	cmp	r8, sl
 80041bc:	dbf3      	blt.n	80041a6 <_printf_float+0x3fe>
 80041be:	464b      	mov	r3, r9
 80041c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80041c4:	e6e0      	b.n	8003f88 <_printf_float+0x1e0>
 80041c6:	f04f 0800 	mov.w	r8, #0
 80041ca:	f104 0b1a 	add.w	fp, r4, #26
 80041ce:	e7f4      	b.n	80041ba <_printf_float+0x412>
 80041d0:	2301      	movs	r3, #1
 80041d2:	4642      	mov	r2, r8
 80041d4:	e7e1      	b.n	800419a <_printf_float+0x3f2>
 80041d6:	2301      	movs	r3, #1
 80041d8:	464a      	mov	r2, r9
 80041da:	4631      	mov	r1, r6
 80041dc:	4628      	mov	r0, r5
 80041de:	47b8      	blx	r7
 80041e0:	3001      	adds	r0, #1
 80041e2:	f43f ae3c 	beq.w	8003e5e <_printf_float+0xb6>
 80041e6:	f108 0801 	add.w	r8, r8, #1
 80041ea:	68e3      	ldr	r3, [r4, #12]
 80041ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80041ee:	1a5b      	subs	r3, r3, r1
 80041f0:	4543      	cmp	r3, r8
 80041f2:	dcf0      	bgt.n	80041d6 <_printf_float+0x42e>
 80041f4:	e6fd      	b.n	8003ff2 <_printf_float+0x24a>
 80041f6:	f04f 0800 	mov.w	r8, #0
 80041fa:	f104 0919 	add.w	r9, r4, #25
 80041fe:	e7f4      	b.n	80041ea <_printf_float+0x442>

08004200 <_printf_common>:
 8004200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004204:	4616      	mov	r6, r2
 8004206:	4698      	mov	r8, r3
 8004208:	688a      	ldr	r2, [r1, #8]
 800420a:	690b      	ldr	r3, [r1, #16]
 800420c:	4607      	mov	r7, r0
 800420e:	4293      	cmp	r3, r2
 8004210:	bfb8      	it	lt
 8004212:	4613      	movlt	r3, r2
 8004214:	6033      	str	r3, [r6, #0]
 8004216:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800421a:	460c      	mov	r4, r1
 800421c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004220:	b10a      	cbz	r2, 8004226 <_printf_common+0x26>
 8004222:	3301      	adds	r3, #1
 8004224:	6033      	str	r3, [r6, #0]
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	0699      	lsls	r1, r3, #26
 800422a:	bf42      	ittt	mi
 800422c:	6833      	ldrmi	r3, [r6, #0]
 800422e:	3302      	addmi	r3, #2
 8004230:	6033      	strmi	r3, [r6, #0]
 8004232:	6825      	ldr	r5, [r4, #0]
 8004234:	f015 0506 	ands.w	r5, r5, #6
 8004238:	d106      	bne.n	8004248 <_printf_common+0x48>
 800423a:	f104 0a19 	add.w	sl, r4, #25
 800423e:	68e3      	ldr	r3, [r4, #12]
 8004240:	6832      	ldr	r2, [r6, #0]
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	42ab      	cmp	r3, r5
 8004246:	dc2b      	bgt.n	80042a0 <_printf_common+0xa0>
 8004248:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800424c:	6822      	ldr	r2, [r4, #0]
 800424e:	3b00      	subs	r3, #0
 8004250:	bf18      	it	ne
 8004252:	2301      	movne	r3, #1
 8004254:	0692      	lsls	r2, r2, #26
 8004256:	d430      	bmi.n	80042ba <_printf_common+0xba>
 8004258:	4641      	mov	r1, r8
 800425a:	4638      	mov	r0, r7
 800425c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004260:	47c8      	blx	r9
 8004262:	3001      	adds	r0, #1
 8004264:	d023      	beq.n	80042ae <_printf_common+0xae>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	6922      	ldr	r2, [r4, #16]
 800426a:	f003 0306 	and.w	r3, r3, #6
 800426e:	2b04      	cmp	r3, #4
 8004270:	bf14      	ite	ne
 8004272:	2500      	movne	r5, #0
 8004274:	6833      	ldreq	r3, [r6, #0]
 8004276:	f04f 0600 	mov.w	r6, #0
 800427a:	bf08      	it	eq
 800427c:	68e5      	ldreq	r5, [r4, #12]
 800427e:	f104 041a 	add.w	r4, r4, #26
 8004282:	bf08      	it	eq
 8004284:	1aed      	subeq	r5, r5, r3
 8004286:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800428a:	bf08      	it	eq
 800428c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004290:	4293      	cmp	r3, r2
 8004292:	bfc4      	itt	gt
 8004294:	1a9b      	subgt	r3, r3, r2
 8004296:	18ed      	addgt	r5, r5, r3
 8004298:	42b5      	cmp	r5, r6
 800429a:	d11a      	bne.n	80042d2 <_printf_common+0xd2>
 800429c:	2000      	movs	r0, #0
 800429e:	e008      	b.n	80042b2 <_printf_common+0xb2>
 80042a0:	2301      	movs	r3, #1
 80042a2:	4652      	mov	r2, sl
 80042a4:	4641      	mov	r1, r8
 80042a6:	4638      	mov	r0, r7
 80042a8:	47c8      	blx	r9
 80042aa:	3001      	adds	r0, #1
 80042ac:	d103      	bne.n	80042b6 <_printf_common+0xb6>
 80042ae:	f04f 30ff 	mov.w	r0, #4294967295
 80042b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b6:	3501      	adds	r5, #1
 80042b8:	e7c1      	b.n	800423e <_printf_common+0x3e>
 80042ba:	2030      	movs	r0, #48	@ 0x30
 80042bc:	18e1      	adds	r1, r4, r3
 80042be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042c8:	4422      	add	r2, r4
 80042ca:	3302      	adds	r3, #2
 80042cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042d0:	e7c2      	b.n	8004258 <_printf_common+0x58>
 80042d2:	2301      	movs	r3, #1
 80042d4:	4622      	mov	r2, r4
 80042d6:	4641      	mov	r1, r8
 80042d8:	4638      	mov	r0, r7
 80042da:	47c8      	blx	r9
 80042dc:	3001      	adds	r0, #1
 80042de:	d0e6      	beq.n	80042ae <_printf_common+0xae>
 80042e0:	3601      	adds	r6, #1
 80042e2:	e7d9      	b.n	8004298 <_printf_common+0x98>

080042e4 <_printf_i>:
 80042e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042e8:	7e0f      	ldrb	r7, [r1, #24]
 80042ea:	4691      	mov	r9, r2
 80042ec:	2f78      	cmp	r7, #120	@ 0x78
 80042ee:	4680      	mov	r8, r0
 80042f0:	460c      	mov	r4, r1
 80042f2:	469a      	mov	sl, r3
 80042f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042fa:	d807      	bhi.n	800430c <_printf_i+0x28>
 80042fc:	2f62      	cmp	r7, #98	@ 0x62
 80042fe:	d80a      	bhi.n	8004316 <_printf_i+0x32>
 8004300:	2f00      	cmp	r7, #0
 8004302:	f000 80d3 	beq.w	80044ac <_printf_i+0x1c8>
 8004306:	2f58      	cmp	r7, #88	@ 0x58
 8004308:	f000 80ba 	beq.w	8004480 <_printf_i+0x19c>
 800430c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004310:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004314:	e03a      	b.n	800438c <_printf_i+0xa8>
 8004316:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800431a:	2b15      	cmp	r3, #21
 800431c:	d8f6      	bhi.n	800430c <_printf_i+0x28>
 800431e:	a101      	add	r1, pc, #4	@ (adr r1, 8004324 <_printf_i+0x40>)
 8004320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004324:	0800437d 	.word	0x0800437d
 8004328:	08004391 	.word	0x08004391
 800432c:	0800430d 	.word	0x0800430d
 8004330:	0800430d 	.word	0x0800430d
 8004334:	0800430d 	.word	0x0800430d
 8004338:	0800430d 	.word	0x0800430d
 800433c:	08004391 	.word	0x08004391
 8004340:	0800430d 	.word	0x0800430d
 8004344:	0800430d 	.word	0x0800430d
 8004348:	0800430d 	.word	0x0800430d
 800434c:	0800430d 	.word	0x0800430d
 8004350:	08004493 	.word	0x08004493
 8004354:	080043bb 	.word	0x080043bb
 8004358:	0800444d 	.word	0x0800444d
 800435c:	0800430d 	.word	0x0800430d
 8004360:	0800430d 	.word	0x0800430d
 8004364:	080044b5 	.word	0x080044b5
 8004368:	0800430d 	.word	0x0800430d
 800436c:	080043bb 	.word	0x080043bb
 8004370:	0800430d 	.word	0x0800430d
 8004374:	0800430d 	.word	0x0800430d
 8004378:	08004455 	.word	0x08004455
 800437c:	6833      	ldr	r3, [r6, #0]
 800437e:	1d1a      	adds	r2, r3, #4
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6032      	str	r2, [r6, #0]
 8004384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004388:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800438c:	2301      	movs	r3, #1
 800438e:	e09e      	b.n	80044ce <_printf_i+0x1ea>
 8004390:	6833      	ldr	r3, [r6, #0]
 8004392:	6820      	ldr	r0, [r4, #0]
 8004394:	1d19      	adds	r1, r3, #4
 8004396:	6031      	str	r1, [r6, #0]
 8004398:	0606      	lsls	r6, r0, #24
 800439a:	d501      	bpl.n	80043a0 <_printf_i+0xbc>
 800439c:	681d      	ldr	r5, [r3, #0]
 800439e:	e003      	b.n	80043a8 <_printf_i+0xc4>
 80043a0:	0645      	lsls	r5, r0, #25
 80043a2:	d5fb      	bpl.n	800439c <_printf_i+0xb8>
 80043a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043a8:	2d00      	cmp	r5, #0
 80043aa:	da03      	bge.n	80043b4 <_printf_i+0xd0>
 80043ac:	232d      	movs	r3, #45	@ 0x2d
 80043ae:	426d      	negs	r5, r5
 80043b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043b4:	230a      	movs	r3, #10
 80043b6:	4859      	ldr	r0, [pc, #356]	@ (800451c <_printf_i+0x238>)
 80043b8:	e011      	b.n	80043de <_printf_i+0xfa>
 80043ba:	6821      	ldr	r1, [r4, #0]
 80043bc:	6833      	ldr	r3, [r6, #0]
 80043be:	0608      	lsls	r0, r1, #24
 80043c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80043c4:	d402      	bmi.n	80043cc <_printf_i+0xe8>
 80043c6:	0649      	lsls	r1, r1, #25
 80043c8:	bf48      	it	mi
 80043ca:	b2ad      	uxthmi	r5, r5
 80043cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80043ce:	6033      	str	r3, [r6, #0]
 80043d0:	bf14      	ite	ne
 80043d2:	230a      	movne	r3, #10
 80043d4:	2308      	moveq	r3, #8
 80043d6:	4851      	ldr	r0, [pc, #324]	@ (800451c <_printf_i+0x238>)
 80043d8:	2100      	movs	r1, #0
 80043da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043de:	6866      	ldr	r6, [r4, #4]
 80043e0:	2e00      	cmp	r6, #0
 80043e2:	bfa8      	it	ge
 80043e4:	6821      	ldrge	r1, [r4, #0]
 80043e6:	60a6      	str	r6, [r4, #8]
 80043e8:	bfa4      	itt	ge
 80043ea:	f021 0104 	bicge.w	r1, r1, #4
 80043ee:	6021      	strge	r1, [r4, #0]
 80043f0:	b90d      	cbnz	r5, 80043f6 <_printf_i+0x112>
 80043f2:	2e00      	cmp	r6, #0
 80043f4:	d04b      	beq.n	800448e <_printf_i+0x1aa>
 80043f6:	4616      	mov	r6, r2
 80043f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80043fc:	fb03 5711 	mls	r7, r3, r1, r5
 8004400:	5dc7      	ldrb	r7, [r0, r7]
 8004402:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004406:	462f      	mov	r7, r5
 8004408:	42bb      	cmp	r3, r7
 800440a:	460d      	mov	r5, r1
 800440c:	d9f4      	bls.n	80043f8 <_printf_i+0x114>
 800440e:	2b08      	cmp	r3, #8
 8004410:	d10b      	bne.n	800442a <_printf_i+0x146>
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	07df      	lsls	r7, r3, #31
 8004416:	d508      	bpl.n	800442a <_printf_i+0x146>
 8004418:	6923      	ldr	r3, [r4, #16]
 800441a:	6861      	ldr	r1, [r4, #4]
 800441c:	4299      	cmp	r1, r3
 800441e:	bfde      	ittt	le
 8004420:	2330      	movle	r3, #48	@ 0x30
 8004422:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004426:	f106 36ff 	addle.w	r6, r6, #4294967295
 800442a:	1b92      	subs	r2, r2, r6
 800442c:	6122      	str	r2, [r4, #16]
 800442e:	464b      	mov	r3, r9
 8004430:	4621      	mov	r1, r4
 8004432:	4640      	mov	r0, r8
 8004434:	f8cd a000 	str.w	sl, [sp]
 8004438:	aa03      	add	r2, sp, #12
 800443a:	f7ff fee1 	bl	8004200 <_printf_common>
 800443e:	3001      	adds	r0, #1
 8004440:	d14a      	bne.n	80044d8 <_printf_i+0x1f4>
 8004442:	f04f 30ff 	mov.w	r0, #4294967295
 8004446:	b004      	add	sp, #16
 8004448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	f043 0320 	orr.w	r3, r3, #32
 8004452:	6023      	str	r3, [r4, #0]
 8004454:	2778      	movs	r7, #120	@ 0x78
 8004456:	4832      	ldr	r0, [pc, #200]	@ (8004520 <_printf_i+0x23c>)
 8004458:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	6831      	ldr	r1, [r6, #0]
 8004460:	061f      	lsls	r7, r3, #24
 8004462:	f851 5b04 	ldr.w	r5, [r1], #4
 8004466:	d402      	bmi.n	800446e <_printf_i+0x18a>
 8004468:	065f      	lsls	r7, r3, #25
 800446a:	bf48      	it	mi
 800446c:	b2ad      	uxthmi	r5, r5
 800446e:	6031      	str	r1, [r6, #0]
 8004470:	07d9      	lsls	r1, r3, #31
 8004472:	bf44      	itt	mi
 8004474:	f043 0320 	orrmi.w	r3, r3, #32
 8004478:	6023      	strmi	r3, [r4, #0]
 800447a:	b11d      	cbz	r5, 8004484 <_printf_i+0x1a0>
 800447c:	2310      	movs	r3, #16
 800447e:	e7ab      	b.n	80043d8 <_printf_i+0xf4>
 8004480:	4826      	ldr	r0, [pc, #152]	@ (800451c <_printf_i+0x238>)
 8004482:	e7e9      	b.n	8004458 <_printf_i+0x174>
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	f023 0320 	bic.w	r3, r3, #32
 800448a:	6023      	str	r3, [r4, #0]
 800448c:	e7f6      	b.n	800447c <_printf_i+0x198>
 800448e:	4616      	mov	r6, r2
 8004490:	e7bd      	b.n	800440e <_printf_i+0x12a>
 8004492:	6833      	ldr	r3, [r6, #0]
 8004494:	6825      	ldr	r5, [r4, #0]
 8004496:	1d18      	adds	r0, r3, #4
 8004498:	6961      	ldr	r1, [r4, #20]
 800449a:	6030      	str	r0, [r6, #0]
 800449c:	062e      	lsls	r6, r5, #24
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	d501      	bpl.n	80044a6 <_printf_i+0x1c2>
 80044a2:	6019      	str	r1, [r3, #0]
 80044a4:	e002      	b.n	80044ac <_printf_i+0x1c8>
 80044a6:	0668      	lsls	r0, r5, #25
 80044a8:	d5fb      	bpl.n	80044a2 <_printf_i+0x1be>
 80044aa:	8019      	strh	r1, [r3, #0]
 80044ac:	2300      	movs	r3, #0
 80044ae:	4616      	mov	r6, r2
 80044b0:	6123      	str	r3, [r4, #16]
 80044b2:	e7bc      	b.n	800442e <_printf_i+0x14a>
 80044b4:	6833      	ldr	r3, [r6, #0]
 80044b6:	2100      	movs	r1, #0
 80044b8:	1d1a      	adds	r2, r3, #4
 80044ba:	6032      	str	r2, [r6, #0]
 80044bc:	681e      	ldr	r6, [r3, #0]
 80044be:	6862      	ldr	r2, [r4, #4]
 80044c0:	4630      	mov	r0, r6
 80044c2:	f000 fab8 	bl	8004a36 <memchr>
 80044c6:	b108      	cbz	r0, 80044cc <_printf_i+0x1e8>
 80044c8:	1b80      	subs	r0, r0, r6
 80044ca:	6060      	str	r0, [r4, #4]
 80044cc:	6863      	ldr	r3, [r4, #4]
 80044ce:	6123      	str	r3, [r4, #16]
 80044d0:	2300      	movs	r3, #0
 80044d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044d6:	e7aa      	b.n	800442e <_printf_i+0x14a>
 80044d8:	4632      	mov	r2, r6
 80044da:	4649      	mov	r1, r9
 80044dc:	4640      	mov	r0, r8
 80044de:	6923      	ldr	r3, [r4, #16]
 80044e0:	47d0      	blx	sl
 80044e2:	3001      	adds	r0, #1
 80044e4:	d0ad      	beq.n	8004442 <_printf_i+0x15e>
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	079b      	lsls	r3, r3, #30
 80044ea:	d413      	bmi.n	8004514 <_printf_i+0x230>
 80044ec:	68e0      	ldr	r0, [r4, #12]
 80044ee:	9b03      	ldr	r3, [sp, #12]
 80044f0:	4298      	cmp	r0, r3
 80044f2:	bfb8      	it	lt
 80044f4:	4618      	movlt	r0, r3
 80044f6:	e7a6      	b.n	8004446 <_printf_i+0x162>
 80044f8:	2301      	movs	r3, #1
 80044fa:	4632      	mov	r2, r6
 80044fc:	4649      	mov	r1, r9
 80044fe:	4640      	mov	r0, r8
 8004500:	47d0      	blx	sl
 8004502:	3001      	adds	r0, #1
 8004504:	d09d      	beq.n	8004442 <_printf_i+0x15e>
 8004506:	3501      	adds	r5, #1
 8004508:	68e3      	ldr	r3, [r4, #12]
 800450a:	9903      	ldr	r1, [sp, #12]
 800450c:	1a5b      	subs	r3, r3, r1
 800450e:	42ab      	cmp	r3, r5
 8004510:	dcf2      	bgt.n	80044f8 <_printf_i+0x214>
 8004512:	e7eb      	b.n	80044ec <_printf_i+0x208>
 8004514:	2500      	movs	r5, #0
 8004516:	f104 0619 	add.w	r6, r4, #25
 800451a:	e7f5      	b.n	8004508 <_printf_i+0x224>
 800451c:	08006c96 	.word	0x08006c96
 8004520:	08006ca7 	.word	0x08006ca7

08004524 <std>:
 8004524:	2300      	movs	r3, #0
 8004526:	b510      	push	{r4, lr}
 8004528:	4604      	mov	r4, r0
 800452a:	e9c0 3300 	strd	r3, r3, [r0]
 800452e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004532:	6083      	str	r3, [r0, #8]
 8004534:	8181      	strh	r1, [r0, #12]
 8004536:	6643      	str	r3, [r0, #100]	@ 0x64
 8004538:	81c2      	strh	r2, [r0, #14]
 800453a:	6183      	str	r3, [r0, #24]
 800453c:	4619      	mov	r1, r3
 800453e:	2208      	movs	r2, #8
 8004540:	305c      	adds	r0, #92	@ 0x5c
 8004542:	f000 f9f9 	bl	8004938 <memset>
 8004546:	4b0d      	ldr	r3, [pc, #52]	@ (800457c <std+0x58>)
 8004548:	6224      	str	r4, [r4, #32]
 800454a:	6263      	str	r3, [r4, #36]	@ 0x24
 800454c:	4b0c      	ldr	r3, [pc, #48]	@ (8004580 <std+0x5c>)
 800454e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004550:	4b0c      	ldr	r3, [pc, #48]	@ (8004584 <std+0x60>)
 8004552:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004554:	4b0c      	ldr	r3, [pc, #48]	@ (8004588 <std+0x64>)
 8004556:	6323      	str	r3, [r4, #48]	@ 0x30
 8004558:	4b0c      	ldr	r3, [pc, #48]	@ (800458c <std+0x68>)
 800455a:	429c      	cmp	r4, r3
 800455c:	d006      	beq.n	800456c <std+0x48>
 800455e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004562:	4294      	cmp	r4, r2
 8004564:	d002      	beq.n	800456c <std+0x48>
 8004566:	33d0      	adds	r3, #208	@ 0xd0
 8004568:	429c      	cmp	r4, r3
 800456a:	d105      	bne.n	8004578 <std+0x54>
 800456c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004574:	f000 ba5c 	b.w	8004a30 <__retarget_lock_init_recursive>
 8004578:	bd10      	pop	{r4, pc}
 800457a:	bf00      	nop
 800457c:	08004789 	.word	0x08004789
 8004580:	080047ab 	.word	0x080047ab
 8004584:	080047e3 	.word	0x080047e3
 8004588:	08004807 	.word	0x08004807
 800458c:	200002a0 	.word	0x200002a0

08004590 <stdio_exit_handler>:
 8004590:	4a02      	ldr	r2, [pc, #8]	@ (800459c <stdio_exit_handler+0xc>)
 8004592:	4903      	ldr	r1, [pc, #12]	@ (80045a0 <stdio_exit_handler+0x10>)
 8004594:	4803      	ldr	r0, [pc, #12]	@ (80045a4 <stdio_exit_handler+0x14>)
 8004596:	f000 b869 	b.w	800466c <_fwalk_sglue>
 800459a:	bf00      	nop
 800459c:	20000024 	.word	0x20000024
 80045a0:	08006375 	.word	0x08006375
 80045a4:	20000034 	.word	0x20000034

080045a8 <cleanup_stdio>:
 80045a8:	6841      	ldr	r1, [r0, #4]
 80045aa:	4b0c      	ldr	r3, [pc, #48]	@ (80045dc <cleanup_stdio+0x34>)
 80045ac:	b510      	push	{r4, lr}
 80045ae:	4299      	cmp	r1, r3
 80045b0:	4604      	mov	r4, r0
 80045b2:	d001      	beq.n	80045b8 <cleanup_stdio+0x10>
 80045b4:	f001 fede 	bl	8006374 <_fflush_r>
 80045b8:	68a1      	ldr	r1, [r4, #8]
 80045ba:	4b09      	ldr	r3, [pc, #36]	@ (80045e0 <cleanup_stdio+0x38>)
 80045bc:	4299      	cmp	r1, r3
 80045be:	d002      	beq.n	80045c6 <cleanup_stdio+0x1e>
 80045c0:	4620      	mov	r0, r4
 80045c2:	f001 fed7 	bl	8006374 <_fflush_r>
 80045c6:	68e1      	ldr	r1, [r4, #12]
 80045c8:	4b06      	ldr	r3, [pc, #24]	@ (80045e4 <cleanup_stdio+0x3c>)
 80045ca:	4299      	cmp	r1, r3
 80045cc:	d004      	beq.n	80045d8 <cleanup_stdio+0x30>
 80045ce:	4620      	mov	r0, r4
 80045d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045d4:	f001 bece 	b.w	8006374 <_fflush_r>
 80045d8:	bd10      	pop	{r4, pc}
 80045da:	bf00      	nop
 80045dc:	200002a0 	.word	0x200002a0
 80045e0:	20000308 	.word	0x20000308
 80045e4:	20000370 	.word	0x20000370

080045e8 <global_stdio_init.part.0>:
 80045e8:	b510      	push	{r4, lr}
 80045ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004618 <global_stdio_init.part.0+0x30>)
 80045ec:	4c0b      	ldr	r4, [pc, #44]	@ (800461c <global_stdio_init.part.0+0x34>)
 80045ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004620 <global_stdio_init.part.0+0x38>)
 80045f0:	4620      	mov	r0, r4
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	2104      	movs	r1, #4
 80045f6:	2200      	movs	r2, #0
 80045f8:	f7ff ff94 	bl	8004524 <std>
 80045fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004600:	2201      	movs	r2, #1
 8004602:	2109      	movs	r1, #9
 8004604:	f7ff ff8e 	bl	8004524 <std>
 8004608:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800460c:	2202      	movs	r2, #2
 800460e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004612:	2112      	movs	r1, #18
 8004614:	f7ff bf86 	b.w	8004524 <std>
 8004618:	200003d8 	.word	0x200003d8
 800461c:	200002a0 	.word	0x200002a0
 8004620:	08004591 	.word	0x08004591

08004624 <__sfp_lock_acquire>:
 8004624:	4801      	ldr	r0, [pc, #4]	@ (800462c <__sfp_lock_acquire+0x8>)
 8004626:	f000 ba04 	b.w	8004a32 <__retarget_lock_acquire_recursive>
 800462a:	bf00      	nop
 800462c:	200003e1 	.word	0x200003e1

08004630 <__sfp_lock_release>:
 8004630:	4801      	ldr	r0, [pc, #4]	@ (8004638 <__sfp_lock_release+0x8>)
 8004632:	f000 b9ff 	b.w	8004a34 <__retarget_lock_release_recursive>
 8004636:	bf00      	nop
 8004638:	200003e1 	.word	0x200003e1

0800463c <__sinit>:
 800463c:	b510      	push	{r4, lr}
 800463e:	4604      	mov	r4, r0
 8004640:	f7ff fff0 	bl	8004624 <__sfp_lock_acquire>
 8004644:	6a23      	ldr	r3, [r4, #32]
 8004646:	b11b      	cbz	r3, 8004650 <__sinit+0x14>
 8004648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800464c:	f7ff bff0 	b.w	8004630 <__sfp_lock_release>
 8004650:	4b04      	ldr	r3, [pc, #16]	@ (8004664 <__sinit+0x28>)
 8004652:	6223      	str	r3, [r4, #32]
 8004654:	4b04      	ldr	r3, [pc, #16]	@ (8004668 <__sinit+0x2c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1f5      	bne.n	8004648 <__sinit+0xc>
 800465c:	f7ff ffc4 	bl	80045e8 <global_stdio_init.part.0>
 8004660:	e7f2      	b.n	8004648 <__sinit+0xc>
 8004662:	bf00      	nop
 8004664:	080045a9 	.word	0x080045a9
 8004668:	200003d8 	.word	0x200003d8

0800466c <_fwalk_sglue>:
 800466c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004670:	4607      	mov	r7, r0
 8004672:	4688      	mov	r8, r1
 8004674:	4614      	mov	r4, r2
 8004676:	2600      	movs	r6, #0
 8004678:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800467c:	f1b9 0901 	subs.w	r9, r9, #1
 8004680:	d505      	bpl.n	800468e <_fwalk_sglue+0x22>
 8004682:	6824      	ldr	r4, [r4, #0]
 8004684:	2c00      	cmp	r4, #0
 8004686:	d1f7      	bne.n	8004678 <_fwalk_sglue+0xc>
 8004688:	4630      	mov	r0, r6
 800468a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800468e:	89ab      	ldrh	r3, [r5, #12]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d907      	bls.n	80046a4 <_fwalk_sglue+0x38>
 8004694:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004698:	3301      	adds	r3, #1
 800469a:	d003      	beq.n	80046a4 <_fwalk_sglue+0x38>
 800469c:	4629      	mov	r1, r5
 800469e:	4638      	mov	r0, r7
 80046a0:	47c0      	blx	r8
 80046a2:	4306      	orrs	r6, r0
 80046a4:	3568      	adds	r5, #104	@ 0x68
 80046a6:	e7e9      	b.n	800467c <_fwalk_sglue+0x10>

080046a8 <iprintf>:
 80046a8:	b40f      	push	{r0, r1, r2, r3}
 80046aa:	b507      	push	{r0, r1, r2, lr}
 80046ac:	4906      	ldr	r1, [pc, #24]	@ (80046c8 <iprintf+0x20>)
 80046ae:	ab04      	add	r3, sp, #16
 80046b0:	6808      	ldr	r0, [r1, #0]
 80046b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80046b6:	6881      	ldr	r1, [r0, #8]
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	f001 fcc3 	bl	8006044 <_vfiprintf_r>
 80046be:	b003      	add	sp, #12
 80046c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80046c4:	b004      	add	sp, #16
 80046c6:	4770      	bx	lr
 80046c8:	20000030 	.word	0x20000030

080046cc <_puts_r>:
 80046cc:	6a03      	ldr	r3, [r0, #32]
 80046ce:	b570      	push	{r4, r5, r6, lr}
 80046d0:	4605      	mov	r5, r0
 80046d2:	460e      	mov	r6, r1
 80046d4:	6884      	ldr	r4, [r0, #8]
 80046d6:	b90b      	cbnz	r3, 80046dc <_puts_r+0x10>
 80046d8:	f7ff ffb0 	bl	800463c <__sinit>
 80046dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046de:	07db      	lsls	r3, r3, #31
 80046e0:	d405      	bmi.n	80046ee <_puts_r+0x22>
 80046e2:	89a3      	ldrh	r3, [r4, #12]
 80046e4:	0598      	lsls	r0, r3, #22
 80046e6:	d402      	bmi.n	80046ee <_puts_r+0x22>
 80046e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046ea:	f000 f9a2 	bl	8004a32 <__retarget_lock_acquire_recursive>
 80046ee:	89a3      	ldrh	r3, [r4, #12]
 80046f0:	0719      	lsls	r1, r3, #28
 80046f2:	d502      	bpl.n	80046fa <_puts_r+0x2e>
 80046f4:	6923      	ldr	r3, [r4, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d135      	bne.n	8004766 <_puts_r+0x9a>
 80046fa:	4621      	mov	r1, r4
 80046fc:	4628      	mov	r0, r5
 80046fe:	f000 f8c5 	bl	800488c <__swsetup_r>
 8004702:	b380      	cbz	r0, 8004766 <_puts_r+0x9a>
 8004704:	f04f 35ff 	mov.w	r5, #4294967295
 8004708:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800470a:	07da      	lsls	r2, r3, #31
 800470c:	d405      	bmi.n	800471a <_puts_r+0x4e>
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	059b      	lsls	r3, r3, #22
 8004712:	d402      	bmi.n	800471a <_puts_r+0x4e>
 8004714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004716:	f000 f98d 	bl	8004a34 <__retarget_lock_release_recursive>
 800471a:	4628      	mov	r0, r5
 800471c:	bd70      	pop	{r4, r5, r6, pc}
 800471e:	2b00      	cmp	r3, #0
 8004720:	da04      	bge.n	800472c <_puts_r+0x60>
 8004722:	69a2      	ldr	r2, [r4, #24]
 8004724:	429a      	cmp	r2, r3
 8004726:	dc17      	bgt.n	8004758 <_puts_r+0x8c>
 8004728:	290a      	cmp	r1, #10
 800472a:	d015      	beq.n	8004758 <_puts_r+0x8c>
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	6022      	str	r2, [r4, #0]
 8004732:	7019      	strb	r1, [r3, #0]
 8004734:	68a3      	ldr	r3, [r4, #8]
 8004736:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800473a:	3b01      	subs	r3, #1
 800473c:	60a3      	str	r3, [r4, #8]
 800473e:	2900      	cmp	r1, #0
 8004740:	d1ed      	bne.n	800471e <_puts_r+0x52>
 8004742:	2b00      	cmp	r3, #0
 8004744:	da11      	bge.n	800476a <_puts_r+0x9e>
 8004746:	4622      	mov	r2, r4
 8004748:	210a      	movs	r1, #10
 800474a:	4628      	mov	r0, r5
 800474c:	f000 f85f 	bl	800480e <__swbuf_r>
 8004750:	3001      	adds	r0, #1
 8004752:	d0d7      	beq.n	8004704 <_puts_r+0x38>
 8004754:	250a      	movs	r5, #10
 8004756:	e7d7      	b.n	8004708 <_puts_r+0x3c>
 8004758:	4622      	mov	r2, r4
 800475a:	4628      	mov	r0, r5
 800475c:	f000 f857 	bl	800480e <__swbuf_r>
 8004760:	3001      	adds	r0, #1
 8004762:	d1e7      	bne.n	8004734 <_puts_r+0x68>
 8004764:	e7ce      	b.n	8004704 <_puts_r+0x38>
 8004766:	3e01      	subs	r6, #1
 8004768:	e7e4      	b.n	8004734 <_puts_r+0x68>
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	6022      	str	r2, [r4, #0]
 8004770:	220a      	movs	r2, #10
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	e7ee      	b.n	8004754 <_puts_r+0x88>
	...

08004778 <puts>:
 8004778:	4b02      	ldr	r3, [pc, #8]	@ (8004784 <puts+0xc>)
 800477a:	4601      	mov	r1, r0
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	f7ff bfa5 	b.w	80046cc <_puts_r>
 8004782:	bf00      	nop
 8004784:	20000030 	.word	0x20000030

08004788 <__sread>:
 8004788:	b510      	push	{r4, lr}
 800478a:	460c      	mov	r4, r1
 800478c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004790:	f000 f900 	bl	8004994 <_read_r>
 8004794:	2800      	cmp	r0, #0
 8004796:	bfab      	itete	ge
 8004798:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800479a:	89a3      	ldrhlt	r3, [r4, #12]
 800479c:	181b      	addge	r3, r3, r0
 800479e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80047a2:	bfac      	ite	ge
 80047a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80047a6:	81a3      	strhlt	r3, [r4, #12]
 80047a8:	bd10      	pop	{r4, pc}

080047aa <__swrite>:
 80047aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047ae:	461f      	mov	r7, r3
 80047b0:	898b      	ldrh	r3, [r1, #12]
 80047b2:	4605      	mov	r5, r0
 80047b4:	05db      	lsls	r3, r3, #23
 80047b6:	460c      	mov	r4, r1
 80047b8:	4616      	mov	r6, r2
 80047ba:	d505      	bpl.n	80047c8 <__swrite+0x1e>
 80047bc:	2302      	movs	r3, #2
 80047be:	2200      	movs	r2, #0
 80047c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047c4:	f000 f8d4 	bl	8004970 <_lseek_r>
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	4632      	mov	r2, r6
 80047cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047d0:	81a3      	strh	r3, [r4, #12]
 80047d2:	4628      	mov	r0, r5
 80047d4:	463b      	mov	r3, r7
 80047d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047de:	f000 b8eb 	b.w	80049b8 <_write_r>

080047e2 <__sseek>:
 80047e2:	b510      	push	{r4, lr}
 80047e4:	460c      	mov	r4, r1
 80047e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ea:	f000 f8c1 	bl	8004970 <_lseek_r>
 80047ee:	1c43      	adds	r3, r0, #1
 80047f0:	89a3      	ldrh	r3, [r4, #12]
 80047f2:	bf15      	itete	ne
 80047f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80047f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80047fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80047fe:	81a3      	strheq	r3, [r4, #12]
 8004800:	bf18      	it	ne
 8004802:	81a3      	strhne	r3, [r4, #12]
 8004804:	bd10      	pop	{r4, pc}

08004806 <__sclose>:
 8004806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800480a:	f000 b8a1 	b.w	8004950 <_close_r>

0800480e <__swbuf_r>:
 800480e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004810:	460e      	mov	r6, r1
 8004812:	4614      	mov	r4, r2
 8004814:	4605      	mov	r5, r0
 8004816:	b118      	cbz	r0, 8004820 <__swbuf_r+0x12>
 8004818:	6a03      	ldr	r3, [r0, #32]
 800481a:	b90b      	cbnz	r3, 8004820 <__swbuf_r+0x12>
 800481c:	f7ff ff0e 	bl	800463c <__sinit>
 8004820:	69a3      	ldr	r3, [r4, #24]
 8004822:	60a3      	str	r3, [r4, #8]
 8004824:	89a3      	ldrh	r3, [r4, #12]
 8004826:	071a      	lsls	r2, r3, #28
 8004828:	d501      	bpl.n	800482e <__swbuf_r+0x20>
 800482a:	6923      	ldr	r3, [r4, #16]
 800482c:	b943      	cbnz	r3, 8004840 <__swbuf_r+0x32>
 800482e:	4621      	mov	r1, r4
 8004830:	4628      	mov	r0, r5
 8004832:	f000 f82b 	bl	800488c <__swsetup_r>
 8004836:	b118      	cbz	r0, 8004840 <__swbuf_r+0x32>
 8004838:	f04f 37ff 	mov.w	r7, #4294967295
 800483c:	4638      	mov	r0, r7
 800483e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	6922      	ldr	r2, [r4, #16]
 8004844:	b2f6      	uxtb	r6, r6
 8004846:	1a98      	subs	r0, r3, r2
 8004848:	6963      	ldr	r3, [r4, #20]
 800484a:	4637      	mov	r7, r6
 800484c:	4283      	cmp	r3, r0
 800484e:	dc05      	bgt.n	800485c <__swbuf_r+0x4e>
 8004850:	4621      	mov	r1, r4
 8004852:	4628      	mov	r0, r5
 8004854:	f001 fd8e 	bl	8006374 <_fflush_r>
 8004858:	2800      	cmp	r0, #0
 800485a:	d1ed      	bne.n	8004838 <__swbuf_r+0x2a>
 800485c:	68a3      	ldr	r3, [r4, #8]
 800485e:	3b01      	subs	r3, #1
 8004860:	60a3      	str	r3, [r4, #8]
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	6022      	str	r2, [r4, #0]
 8004868:	701e      	strb	r6, [r3, #0]
 800486a:	6962      	ldr	r2, [r4, #20]
 800486c:	1c43      	adds	r3, r0, #1
 800486e:	429a      	cmp	r2, r3
 8004870:	d004      	beq.n	800487c <__swbuf_r+0x6e>
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	07db      	lsls	r3, r3, #31
 8004876:	d5e1      	bpl.n	800483c <__swbuf_r+0x2e>
 8004878:	2e0a      	cmp	r6, #10
 800487a:	d1df      	bne.n	800483c <__swbuf_r+0x2e>
 800487c:	4621      	mov	r1, r4
 800487e:	4628      	mov	r0, r5
 8004880:	f001 fd78 	bl	8006374 <_fflush_r>
 8004884:	2800      	cmp	r0, #0
 8004886:	d0d9      	beq.n	800483c <__swbuf_r+0x2e>
 8004888:	e7d6      	b.n	8004838 <__swbuf_r+0x2a>
	...

0800488c <__swsetup_r>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	4b29      	ldr	r3, [pc, #164]	@ (8004934 <__swsetup_r+0xa8>)
 8004890:	4605      	mov	r5, r0
 8004892:	6818      	ldr	r0, [r3, #0]
 8004894:	460c      	mov	r4, r1
 8004896:	b118      	cbz	r0, 80048a0 <__swsetup_r+0x14>
 8004898:	6a03      	ldr	r3, [r0, #32]
 800489a:	b90b      	cbnz	r3, 80048a0 <__swsetup_r+0x14>
 800489c:	f7ff fece 	bl	800463c <__sinit>
 80048a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048a4:	0719      	lsls	r1, r3, #28
 80048a6:	d422      	bmi.n	80048ee <__swsetup_r+0x62>
 80048a8:	06da      	lsls	r2, r3, #27
 80048aa:	d407      	bmi.n	80048bc <__swsetup_r+0x30>
 80048ac:	2209      	movs	r2, #9
 80048ae:	602a      	str	r2, [r5, #0]
 80048b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048b4:	f04f 30ff 	mov.w	r0, #4294967295
 80048b8:	81a3      	strh	r3, [r4, #12]
 80048ba:	e033      	b.n	8004924 <__swsetup_r+0x98>
 80048bc:	0758      	lsls	r0, r3, #29
 80048be:	d512      	bpl.n	80048e6 <__swsetup_r+0x5a>
 80048c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048c2:	b141      	cbz	r1, 80048d6 <__swsetup_r+0x4a>
 80048c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048c8:	4299      	cmp	r1, r3
 80048ca:	d002      	beq.n	80048d2 <__swsetup_r+0x46>
 80048cc:	4628      	mov	r0, r5
 80048ce:	f000 ff13 	bl	80056f8 <_free_r>
 80048d2:	2300      	movs	r3, #0
 80048d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80048d6:	89a3      	ldrh	r3, [r4, #12]
 80048d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80048dc:	81a3      	strh	r3, [r4, #12]
 80048de:	2300      	movs	r3, #0
 80048e0:	6063      	str	r3, [r4, #4]
 80048e2:	6923      	ldr	r3, [r4, #16]
 80048e4:	6023      	str	r3, [r4, #0]
 80048e6:	89a3      	ldrh	r3, [r4, #12]
 80048e8:	f043 0308 	orr.w	r3, r3, #8
 80048ec:	81a3      	strh	r3, [r4, #12]
 80048ee:	6923      	ldr	r3, [r4, #16]
 80048f0:	b94b      	cbnz	r3, 8004906 <__swsetup_r+0x7a>
 80048f2:	89a3      	ldrh	r3, [r4, #12]
 80048f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80048f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048fc:	d003      	beq.n	8004906 <__swsetup_r+0x7a>
 80048fe:	4621      	mov	r1, r4
 8004900:	4628      	mov	r0, r5
 8004902:	f001 fd84 	bl	800640e <__smakebuf_r>
 8004906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800490a:	f013 0201 	ands.w	r2, r3, #1
 800490e:	d00a      	beq.n	8004926 <__swsetup_r+0x9a>
 8004910:	2200      	movs	r2, #0
 8004912:	60a2      	str	r2, [r4, #8]
 8004914:	6962      	ldr	r2, [r4, #20]
 8004916:	4252      	negs	r2, r2
 8004918:	61a2      	str	r2, [r4, #24]
 800491a:	6922      	ldr	r2, [r4, #16]
 800491c:	b942      	cbnz	r2, 8004930 <__swsetup_r+0xa4>
 800491e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004922:	d1c5      	bne.n	80048b0 <__swsetup_r+0x24>
 8004924:	bd38      	pop	{r3, r4, r5, pc}
 8004926:	0799      	lsls	r1, r3, #30
 8004928:	bf58      	it	pl
 800492a:	6962      	ldrpl	r2, [r4, #20]
 800492c:	60a2      	str	r2, [r4, #8]
 800492e:	e7f4      	b.n	800491a <__swsetup_r+0x8e>
 8004930:	2000      	movs	r0, #0
 8004932:	e7f7      	b.n	8004924 <__swsetup_r+0x98>
 8004934:	20000030 	.word	0x20000030

08004938 <memset>:
 8004938:	4603      	mov	r3, r0
 800493a:	4402      	add	r2, r0
 800493c:	4293      	cmp	r3, r2
 800493e:	d100      	bne.n	8004942 <memset+0xa>
 8004940:	4770      	bx	lr
 8004942:	f803 1b01 	strb.w	r1, [r3], #1
 8004946:	e7f9      	b.n	800493c <memset+0x4>

08004948 <_localeconv_r>:
 8004948:	4800      	ldr	r0, [pc, #0]	@ (800494c <_localeconv_r+0x4>)
 800494a:	4770      	bx	lr
 800494c:	20000170 	.word	0x20000170

08004950 <_close_r>:
 8004950:	b538      	push	{r3, r4, r5, lr}
 8004952:	2300      	movs	r3, #0
 8004954:	4d05      	ldr	r5, [pc, #20]	@ (800496c <_close_r+0x1c>)
 8004956:	4604      	mov	r4, r0
 8004958:	4608      	mov	r0, r1
 800495a:	602b      	str	r3, [r5, #0]
 800495c:	f7fd fa50 	bl	8001e00 <_close>
 8004960:	1c43      	adds	r3, r0, #1
 8004962:	d102      	bne.n	800496a <_close_r+0x1a>
 8004964:	682b      	ldr	r3, [r5, #0]
 8004966:	b103      	cbz	r3, 800496a <_close_r+0x1a>
 8004968:	6023      	str	r3, [r4, #0]
 800496a:	bd38      	pop	{r3, r4, r5, pc}
 800496c:	200003dc 	.word	0x200003dc

08004970 <_lseek_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4604      	mov	r4, r0
 8004974:	4608      	mov	r0, r1
 8004976:	4611      	mov	r1, r2
 8004978:	2200      	movs	r2, #0
 800497a:	4d05      	ldr	r5, [pc, #20]	@ (8004990 <_lseek_r+0x20>)
 800497c:	602a      	str	r2, [r5, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	f7fd fa62 	bl	8001e48 <_lseek>
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	d102      	bne.n	800498e <_lseek_r+0x1e>
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	b103      	cbz	r3, 800498e <_lseek_r+0x1e>
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	bd38      	pop	{r3, r4, r5, pc}
 8004990:	200003dc 	.word	0x200003dc

08004994 <_read_r>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	4604      	mov	r4, r0
 8004998:	4608      	mov	r0, r1
 800499a:	4611      	mov	r1, r2
 800499c:	2200      	movs	r2, #0
 800499e:	4d05      	ldr	r5, [pc, #20]	@ (80049b4 <_read_r+0x20>)
 80049a0:	602a      	str	r2, [r5, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	f7fd fa0f 	bl	8001dc6 <_read>
 80049a8:	1c43      	adds	r3, r0, #1
 80049aa:	d102      	bne.n	80049b2 <_read_r+0x1e>
 80049ac:	682b      	ldr	r3, [r5, #0]
 80049ae:	b103      	cbz	r3, 80049b2 <_read_r+0x1e>
 80049b0:	6023      	str	r3, [r4, #0]
 80049b2:	bd38      	pop	{r3, r4, r5, pc}
 80049b4:	200003dc 	.word	0x200003dc

080049b8 <_write_r>:
 80049b8:	b538      	push	{r3, r4, r5, lr}
 80049ba:	4604      	mov	r4, r0
 80049bc:	4608      	mov	r0, r1
 80049be:	4611      	mov	r1, r2
 80049c0:	2200      	movs	r2, #0
 80049c2:	4d05      	ldr	r5, [pc, #20]	@ (80049d8 <_write_r+0x20>)
 80049c4:	602a      	str	r2, [r5, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	f7fc fc9a 	bl	8001300 <_write>
 80049cc:	1c43      	adds	r3, r0, #1
 80049ce:	d102      	bne.n	80049d6 <_write_r+0x1e>
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	b103      	cbz	r3, 80049d6 <_write_r+0x1e>
 80049d4:	6023      	str	r3, [r4, #0]
 80049d6:	bd38      	pop	{r3, r4, r5, pc}
 80049d8:	200003dc 	.word	0x200003dc

080049dc <__errno>:
 80049dc:	4b01      	ldr	r3, [pc, #4]	@ (80049e4 <__errno+0x8>)
 80049de:	6818      	ldr	r0, [r3, #0]
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20000030 	.word	0x20000030

080049e8 <__libc_init_array>:
 80049e8:	b570      	push	{r4, r5, r6, lr}
 80049ea:	2600      	movs	r6, #0
 80049ec:	4d0c      	ldr	r5, [pc, #48]	@ (8004a20 <__libc_init_array+0x38>)
 80049ee:	4c0d      	ldr	r4, [pc, #52]	@ (8004a24 <__libc_init_array+0x3c>)
 80049f0:	1b64      	subs	r4, r4, r5
 80049f2:	10a4      	asrs	r4, r4, #2
 80049f4:	42a6      	cmp	r6, r4
 80049f6:	d109      	bne.n	8004a0c <__libc_init_array+0x24>
 80049f8:	f002 f8c4 	bl	8006b84 <_init>
 80049fc:	2600      	movs	r6, #0
 80049fe:	4d0a      	ldr	r5, [pc, #40]	@ (8004a28 <__libc_init_array+0x40>)
 8004a00:	4c0a      	ldr	r4, [pc, #40]	@ (8004a2c <__libc_init_array+0x44>)
 8004a02:	1b64      	subs	r4, r4, r5
 8004a04:	10a4      	asrs	r4, r4, #2
 8004a06:	42a6      	cmp	r6, r4
 8004a08:	d105      	bne.n	8004a16 <__libc_init_array+0x2e>
 8004a0a:	bd70      	pop	{r4, r5, r6, pc}
 8004a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a10:	4798      	blx	r3
 8004a12:	3601      	adds	r6, #1
 8004a14:	e7ee      	b.n	80049f4 <__libc_init_array+0xc>
 8004a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1a:	4798      	blx	r3
 8004a1c:	3601      	adds	r6, #1
 8004a1e:	e7f2      	b.n	8004a06 <__libc_init_array+0x1e>
 8004a20:	08007040 	.word	0x08007040
 8004a24:	08007040 	.word	0x08007040
 8004a28:	08007040 	.word	0x08007040
 8004a2c:	08007044 	.word	0x08007044

08004a30 <__retarget_lock_init_recursive>:
 8004a30:	4770      	bx	lr

08004a32 <__retarget_lock_acquire_recursive>:
 8004a32:	4770      	bx	lr

08004a34 <__retarget_lock_release_recursive>:
 8004a34:	4770      	bx	lr

08004a36 <memchr>:
 8004a36:	4603      	mov	r3, r0
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	b2c9      	uxtb	r1, r1
 8004a3c:	4402      	add	r2, r0
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	4618      	mov	r0, r3
 8004a42:	d101      	bne.n	8004a48 <memchr+0x12>
 8004a44:	2000      	movs	r0, #0
 8004a46:	e003      	b.n	8004a50 <memchr+0x1a>
 8004a48:	7804      	ldrb	r4, [r0, #0]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	428c      	cmp	r4, r1
 8004a4e:	d1f6      	bne.n	8004a3e <memchr+0x8>
 8004a50:	bd10      	pop	{r4, pc}

08004a52 <quorem>:
 8004a52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a56:	6903      	ldr	r3, [r0, #16]
 8004a58:	690c      	ldr	r4, [r1, #16]
 8004a5a:	4607      	mov	r7, r0
 8004a5c:	42a3      	cmp	r3, r4
 8004a5e:	db7e      	blt.n	8004b5e <quorem+0x10c>
 8004a60:	3c01      	subs	r4, #1
 8004a62:	00a3      	lsls	r3, r4, #2
 8004a64:	f100 0514 	add.w	r5, r0, #20
 8004a68:	f101 0814 	add.w	r8, r1, #20
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a72:	9301      	str	r3, [sp, #4]
 8004a74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a88:	d32e      	bcc.n	8004ae8 <quorem+0x96>
 8004a8a:	f04f 0a00 	mov.w	sl, #0
 8004a8e:	46c4      	mov	ip, r8
 8004a90:	46ae      	mov	lr, r5
 8004a92:	46d3      	mov	fp, sl
 8004a94:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004a98:	b298      	uxth	r0, r3
 8004a9a:	fb06 a000 	mla	r0, r6, r0, sl
 8004a9e:	0c1b      	lsrs	r3, r3, #16
 8004aa0:	0c02      	lsrs	r2, r0, #16
 8004aa2:	fb06 2303 	mla	r3, r6, r3, r2
 8004aa6:	f8de 2000 	ldr.w	r2, [lr]
 8004aaa:	b280      	uxth	r0, r0
 8004aac:	b292      	uxth	r2, r2
 8004aae:	1a12      	subs	r2, r2, r0
 8004ab0:	445a      	add	r2, fp
 8004ab2:	f8de 0000 	ldr.w	r0, [lr]
 8004ab6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004ac0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004ac4:	b292      	uxth	r2, r2
 8004ac6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004aca:	45e1      	cmp	r9, ip
 8004acc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004ad0:	f84e 2b04 	str.w	r2, [lr], #4
 8004ad4:	d2de      	bcs.n	8004a94 <quorem+0x42>
 8004ad6:	9b00      	ldr	r3, [sp, #0]
 8004ad8:	58eb      	ldr	r3, [r5, r3]
 8004ada:	b92b      	cbnz	r3, 8004ae8 <quorem+0x96>
 8004adc:	9b01      	ldr	r3, [sp, #4]
 8004ade:	3b04      	subs	r3, #4
 8004ae0:	429d      	cmp	r5, r3
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	d32f      	bcc.n	8004b46 <quorem+0xf4>
 8004ae6:	613c      	str	r4, [r7, #16]
 8004ae8:	4638      	mov	r0, r7
 8004aea:	f001 f97b 	bl	8005de4 <__mcmp>
 8004aee:	2800      	cmp	r0, #0
 8004af0:	db25      	blt.n	8004b3e <quorem+0xec>
 8004af2:	4629      	mov	r1, r5
 8004af4:	2000      	movs	r0, #0
 8004af6:	f858 2b04 	ldr.w	r2, [r8], #4
 8004afa:	f8d1 c000 	ldr.w	ip, [r1]
 8004afe:	fa1f fe82 	uxth.w	lr, r2
 8004b02:	fa1f f38c 	uxth.w	r3, ip
 8004b06:	eba3 030e 	sub.w	r3, r3, lr
 8004b0a:	4403      	add	r3, r0
 8004b0c:	0c12      	lsrs	r2, r2, #16
 8004b0e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004b12:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b1c:	45c1      	cmp	r9, r8
 8004b1e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004b22:	f841 3b04 	str.w	r3, [r1], #4
 8004b26:	d2e6      	bcs.n	8004af6 <quorem+0xa4>
 8004b28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b30:	b922      	cbnz	r2, 8004b3c <quorem+0xea>
 8004b32:	3b04      	subs	r3, #4
 8004b34:	429d      	cmp	r5, r3
 8004b36:	461a      	mov	r2, r3
 8004b38:	d30b      	bcc.n	8004b52 <quorem+0x100>
 8004b3a:	613c      	str	r4, [r7, #16]
 8004b3c:	3601      	adds	r6, #1
 8004b3e:	4630      	mov	r0, r6
 8004b40:	b003      	add	sp, #12
 8004b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	3b04      	subs	r3, #4
 8004b4a:	2a00      	cmp	r2, #0
 8004b4c:	d1cb      	bne.n	8004ae6 <quorem+0x94>
 8004b4e:	3c01      	subs	r4, #1
 8004b50:	e7c6      	b.n	8004ae0 <quorem+0x8e>
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	3b04      	subs	r3, #4
 8004b56:	2a00      	cmp	r2, #0
 8004b58:	d1ef      	bne.n	8004b3a <quorem+0xe8>
 8004b5a:	3c01      	subs	r4, #1
 8004b5c:	e7ea      	b.n	8004b34 <quorem+0xe2>
 8004b5e:	2000      	movs	r0, #0
 8004b60:	e7ee      	b.n	8004b40 <quorem+0xee>
 8004b62:	0000      	movs	r0, r0
 8004b64:	0000      	movs	r0, r0
	...

08004b68 <_dtoa_r>:
 8004b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6c:	4614      	mov	r4, r2
 8004b6e:	461d      	mov	r5, r3
 8004b70:	69c7      	ldr	r7, [r0, #28]
 8004b72:	b097      	sub	sp, #92	@ 0x5c
 8004b74:	4683      	mov	fp, r0
 8004b76:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004b7a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004b7c:	b97f      	cbnz	r7, 8004b9e <_dtoa_r+0x36>
 8004b7e:	2010      	movs	r0, #16
 8004b80:	f000 fe02 	bl	8005788 <malloc>
 8004b84:	4602      	mov	r2, r0
 8004b86:	f8cb 001c 	str.w	r0, [fp, #28]
 8004b8a:	b920      	cbnz	r0, 8004b96 <_dtoa_r+0x2e>
 8004b8c:	21ef      	movs	r1, #239	@ 0xef
 8004b8e:	4ba8      	ldr	r3, [pc, #672]	@ (8004e30 <_dtoa_r+0x2c8>)
 8004b90:	48a8      	ldr	r0, [pc, #672]	@ (8004e34 <_dtoa_r+0x2cc>)
 8004b92:	f001 fcb9 	bl	8006508 <__assert_func>
 8004b96:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004b9a:	6007      	str	r7, [r0, #0]
 8004b9c:	60c7      	str	r7, [r0, #12]
 8004b9e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ba2:	6819      	ldr	r1, [r3, #0]
 8004ba4:	b159      	cbz	r1, 8004bbe <_dtoa_r+0x56>
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	2301      	movs	r3, #1
 8004baa:	4093      	lsls	r3, r2
 8004bac:	604a      	str	r2, [r1, #4]
 8004bae:	608b      	str	r3, [r1, #8]
 8004bb0:	4658      	mov	r0, fp
 8004bb2:	f000 fedf 	bl	8005974 <_Bfree>
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	1e2b      	subs	r3, r5, #0
 8004bc0:	bfaf      	iteee	ge
 8004bc2:	2300      	movge	r3, #0
 8004bc4:	2201      	movlt	r2, #1
 8004bc6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004bca:	9303      	strlt	r3, [sp, #12]
 8004bcc:	bfa8      	it	ge
 8004bce:	6033      	strge	r3, [r6, #0]
 8004bd0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004bd4:	4b98      	ldr	r3, [pc, #608]	@ (8004e38 <_dtoa_r+0x2d0>)
 8004bd6:	bfb8      	it	lt
 8004bd8:	6032      	strlt	r2, [r6, #0]
 8004bda:	ea33 0308 	bics.w	r3, r3, r8
 8004bde:	d112      	bne.n	8004c06 <_dtoa_r+0x9e>
 8004be0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004be4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004bec:	4323      	orrs	r3, r4
 8004bee:	f000 8550 	beq.w	8005692 <_dtoa_r+0xb2a>
 8004bf2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004bf4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004e3c <_dtoa_r+0x2d4>
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 8552 	beq.w	80056a2 <_dtoa_r+0xb3a>
 8004bfe:	f10a 0303 	add.w	r3, sl, #3
 8004c02:	f000 bd4c 	b.w	800569e <_dtoa_r+0xb36>
 8004c06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c0a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004c0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c12:	2200      	movs	r2, #0
 8004c14:	2300      	movs	r3, #0
 8004c16:	f7fb ff93 	bl	8000b40 <__aeabi_dcmpeq>
 8004c1a:	4607      	mov	r7, r0
 8004c1c:	b158      	cbz	r0, 8004c36 <_dtoa_r+0xce>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004c26:	b113      	cbz	r3, 8004c2e <_dtoa_r+0xc6>
 8004c28:	4b85      	ldr	r3, [pc, #532]	@ (8004e40 <_dtoa_r+0x2d8>)
 8004c2a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004e44 <_dtoa_r+0x2dc>
 8004c32:	f000 bd36 	b.w	80056a2 <_dtoa_r+0xb3a>
 8004c36:	ab14      	add	r3, sp, #80	@ 0x50
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	ab15      	add	r3, sp, #84	@ 0x54
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	4658      	mov	r0, fp
 8004c40:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004c44:	f001 f97e 	bl	8005f44 <__d2b>
 8004c48:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004c4c:	4681      	mov	r9, r0
 8004c4e:	2e00      	cmp	r6, #0
 8004c50:	d077      	beq.n	8004d42 <_dtoa_r+0x1da>
 8004c52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c58:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c60:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004c64:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004c68:	9712      	str	r7, [sp, #72]	@ 0x48
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	4b76      	ldr	r3, [pc, #472]	@ (8004e48 <_dtoa_r+0x2e0>)
 8004c70:	f7fb fb46 	bl	8000300 <__aeabi_dsub>
 8004c74:	a368      	add	r3, pc, #416	@ (adr r3, 8004e18 <_dtoa_r+0x2b0>)
 8004c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7a:	f7fb fcf9 	bl	8000670 <__aeabi_dmul>
 8004c7e:	a368      	add	r3, pc, #416	@ (adr r3, 8004e20 <_dtoa_r+0x2b8>)
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f7fb fb3e 	bl	8000304 <__adddf3>
 8004c88:	4604      	mov	r4, r0
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	460d      	mov	r5, r1
 8004c8e:	f7fb fc85 	bl	800059c <__aeabi_i2d>
 8004c92:	a365      	add	r3, pc, #404	@ (adr r3, 8004e28 <_dtoa_r+0x2c0>)
 8004c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c98:	f7fb fcea 	bl	8000670 <__aeabi_dmul>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	f7fb fb2e 	bl	8000304 <__adddf3>
 8004ca8:	4604      	mov	r4, r0
 8004caa:	460d      	mov	r5, r1
 8004cac:	f7fb ff90 	bl	8000bd0 <__aeabi_d2iz>
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	4607      	mov	r7, r0
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	4629      	mov	r1, r5
 8004cba:	f7fb ff4b 	bl	8000b54 <__aeabi_dcmplt>
 8004cbe:	b140      	cbz	r0, 8004cd2 <_dtoa_r+0x16a>
 8004cc0:	4638      	mov	r0, r7
 8004cc2:	f7fb fc6b 	bl	800059c <__aeabi_i2d>
 8004cc6:	4622      	mov	r2, r4
 8004cc8:	462b      	mov	r3, r5
 8004cca:	f7fb ff39 	bl	8000b40 <__aeabi_dcmpeq>
 8004cce:	b900      	cbnz	r0, 8004cd2 <_dtoa_r+0x16a>
 8004cd0:	3f01      	subs	r7, #1
 8004cd2:	2f16      	cmp	r7, #22
 8004cd4:	d853      	bhi.n	8004d7e <_dtoa_r+0x216>
 8004cd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004cda:	4b5c      	ldr	r3, [pc, #368]	@ (8004e4c <_dtoa_r+0x2e4>)
 8004cdc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f7fb ff36 	bl	8000b54 <__aeabi_dcmplt>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	d04a      	beq.n	8004d82 <_dtoa_r+0x21a>
 8004cec:	2300      	movs	r3, #0
 8004cee:	3f01      	subs	r7, #1
 8004cf0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004cf2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004cf4:	1b9b      	subs	r3, r3, r6
 8004cf6:	1e5a      	subs	r2, r3, #1
 8004cf8:	bf46      	itte	mi
 8004cfa:	f1c3 0801 	rsbmi	r8, r3, #1
 8004cfe:	2300      	movmi	r3, #0
 8004d00:	f04f 0800 	movpl.w	r8, #0
 8004d04:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d06:	bf48      	it	mi
 8004d08:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004d0a:	2f00      	cmp	r7, #0
 8004d0c:	db3b      	blt.n	8004d86 <_dtoa_r+0x21e>
 8004d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d10:	970e      	str	r7, [sp, #56]	@ 0x38
 8004d12:	443b      	add	r3, r7
 8004d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d16:	2300      	movs	r3, #0
 8004d18:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d1c:	2b09      	cmp	r3, #9
 8004d1e:	d866      	bhi.n	8004dee <_dtoa_r+0x286>
 8004d20:	2b05      	cmp	r3, #5
 8004d22:	bfc4      	itt	gt
 8004d24:	3b04      	subgt	r3, #4
 8004d26:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004d28:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d2a:	bfc8      	it	gt
 8004d2c:	2400      	movgt	r4, #0
 8004d2e:	f1a3 0302 	sub.w	r3, r3, #2
 8004d32:	bfd8      	it	le
 8004d34:	2401      	movle	r4, #1
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d864      	bhi.n	8004e04 <_dtoa_r+0x29c>
 8004d3a:	e8df f003 	tbb	[pc, r3]
 8004d3e:	382b      	.short	0x382b
 8004d40:	5636      	.short	0x5636
 8004d42:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004d46:	441e      	add	r6, r3
 8004d48:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	bfc1      	itttt	gt
 8004d50:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004d54:	fa08 f803 	lslgt.w	r8, r8, r3
 8004d58:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004d5c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004d60:	bfd6      	itet	le
 8004d62:	f1c3 0320 	rsble	r3, r3, #32
 8004d66:	ea48 0003 	orrgt.w	r0, r8, r3
 8004d6a:	fa04 f003 	lslle.w	r0, r4, r3
 8004d6e:	f7fb fc05 	bl	800057c <__aeabi_ui2d>
 8004d72:	2201      	movs	r2, #1
 8004d74:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004d78:	3e01      	subs	r6, #1
 8004d7a:	9212      	str	r2, [sp, #72]	@ 0x48
 8004d7c:	e775      	b.n	8004c6a <_dtoa_r+0x102>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e7b6      	b.n	8004cf0 <_dtoa_r+0x188>
 8004d82:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004d84:	e7b5      	b.n	8004cf2 <_dtoa_r+0x18a>
 8004d86:	427b      	negs	r3, r7
 8004d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	eba8 0807 	sub.w	r8, r8, r7
 8004d90:	930e      	str	r3, [sp, #56]	@ 0x38
 8004d92:	e7c2      	b.n	8004d1a <_dtoa_r+0x1b2>
 8004d94:	2300      	movs	r3, #0
 8004d96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	dc35      	bgt.n	8004e0a <_dtoa_r+0x2a2>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	461a      	mov	r2, r3
 8004da2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004da6:	9221      	str	r2, [sp, #132]	@ 0x84
 8004da8:	e00b      	b.n	8004dc2 <_dtoa_r+0x25a>
 8004daa:	2301      	movs	r3, #1
 8004dac:	e7f3      	b.n	8004d96 <_dtoa_r+0x22e>
 8004dae:	2300      	movs	r3, #0
 8004db0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004db2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004db4:	18fb      	adds	r3, r7, r3
 8004db6:	9308      	str	r3, [sp, #32]
 8004db8:	3301      	adds	r3, #1
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	9307      	str	r3, [sp, #28]
 8004dbe:	bfb8      	it	lt
 8004dc0:	2301      	movlt	r3, #1
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	2204      	movs	r2, #4
 8004dc6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004dca:	f102 0514 	add.w	r5, r2, #20
 8004dce:	429d      	cmp	r5, r3
 8004dd0:	d91f      	bls.n	8004e12 <_dtoa_r+0x2aa>
 8004dd2:	6041      	str	r1, [r0, #4]
 8004dd4:	4658      	mov	r0, fp
 8004dd6:	f000 fd8d 	bl	80058f4 <_Balloc>
 8004dda:	4682      	mov	sl, r0
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d139      	bne.n	8004e54 <_dtoa_r+0x2ec>
 8004de0:	4602      	mov	r2, r0
 8004de2:	f240 11af 	movw	r1, #431	@ 0x1af
 8004de6:	4b1a      	ldr	r3, [pc, #104]	@ (8004e50 <_dtoa_r+0x2e8>)
 8004de8:	e6d2      	b.n	8004b90 <_dtoa_r+0x28>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e7e0      	b.n	8004db0 <_dtoa_r+0x248>
 8004dee:	2401      	movs	r4, #1
 8004df0:	2300      	movs	r3, #0
 8004df2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004df4:	9320      	str	r3, [sp, #128]	@ 0x80
 8004df6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004e00:	2312      	movs	r3, #18
 8004e02:	e7d0      	b.n	8004da6 <_dtoa_r+0x23e>
 8004e04:	2301      	movs	r3, #1
 8004e06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e08:	e7f5      	b.n	8004df6 <_dtoa_r+0x28e>
 8004e0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e0c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004e10:	e7d7      	b.n	8004dc2 <_dtoa_r+0x25a>
 8004e12:	3101      	adds	r1, #1
 8004e14:	0052      	lsls	r2, r2, #1
 8004e16:	e7d8      	b.n	8004dca <_dtoa_r+0x262>
 8004e18:	636f4361 	.word	0x636f4361
 8004e1c:	3fd287a7 	.word	0x3fd287a7
 8004e20:	8b60c8b3 	.word	0x8b60c8b3
 8004e24:	3fc68a28 	.word	0x3fc68a28
 8004e28:	509f79fb 	.word	0x509f79fb
 8004e2c:	3fd34413 	.word	0x3fd34413
 8004e30:	08006cc5 	.word	0x08006cc5
 8004e34:	08006cdc 	.word	0x08006cdc
 8004e38:	7ff00000 	.word	0x7ff00000
 8004e3c:	08006cc1 	.word	0x08006cc1
 8004e40:	08006c95 	.word	0x08006c95
 8004e44:	08006c94 	.word	0x08006c94
 8004e48:	3ff80000 	.word	0x3ff80000
 8004e4c:	08006dd8 	.word	0x08006dd8
 8004e50:	08006d34 	.word	0x08006d34
 8004e54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004e58:	6018      	str	r0, [r3, #0]
 8004e5a:	9b07      	ldr	r3, [sp, #28]
 8004e5c:	2b0e      	cmp	r3, #14
 8004e5e:	f200 80a4 	bhi.w	8004faa <_dtoa_r+0x442>
 8004e62:	2c00      	cmp	r4, #0
 8004e64:	f000 80a1 	beq.w	8004faa <_dtoa_r+0x442>
 8004e68:	2f00      	cmp	r7, #0
 8004e6a:	dd33      	ble.n	8004ed4 <_dtoa_r+0x36c>
 8004e6c:	4b86      	ldr	r3, [pc, #536]	@ (8005088 <_dtoa_r+0x520>)
 8004e6e:	f007 020f 	and.w	r2, r7, #15
 8004e72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e76:	05f8      	lsls	r0, r7, #23
 8004e78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e7c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004e80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004e84:	d516      	bpl.n	8004eb4 <_dtoa_r+0x34c>
 8004e86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e8a:	4b80      	ldr	r3, [pc, #512]	@ (800508c <_dtoa_r+0x524>)
 8004e8c:	2603      	movs	r6, #3
 8004e8e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e92:	f7fb fd17 	bl	80008c4 <__aeabi_ddiv>
 8004e96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e9a:	f004 040f 	and.w	r4, r4, #15
 8004e9e:	4d7b      	ldr	r5, [pc, #492]	@ (800508c <_dtoa_r+0x524>)
 8004ea0:	b954      	cbnz	r4, 8004eb8 <_dtoa_r+0x350>
 8004ea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eaa:	f7fb fd0b 	bl	80008c4 <__aeabi_ddiv>
 8004eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004eb2:	e028      	b.n	8004f06 <_dtoa_r+0x39e>
 8004eb4:	2602      	movs	r6, #2
 8004eb6:	e7f2      	b.n	8004e9e <_dtoa_r+0x336>
 8004eb8:	07e1      	lsls	r1, r4, #31
 8004eba:	d508      	bpl.n	8004ece <_dtoa_r+0x366>
 8004ebc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ec0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ec4:	f7fb fbd4 	bl	8000670 <__aeabi_dmul>
 8004ec8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ecc:	3601      	adds	r6, #1
 8004ece:	1064      	asrs	r4, r4, #1
 8004ed0:	3508      	adds	r5, #8
 8004ed2:	e7e5      	b.n	8004ea0 <_dtoa_r+0x338>
 8004ed4:	f000 80d2 	beq.w	800507c <_dtoa_r+0x514>
 8004ed8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004edc:	427c      	negs	r4, r7
 8004ede:	4b6a      	ldr	r3, [pc, #424]	@ (8005088 <_dtoa_r+0x520>)
 8004ee0:	f004 020f 	and.w	r2, r4, #15
 8004ee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f7fb fbc0 	bl	8000670 <__aeabi_dmul>
 8004ef0:	2602      	movs	r6, #2
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ef8:	4d64      	ldr	r5, [pc, #400]	@ (800508c <_dtoa_r+0x524>)
 8004efa:	1124      	asrs	r4, r4, #4
 8004efc:	2c00      	cmp	r4, #0
 8004efe:	f040 80b2 	bne.w	8005066 <_dtoa_r+0x4fe>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1d3      	bne.n	8004eae <_dtoa_r+0x346>
 8004f06:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004f0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80b7 	beq.w	8005080 <_dtoa_r+0x518>
 8004f12:	2200      	movs	r2, #0
 8004f14:	4620      	mov	r0, r4
 8004f16:	4629      	mov	r1, r5
 8004f18:	4b5d      	ldr	r3, [pc, #372]	@ (8005090 <_dtoa_r+0x528>)
 8004f1a:	f7fb fe1b 	bl	8000b54 <__aeabi_dcmplt>
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	f000 80ae 	beq.w	8005080 <_dtoa_r+0x518>
 8004f24:	9b07      	ldr	r3, [sp, #28]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 80aa 	beq.w	8005080 <_dtoa_r+0x518>
 8004f2c:	9b08      	ldr	r3, [sp, #32]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	dd37      	ble.n	8004fa2 <_dtoa_r+0x43a>
 8004f32:	1e7b      	subs	r3, r7, #1
 8004f34:	4620      	mov	r0, r4
 8004f36:	9304      	str	r3, [sp, #16]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	4b55      	ldr	r3, [pc, #340]	@ (8005094 <_dtoa_r+0x52c>)
 8004f3e:	f7fb fb97 	bl	8000670 <__aeabi_dmul>
 8004f42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f46:	9c08      	ldr	r4, [sp, #32]
 8004f48:	3601      	adds	r6, #1
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	f7fb fb26 	bl	800059c <__aeabi_i2d>
 8004f50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f54:	f7fb fb8c 	bl	8000670 <__aeabi_dmul>
 8004f58:	2200      	movs	r2, #0
 8004f5a:	4b4f      	ldr	r3, [pc, #316]	@ (8005098 <_dtoa_r+0x530>)
 8004f5c:	f7fb f9d2 	bl	8000304 <__adddf3>
 8004f60:	4605      	mov	r5, r0
 8004f62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004f66:	2c00      	cmp	r4, #0
 8004f68:	f040 809a 	bne.w	80050a0 <_dtoa_r+0x538>
 8004f6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f70:	2200      	movs	r2, #0
 8004f72:	4b4a      	ldr	r3, [pc, #296]	@ (800509c <_dtoa_r+0x534>)
 8004f74:	f7fb f9c4 	bl	8000300 <__aeabi_dsub>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f80:	462a      	mov	r2, r5
 8004f82:	4633      	mov	r3, r6
 8004f84:	f7fb fe04 	bl	8000b90 <__aeabi_dcmpgt>
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	f040 828e 	bne.w	80054aa <_dtoa_r+0x942>
 8004f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f92:	462a      	mov	r2, r5
 8004f94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004f98:	f7fb fddc 	bl	8000b54 <__aeabi_dcmplt>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	f040 8127 	bne.w	80051f0 <_dtoa_r+0x688>
 8004fa2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004fa6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004faa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f2c0 8163 	blt.w	8005278 <_dtoa_r+0x710>
 8004fb2:	2f0e      	cmp	r7, #14
 8004fb4:	f300 8160 	bgt.w	8005278 <_dtoa_r+0x710>
 8004fb8:	4b33      	ldr	r3, [pc, #204]	@ (8005088 <_dtoa_r+0x520>)
 8004fba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004fbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fc2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004fc6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	da03      	bge.n	8004fd4 <_dtoa_r+0x46c>
 8004fcc:	9b07      	ldr	r3, [sp, #28]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f340 8100 	ble.w	80051d4 <_dtoa_r+0x66c>
 8004fd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004fd8:	4656      	mov	r6, sl
 8004fda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fde:	4620      	mov	r0, r4
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	f7fb fc6f 	bl	80008c4 <__aeabi_ddiv>
 8004fe6:	f7fb fdf3 	bl	8000bd0 <__aeabi_d2iz>
 8004fea:	4680      	mov	r8, r0
 8004fec:	f7fb fad6 	bl	800059c <__aeabi_i2d>
 8004ff0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ff4:	f7fb fb3c 	bl	8000670 <__aeabi_dmul>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	4629      	mov	r1, r5
 8005000:	f7fb f97e 	bl	8000300 <__aeabi_dsub>
 8005004:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005008:	9d07      	ldr	r5, [sp, #28]
 800500a:	f806 4b01 	strb.w	r4, [r6], #1
 800500e:	eba6 040a 	sub.w	r4, r6, sl
 8005012:	42a5      	cmp	r5, r4
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	f040 8116 	bne.w	8005248 <_dtoa_r+0x6e0>
 800501c:	f7fb f972 	bl	8000304 <__adddf3>
 8005020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005024:	4604      	mov	r4, r0
 8005026:	460d      	mov	r5, r1
 8005028:	f7fb fdb2 	bl	8000b90 <__aeabi_dcmpgt>
 800502c:	2800      	cmp	r0, #0
 800502e:	f040 80f8 	bne.w	8005222 <_dtoa_r+0x6ba>
 8005032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005036:	4620      	mov	r0, r4
 8005038:	4629      	mov	r1, r5
 800503a:	f7fb fd81 	bl	8000b40 <__aeabi_dcmpeq>
 800503e:	b118      	cbz	r0, 8005048 <_dtoa_r+0x4e0>
 8005040:	f018 0f01 	tst.w	r8, #1
 8005044:	f040 80ed 	bne.w	8005222 <_dtoa_r+0x6ba>
 8005048:	4649      	mov	r1, r9
 800504a:	4658      	mov	r0, fp
 800504c:	f000 fc92 	bl	8005974 <_Bfree>
 8005050:	2300      	movs	r3, #0
 8005052:	7033      	strb	r3, [r6, #0]
 8005054:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005056:	3701      	adds	r7, #1
 8005058:	601f      	str	r7, [r3, #0]
 800505a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 8320 	beq.w	80056a2 <_dtoa_r+0xb3a>
 8005062:	601e      	str	r6, [r3, #0]
 8005064:	e31d      	b.n	80056a2 <_dtoa_r+0xb3a>
 8005066:	07e2      	lsls	r2, r4, #31
 8005068:	d505      	bpl.n	8005076 <_dtoa_r+0x50e>
 800506a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800506e:	f7fb faff 	bl	8000670 <__aeabi_dmul>
 8005072:	2301      	movs	r3, #1
 8005074:	3601      	adds	r6, #1
 8005076:	1064      	asrs	r4, r4, #1
 8005078:	3508      	adds	r5, #8
 800507a:	e73f      	b.n	8004efc <_dtoa_r+0x394>
 800507c:	2602      	movs	r6, #2
 800507e:	e742      	b.n	8004f06 <_dtoa_r+0x39e>
 8005080:	9c07      	ldr	r4, [sp, #28]
 8005082:	9704      	str	r7, [sp, #16]
 8005084:	e761      	b.n	8004f4a <_dtoa_r+0x3e2>
 8005086:	bf00      	nop
 8005088:	08006dd8 	.word	0x08006dd8
 800508c:	08006db0 	.word	0x08006db0
 8005090:	3ff00000 	.word	0x3ff00000
 8005094:	40240000 	.word	0x40240000
 8005098:	401c0000 	.word	0x401c0000
 800509c:	40140000 	.word	0x40140000
 80050a0:	4b70      	ldr	r3, [pc, #448]	@ (8005264 <_dtoa_r+0x6fc>)
 80050a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80050a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80050a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80050ac:	4454      	add	r4, sl
 80050ae:	2900      	cmp	r1, #0
 80050b0:	d045      	beq.n	800513e <_dtoa_r+0x5d6>
 80050b2:	2000      	movs	r0, #0
 80050b4:	496c      	ldr	r1, [pc, #432]	@ (8005268 <_dtoa_r+0x700>)
 80050b6:	f7fb fc05 	bl	80008c4 <__aeabi_ddiv>
 80050ba:	4633      	mov	r3, r6
 80050bc:	462a      	mov	r2, r5
 80050be:	f7fb f91f 	bl	8000300 <__aeabi_dsub>
 80050c2:	4656      	mov	r6, sl
 80050c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80050c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050cc:	f7fb fd80 	bl	8000bd0 <__aeabi_d2iz>
 80050d0:	4605      	mov	r5, r0
 80050d2:	f7fb fa63 	bl	800059c <__aeabi_i2d>
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050de:	f7fb f90f 	bl	8000300 <__aeabi_dsub>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	3530      	adds	r5, #48	@ 0x30
 80050e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80050f0:	f806 5b01 	strb.w	r5, [r6], #1
 80050f4:	f7fb fd2e 	bl	8000b54 <__aeabi_dcmplt>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	d163      	bne.n	80051c4 <_dtoa_r+0x65c>
 80050fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005100:	2000      	movs	r0, #0
 8005102:	495a      	ldr	r1, [pc, #360]	@ (800526c <_dtoa_r+0x704>)
 8005104:	f7fb f8fc 	bl	8000300 <__aeabi_dsub>
 8005108:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800510c:	f7fb fd22 	bl	8000b54 <__aeabi_dcmplt>
 8005110:	2800      	cmp	r0, #0
 8005112:	f040 8087 	bne.w	8005224 <_dtoa_r+0x6bc>
 8005116:	42a6      	cmp	r6, r4
 8005118:	f43f af43 	beq.w	8004fa2 <_dtoa_r+0x43a>
 800511c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005120:	2200      	movs	r2, #0
 8005122:	4b53      	ldr	r3, [pc, #332]	@ (8005270 <_dtoa_r+0x708>)
 8005124:	f7fb faa4 	bl	8000670 <__aeabi_dmul>
 8005128:	2200      	movs	r2, #0
 800512a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800512e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005132:	4b4f      	ldr	r3, [pc, #316]	@ (8005270 <_dtoa_r+0x708>)
 8005134:	f7fb fa9c 	bl	8000670 <__aeabi_dmul>
 8005138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800513c:	e7c4      	b.n	80050c8 <_dtoa_r+0x560>
 800513e:	4631      	mov	r1, r6
 8005140:	4628      	mov	r0, r5
 8005142:	f7fb fa95 	bl	8000670 <__aeabi_dmul>
 8005146:	4656      	mov	r6, sl
 8005148:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800514c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800514e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005152:	f7fb fd3d 	bl	8000bd0 <__aeabi_d2iz>
 8005156:	4605      	mov	r5, r0
 8005158:	f7fb fa20 	bl	800059c <__aeabi_i2d>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005164:	f7fb f8cc 	bl	8000300 <__aeabi_dsub>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	3530      	adds	r5, #48	@ 0x30
 800516e:	f806 5b01 	strb.w	r5, [r6], #1
 8005172:	42a6      	cmp	r6, r4
 8005174:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	d124      	bne.n	80051c8 <_dtoa_r+0x660>
 800517e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005182:	4b39      	ldr	r3, [pc, #228]	@ (8005268 <_dtoa_r+0x700>)
 8005184:	f7fb f8be 	bl	8000304 <__adddf3>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005190:	f7fb fcfe 	bl	8000b90 <__aeabi_dcmpgt>
 8005194:	2800      	cmp	r0, #0
 8005196:	d145      	bne.n	8005224 <_dtoa_r+0x6bc>
 8005198:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800519c:	2000      	movs	r0, #0
 800519e:	4932      	ldr	r1, [pc, #200]	@ (8005268 <_dtoa_r+0x700>)
 80051a0:	f7fb f8ae 	bl	8000300 <__aeabi_dsub>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051ac:	f7fb fcd2 	bl	8000b54 <__aeabi_dcmplt>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	f43f aef6 	beq.w	8004fa2 <_dtoa_r+0x43a>
 80051b6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80051b8:	1e73      	subs	r3, r6, #1
 80051ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 80051bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80051c0:	2b30      	cmp	r3, #48	@ 0x30
 80051c2:	d0f8      	beq.n	80051b6 <_dtoa_r+0x64e>
 80051c4:	9f04      	ldr	r7, [sp, #16]
 80051c6:	e73f      	b.n	8005048 <_dtoa_r+0x4e0>
 80051c8:	4b29      	ldr	r3, [pc, #164]	@ (8005270 <_dtoa_r+0x708>)
 80051ca:	f7fb fa51 	bl	8000670 <__aeabi_dmul>
 80051ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051d2:	e7bc      	b.n	800514e <_dtoa_r+0x5e6>
 80051d4:	d10c      	bne.n	80051f0 <_dtoa_r+0x688>
 80051d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051da:	2200      	movs	r2, #0
 80051dc:	4b25      	ldr	r3, [pc, #148]	@ (8005274 <_dtoa_r+0x70c>)
 80051de:	f7fb fa47 	bl	8000670 <__aeabi_dmul>
 80051e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051e6:	f7fb fcc9 	bl	8000b7c <__aeabi_dcmpge>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	f000 815b 	beq.w	80054a6 <_dtoa_r+0x93e>
 80051f0:	2400      	movs	r4, #0
 80051f2:	4625      	mov	r5, r4
 80051f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80051f6:	4656      	mov	r6, sl
 80051f8:	43db      	mvns	r3, r3
 80051fa:	9304      	str	r3, [sp, #16]
 80051fc:	2700      	movs	r7, #0
 80051fe:	4621      	mov	r1, r4
 8005200:	4658      	mov	r0, fp
 8005202:	f000 fbb7 	bl	8005974 <_Bfree>
 8005206:	2d00      	cmp	r5, #0
 8005208:	d0dc      	beq.n	80051c4 <_dtoa_r+0x65c>
 800520a:	b12f      	cbz	r7, 8005218 <_dtoa_r+0x6b0>
 800520c:	42af      	cmp	r7, r5
 800520e:	d003      	beq.n	8005218 <_dtoa_r+0x6b0>
 8005210:	4639      	mov	r1, r7
 8005212:	4658      	mov	r0, fp
 8005214:	f000 fbae 	bl	8005974 <_Bfree>
 8005218:	4629      	mov	r1, r5
 800521a:	4658      	mov	r0, fp
 800521c:	f000 fbaa 	bl	8005974 <_Bfree>
 8005220:	e7d0      	b.n	80051c4 <_dtoa_r+0x65c>
 8005222:	9704      	str	r7, [sp, #16]
 8005224:	4633      	mov	r3, r6
 8005226:	461e      	mov	r6, r3
 8005228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800522c:	2a39      	cmp	r2, #57	@ 0x39
 800522e:	d107      	bne.n	8005240 <_dtoa_r+0x6d8>
 8005230:	459a      	cmp	sl, r3
 8005232:	d1f8      	bne.n	8005226 <_dtoa_r+0x6be>
 8005234:	9a04      	ldr	r2, [sp, #16]
 8005236:	3201      	adds	r2, #1
 8005238:	9204      	str	r2, [sp, #16]
 800523a:	2230      	movs	r2, #48	@ 0x30
 800523c:	f88a 2000 	strb.w	r2, [sl]
 8005240:	781a      	ldrb	r2, [r3, #0]
 8005242:	3201      	adds	r2, #1
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	e7bd      	b.n	80051c4 <_dtoa_r+0x65c>
 8005248:	2200      	movs	r2, #0
 800524a:	4b09      	ldr	r3, [pc, #36]	@ (8005270 <_dtoa_r+0x708>)
 800524c:	f7fb fa10 	bl	8000670 <__aeabi_dmul>
 8005250:	2200      	movs	r2, #0
 8005252:	2300      	movs	r3, #0
 8005254:	4604      	mov	r4, r0
 8005256:	460d      	mov	r5, r1
 8005258:	f7fb fc72 	bl	8000b40 <__aeabi_dcmpeq>
 800525c:	2800      	cmp	r0, #0
 800525e:	f43f aebc 	beq.w	8004fda <_dtoa_r+0x472>
 8005262:	e6f1      	b.n	8005048 <_dtoa_r+0x4e0>
 8005264:	08006dd8 	.word	0x08006dd8
 8005268:	3fe00000 	.word	0x3fe00000
 800526c:	3ff00000 	.word	0x3ff00000
 8005270:	40240000 	.word	0x40240000
 8005274:	40140000 	.word	0x40140000
 8005278:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800527a:	2a00      	cmp	r2, #0
 800527c:	f000 80db 	beq.w	8005436 <_dtoa_r+0x8ce>
 8005280:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005282:	2a01      	cmp	r2, #1
 8005284:	f300 80bf 	bgt.w	8005406 <_dtoa_r+0x89e>
 8005288:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800528a:	2a00      	cmp	r2, #0
 800528c:	f000 80b7 	beq.w	80053fe <_dtoa_r+0x896>
 8005290:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005294:	4646      	mov	r6, r8
 8005296:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005298:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800529a:	2101      	movs	r1, #1
 800529c:	441a      	add	r2, r3
 800529e:	4658      	mov	r0, fp
 80052a0:	4498      	add	r8, r3
 80052a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80052a4:	f000 fc1a 	bl	8005adc <__i2b>
 80052a8:	4605      	mov	r5, r0
 80052aa:	b15e      	cbz	r6, 80052c4 <_dtoa_r+0x75c>
 80052ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	dd08      	ble.n	80052c4 <_dtoa_r+0x75c>
 80052b2:	42b3      	cmp	r3, r6
 80052b4:	bfa8      	it	ge
 80052b6:	4633      	movge	r3, r6
 80052b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052ba:	eba8 0803 	sub.w	r8, r8, r3
 80052be:	1af6      	subs	r6, r6, r3
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80052c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052c6:	b1f3      	cbz	r3, 8005306 <_dtoa_r+0x79e>
 80052c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 80b7 	beq.w	800543e <_dtoa_r+0x8d6>
 80052d0:	b18c      	cbz	r4, 80052f6 <_dtoa_r+0x78e>
 80052d2:	4629      	mov	r1, r5
 80052d4:	4622      	mov	r2, r4
 80052d6:	4658      	mov	r0, fp
 80052d8:	f000 fcbe 	bl	8005c58 <__pow5mult>
 80052dc:	464a      	mov	r2, r9
 80052de:	4601      	mov	r1, r0
 80052e0:	4605      	mov	r5, r0
 80052e2:	4658      	mov	r0, fp
 80052e4:	f000 fc10 	bl	8005b08 <__multiply>
 80052e8:	4649      	mov	r1, r9
 80052ea:	9004      	str	r0, [sp, #16]
 80052ec:	4658      	mov	r0, fp
 80052ee:	f000 fb41 	bl	8005974 <_Bfree>
 80052f2:	9b04      	ldr	r3, [sp, #16]
 80052f4:	4699      	mov	r9, r3
 80052f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052f8:	1b1a      	subs	r2, r3, r4
 80052fa:	d004      	beq.n	8005306 <_dtoa_r+0x79e>
 80052fc:	4649      	mov	r1, r9
 80052fe:	4658      	mov	r0, fp
 8005300:	f000 fcaa 	bl	8005c58 <__pow5mult>
 8005304:	4681      	mov	r9, r0
 8005306:	2101      	movs	r1, #1
 8005308:	4658      	mov	r0, fp
 800530a:	f000 fbe7 	bl	8005adc <__i2b>
 800530e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005310:	4604      	mov	r4, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 81c9 	beq.w	80056aa <_dtoa_r+0xb42>
 8005318:	461a      	mov	r2, r3
 800531a:	4601      	mov	r1, r0
 800531c:	4658      	mov	r0, fp
 800531e:	f000 fc9b 	bl	8005c58 <__pow5mult>
 8005322:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005324:	4604      	mov	r4, r0
 8005326:	2b01      	cmp	r3, #1
 8005328:	f300 808f 	bgt.w	800544a <_dtoa_r+0x8e2>
 800532c:	9b02      	ldr	r3, [sp, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	f040 8087 	bne.w	8005442 <_dtoa_r+0x8da>
 8005334:	9b03      	ldr	r3, [sp, #12]
 8005336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800533a:	2b00      	cmp	r3, #0
 800533c:	f040 8083 	bne.w	8005446 <_dtoa_r+0x8de>
 8005340:	9b03      	ldr	r3, [sp, #12]
 8005342:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005346:	0d1b      	lsrs	r3, r3, #20
 8005348:	051b      	lsls	r3, r3, #20
 800534a:	b12b      	cbz	r3, 8005358 <_dtoa_r+0x7f0>
 800534c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800534e:	f108 0801 	add.w	r8, r8, #1
 8005352:	3301      	adds	r3, #1
 8005354:	9309      	str	r3, [sp, #36]	@ 0x24
 8005356:	2301      	movs	r3, #1
 8005358:	930a      	str	r3, [sp, #40]	@ 0x28
 800535a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 81aa 	beq.w	80056b6 <_dtoa_r+0xb4e>
 8005362:	6923      	ldr	r3, [r4, #16]
 8005364:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005368:	6918      	ldr	r0, [r3, #16]
 800536a:	f000 fb6b 	bl	8005a44 <__hi0bits>
 800536e:	f1c0 0020 	rsb	r0, r0, #32
 8005372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005374:	4418      	add	r0, r3
 8005376:	f010 001f 	ands.w	r0, r0, #31
 800537a:	d071      	beq.n	8005460 <_dtoa_r+0x8f8>
 800537c:	f1c0 0320 	rsb	r3, r0, #32
 8005380:	2b04      	cmp	r3, #4
 8005382:	dd65      	ble.n	8005450 <_dtoa_r+0x8e8>
 8005384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005386:	f1c0 001c 	rsb	r0, r0, #28
 800538a:	4403      	add	r3, r0
 800538c:	4480      	add	r8, r0
 800538e:	4406      	add	r6, r0
 8005390:	9309      	str	r3, [sp, #36]	@ 0x24
 8005392:	f1b8 0f00 	cmp.w	r8, #0
 8005396:	dd05      	ble.n	80053a4 <_dtoa_r+0x83c>
 8005398:	4649      	mov	r1, r9
 800539a:	4642      	mov	r2, r8
 800539c:	4658      	mov	r0, fp
 800539e:	f000 fcb5 	bl	8005d0c <__lshift>
 80053a2:	4681      	mov	r9, r0
 80053a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	dd05      	ble.n	80053b6 <_dtoa_r+0x84e>
 80053aa:	4621      	mov	r1, r4
 80053ac:	461a      	mov	r2, r3
 80053ae:	4658      	mov	r0, fp
 80053b0:	f000 fcac 	bl	8005d0c <__lshift>
 80053b4:	4604      	mov	r4, r0
 80053b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d053      	beq.n	8005464 <_dtoa_r+0x8fc>
 80053bc:	4621      	mov	r1, r4
 80053be:	4648      	mov	r0, r9
 80053c0:	f000 fd10 	bl	8005de4 <__mcmp>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	da4d      	bge.n	8005464 <_dtoa_r+0x8fc>
 80053c8:	1e7b      	subs	r3, r7, #1
 80053ca:	4649      	mov	r1, r9
 80053cc:	9304      	str	r3, [sp, #16]
 80053ce:	220a      	movs	r2, #10
 80053d0:	2300      	movs	r3, #0
 80053d2:	4658      	mov	r0, fp
 80053d4:	f000 faf0 	bl	80059b8 <__multadd>
 80053d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053da:	4681      	mov	r9, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 816c 	beq.w	80056ba <_dtoa_r+0xb52>
 80053e2:	2300      	movs	r3, #0
 80053e4:	4629      	mov	r1, r5
 80053e6:	220a      	movs	r2, #10
 80053e8:	4658      	mov	r0, fp
 80053ea:	f000 fae5 	bl	80059b8 <__multadd>
 80053ee:	9b08      	ldr	r3, [sp, #32]
 80053f0:	4605      	mov	r5, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	dc61      	bgt.n	80054ba <_dtoa_r+0x952>
 80053f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	dc3b      	bgt.n	8005474 <_dtoa_r+0x90c>
 80053fc:	e05d      	b.n	80054ba <_dtoa_r+0x952>
 80053fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005400:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005404:	e746      	b.n	8005294 <_dtoa_r+0x72c>
 8005406:	9b07      	ldr	r3, [sp, #28]
 8005408:	1e5c      	subs	r4, r3, #1
 800540a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800540c:	42a3      	cmp	r3, r4
 800540e:	bfbf      	itttt	lt
 8005410:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005412:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005414:	1ae3      	sublt	r3, r4, r3
 8005416:	18d2      	addlt	r2, r2, r3
 8005418:	bfa8      	it	ge
 800541a:	1b1c      	subge	r4, r3, r4
 800541c:	9b07      	ldr	r3, [sp, #28]
 800541e:	bfbe      	ittt	lt
 8005420:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005422:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005424:	2400      	movlt	r4, #0
 8005426:	2b00      	cmp	r3, #0
 8005428:	bfb5      	itete	lt
 800542a:	eba8 0603 	sublt.w	r6, r8, r3
 800542e:	4646      	movge	r6, r8
 8005430:	2300      	movlt	r3, #0
 8005432:	9b07      	ldrge	r3, [sp, #28]
 8005434:	e730      	b.n	8005298 <_dtoa_r+0x730>
 8005436:	4646      	mov	r6, r8
 8005438:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800543a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800543c:	e735      	b.n	80052aa <_dtoa_r+0x742>
 800543e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005440:	e75c      	b.n	80052fc <_dtoa_r+0x794>
 8005442:	2300      	movs	r3, #0
 8005444:	e788      	b.n	8005358 <_dtoa_r+0x7f0>
 8005446:	9b02      	ldr	r3, [sp, #8]
 8005448:	e786      	b.n	8005358 <_dtoa_r+0x7f0>
 800544a:	2300      	movs	r3, #0
 800544c:	930a      	str	r3, [sp, #40]	@ 0x28
 800544e:	e788      	b.n	8005362 <_dtoa_r+0x7fa>
 8005450:	d09f      	beq.n	8005392 <_dtoa_r+0x82a>
 8005452:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005454:	331c      	adds	r3, #28
 8005456:	441a      	add	r2, r3
 8005458:	4498      	add	r8, r3
 800545a:	441e      	add	r6, r3
 800545c:	9209      	str	r2, [sp, #36]	@ 0x24
 800545e:	e798      	b.n	8005392 <_dtoa_r+0x82a>
 8005460:	4603      	mov	r3, r0
 8005462:	e7f6      	b.n	8005452 <_dtoa_r+0x8ea>
 8005464:	9b07      	ldr	r3, [sp, #28]
 8005466:	9704      	str	r7, [sp, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	dc20      	bgt.n	80054ae <_dtoa_r+0x946>
 800546c:	9308      	str	r3, [sp, #32]
 800546e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005470:	2b02      	cmp	r3, #2
 8005472:	dd1e      	ble.n	80054b2 <_dtoa_r+0x94a>
 8005474:	9b08      	ldr	r3, [sp, #32]
 8005476:	2b00      	cmp	r3, #0
 8005478:	f47f aebc 	bne.w	80051f4 <_dtoa_r+0x68c>
 800547c:	4621      	mov	r1, r4
 800547e:	2205      	movs	r2, #5
 8005480:	4658      	mov	r0, fp
 8005482:	f000 fa99 	bl	80059b8 <__multadd>
 8005486:	4601      	mov	r1, r0
 8005488:	4604      	mov	r4, r0
 800548a:	4648      	mov	r0, r9
 800548c:	f000 fcaa 	bl	8005de4 <__mcmp>
 8005490:	2800      	cmp	r0, #0
 8005492:	f77f aeaf 	ble.w	80051f4 <_dtoa_r+0x68c>
 8005496:	2331      	movs	r3, #49	@ 0x31
 8005498:	4656      	mov	r6, sl
 800549a:	f806 3b01 	strb.w	r3, [r6], #1
 800549e:	9b04      	ldr	r3, [sp, #16]
 80054a0:	3301      	adds	r3, #1
 80054a2:	9304      	str	r3, [sp, #16]
 80054a4:	e6aa      	b.n	80051fc <_dtoa_r+0x694>
 80054a6:	9c07      	ldr	r4, [sp, #28]
 80054a8:	9704      	str	r7, [sp, #16]
 80054aa:	4625      	mov	r5, r4
 80054ac:	e7f3      	b.n	8005496 <_dtoa_r+0x92e>
 80054ae:	9b07      	ldr	r3, [sp, #28]
 80054b0:	9308      	str	r3, [sp, #32]
 80054b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8104 	beq.w	80056c2 <_dtoa_r+0xb5a>
 80054ba:	2e00      	cmp	r6, #0
 80054bc:	dd05      	ble.n	80054ca <_dtoa_r+0x962>
 80054be:	4629      	mov	r1, r5
 80054c0:	4632      	mov	r2, r6
 80054c2:	4658      	mov	r0, fp
 80054c4:	f000 fc22 	bl	8005d0c <__lshift>
 80054c8:	4605      	mov	r5, r0
 80054ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d05a      	beq.n	8005586 <_dtoa_r+0xa1e>
 80054d0:	4658      	mov	r0, fp
 80054d2:	6869      	ldr	r1, [r5, #4]
 80054d4:	f000 fa0e 	bl	80058f4 <_Balloc>
 80054d8:	4606      	mov	r6, r0
 80054da:	b928      	cbnz	r0, 80054e8 <_dtoa_r+0x980>
 80054dc:	4602      	mov	r2, r0
 80054de:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80054e2:	4b83      	ldr	r3, [pc, #524]	@ (80056f0 <_dtoa_r+0xb88>)
 80054e4:	f7ff bb54 	b.w	8004b90 <_dtoa_r+0x28>
 80054e8:	692a      	ldr	r2, [r5, #16]
 80054ea:	f105 010c 	add.w	r1, r5, #12
 80054ee:	3202      	adds	r2, #2
 80054f0:	0092      	lsls	r2, r2, #2
 80054f2:	300c      	adds	r0, #12
 80054f4:	f000 fffa 	bl	80064ec <memcpy>
 80054f8:	2201      	movs	r2, #1
 80054fa:	4631      	mov	r1, r6
 80054fc:	4658      	mov	r0, fp
 80054fe:	f000 fc05 	bl	8005d0c <__lshift>
 8005502:	462f      	mov	r7, r5
 8005504:	4605      	mov	r5, r0
 8005506:	f10a 0301 	add.w	r3, sl, #1
 800550a:	9307      	str	r3, [sp, #28]
 800550c:	9b08      	ldr	r3, [sp, #32]
 800550e:	4453      	add	r3, sl
 8005510:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005512:	9b02      	ldr	r3, [sp, #8]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	930a      	str	r3, [sp, #40]	@ 0x28
 800551a:	9b07      	ldr	r3, [sp, #28]
 800551c:	4621      	mov	r1, r4
 800551e:	3b01      	subs	r3, #1
 8005520:	4648      	mov	r0, r9
 8005522:	9302      	str	r3, [sp, #8]
 8005524:	f7ff fa95 	bl	8004a52 <quorem>
 8005528:	4639      	mov	r1, r7
 800552a:	9008      	str	r0, [sp, #32]
 800552c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005530:	4648      	mov	r0, r9
 8005532:	f000 fc57 	bl	8005de4 <__mcmp>
 8005536:	462a      	mov	r2, r5
 8005538:	9009      	str	r0, [sp, #36]	@ 0x24
 800553a:	4621      	mov	r1, r4
 800553c:	4658      	mov	r0, fp
 800553e:	f000 fc6d 	bl	8005e1c <__mdiff>
 8005542:	68c2      	ldr	r2, [r0, #12]
 8005544:	4606      	mov	r6, r0
 8005546:	bb02      	cbnz	r2, 800558a <_dtoa_r+0xa22>
 8005548:	4601      	mov	r1, r0
 800554a:	4648      	mov	r0, r9
 800554c:	f000 fc4a 	bl	8005de4 <__mcmp>
 8005550:	4602      	mov	r2, r0
 8005552:	4631      	mov	r1, r6
 8005554:	4658      	mov	r0, fp
 8005556:	920c      	str	r2, [sp, #48]	@ 0x30
 8005558:	f000 fa0c 	bl	8005974 <_Bfree>
 800555c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800555e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005560:	9e07      	ldr	r6, [sp, #28]
 8005562:	ea43 0102 	orr.w	r1, r3, r2
 8005566:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005568:	4319      	orrs	r1, r3
 800556a:	d110      	bne.n	800558e <_dtoa_r+0xa26>
 800556c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005570:	d029      	beq.n	80055c6 <_dtoa_r+0xa5e>
 8005572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005574:	2b00      	cmp	r3, #0
 8005576:	dd02      	ble.n	800557e <_dtoa_r+0xa16>
 8005578:	9b08      	ldr	r3, [sp, #32]
 800557a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800557e:	9b02      	ldr	r3, [sp, #8]
 8005580:	f883 8000 	strb.w	r8, [r3]
 8005584:	e63b      	b.n	80051fe <_dtoa_r+0x696>
 8005586:	4628      	mov	r0, r5
 8005588:	e7bb      	b.n	8005502 <_dtoa_r+0x99a>
 800558a:	2201      	movs	r2, #1
 800558c:	e7e1      	b.n	8005552 <_dtoa_r+0x9ea>
 800558e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005590:	2b00      	cmp	r3, #0
 8005592:	db04      	blt.n	800559e <_dtoa_r+0xa36>
 8005594:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005596:	430b      	orrs	r3, r1
 8005598:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800559a:	430b      	orrs	r3, r1
 800559c:	d120      	bne.n	80055e0 <_dtoa_r+0xa78>
 800559e:	2a00      	cmp	r2, #0
 80055a0:	dded      	ble.n	800557e <_dtoa_r+0xa16>
 80055a2:	4649      	mov	r1, r9
 80055a4:	2201      	movs	r2, #1
 80055a6:	4658      	mov	r0, fp
 80055a8:	f000 fbb0 	bl	8005d0c <__lshift>
 80055ac:	4621      	mov	r1, r4
 80055ae:	4681      	mov	r9, r0
 80055b0:	f000 fc18 	bl	8005de4 <__mcmp>
 80055b4:	2800      	cmp	r0, #0
 80055b6:	dc03      	bgt.n	80055c0 <_dtoa_r+0xa58>
 80055b8:	d1e1      	bne.n	800557e <_dtoa_r+0xa16>
 80055ba:	f018 0f01 	tst.w	r8, #1
 80055be:	d0de      	beq.n	800557e <_dtoa_r+0xa16>
 80055c0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80055c4:	d1d8      	bne.n	8005578 <_dtoa_r+0xa10>
 80055c6:	2339      	movs	r3, #57	@ 0x39
 80055c8:	9a02      	ldr	r2, [sp, #8]
 80055ca:	7013      	strb	r3, [r2, #0]
 80055cc:	4633      	mov	r3, r6
 80055ce:	461e      	mov	r6, r3
 80055d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	2a39      	cmp	r2, #57	@ 0x39
 80055d8:	d052      	beq.n	8005680 <_dtoa_r+0xb18>
 80055da:	3201      	adds	r2, #1
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	e60e      	b.n	80051fe <_dtoa_r+0x696>
 80055e0:	2a00      	cmp	r2, #0
 80055e2:	dd07      	ble.n	80055f4 <_dtoa_r+0xa8c>
 80055e4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80055e8:	d0ed      	beq.n	80055c6 <_dtoa_r+0xa5e>
 80055ea:	9a02      	ldr	r2, [sp, #8]
 80055ec:	f108 0301 	add.w	r3, r8, #1
 80055f0:	7013      	strb	r3, [r2, #0]
 80055f2:	e604      	b.n	80051fe <_dtoa_r+0x696>
 80055f4:	9b07      	ldr	r3, [sp, #28]
 80055f6:	9a07      	ldr	r2, [sp, #28]
 80055f8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80055fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055fe:	4293      	cmp	r3, r2
 8005600:	d028      	beq.n	8005654 <_dtoa_r+0xaec>
 8005602:	4649      	mov	r1, r9
 8005604:	2300      	movs	r3, #0
 8005606:	220a      	movs	r2, #10
 8005608:	4658      	mov	r0, fp
 800560a:	f000 f9d5 	bl	80059b8 <__multadd>
 800560e:	42af      	cmp	r7, r5
 8005610:	4681      	mov	r9, r0
 8005612:	f04f 0300 	mov.w	r3, #0
 8005616:	f04f 020a 	mov.w	r2, #10
 800561a:	4639      	mov	r1, r7
 800561c:	4658      	mov	r0, fp
 800561e:	d107      	bne.n	8005630 <_dtoa_r+0xac8>
 8005620:	f000 f9ca 	bl	80059b8 <__multadd>
 8005624:	4607      	mov	r7, r0
 8005626:	4605      	mov	r5, r0
 8005628:	9b07      	ldr	r3, [sp, #28]
 800562a:	3301      	adds	r3, #1
 800562c:	9307      	str	r3, [sp, #28]
 800562e:	e774      	b.n	800551a <_dtoa_r+0x9b2>
 8005630:	f000 f9c2 	bl	80059b8 <__multadd>
 8005634:	4629      	mov	r1, r5
 8005636:	4607      	mov	r7, r0
 8005638:	2300      	movs	r3, #0
 800563a:	220a      	movs	r2, #10
 800563c:	4658      	mov	r0, fp
 800563e:	f000 f9bb 	bl	80059b8 <__multadd>
 8005642:	4605      	mov	r5, r0
 8005644:	e7f0      	b.n	8005628 <_dtoa_r+0xac0>
 8005646:	9b08      	ldr	r3, [sp, #32]
 8005648:	2700      	movs	r7, #0
 800564a:	2b00      	cmp	r3, #0
 800564c:	bfcc      	ite	gt
 800564e:	461e      	movgt	r6, r3
 8005650:	2601      	movle	r6, #1
 8005652:	4456      	add	r6, sl
 8005654:	4649      	mov	r1, r9
 8005656:	2201      	movs	r2, #1
 8005658:	4658      	mov	r0, fp
 800565a:	f000 fb57 	bl	8005d0c <__lshift>
 800565e:	4621      	mov	r1, r4
 8005660:	4681      	mov	r9, r0
 8005662:	f000 fbbf 	bl	8005de4 <__mcmp>
 8005666:	2800      	cmp	r0, #0
 8005668:	dcb0      	bgt.n	80055cc <_dtoa_r+0xa64>
 800566a:	d102      	bne.n	8005672 <_dtoa_r+0xb0a>
 800566c:	f018 0f01 	tst.w	r8, #1
 8005670:	d1ac      	bne.n	80055cc <_dtoa_r+0xa64>
 8005672:	4633      	mov	r3, r6
 8005674:	461e      	mov	r6, r3
 8005676:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800567a:	2a30      	cmp	r2, #48	@ 0x30
 800567c:	d0fa      	beq.n	8005674 <_dtoa_r+0xb0c>
 800567e:	e5be      	b.n	80051fe <_dtoa_r+0x696>
 8005680:	459a      	cmp	sl, r3
 8005682:	d1a4      	bne.n	80055ce <_dtoa_r+0xa66>
 8005684:	9b04      	ldr	r3, [sp, #16]
 8005686:	3301      	adds	r3, #1
 8005688:	9304      	str	r3, [sp, #16]
 800568a:	2331      	movs	r3, #49	@ 0x31
 800568c:	f88a 3000 	strb.w	r3, [sl]
 8005690:	e5b5      	b.n	80051fe <_dtoa_r+0x696>
 8005692:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005694:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80056f4 <_dtoa_r+0xb8c>
 8005698:	b11b      	cbz	r3, 80056a2 <_dtoa_r+0xb3a>
 800569a:	f10a 0308 	add.w	r3, sl, #8
 800569e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	4650      	mov	r0, sl
 80056a4:	b017      	add	sp, #92	@ 0x5c
 80056a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	f77f ae3d 	ble.w	800532c <_dtoa_r+0x7c4>
 80056b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80056b6:	2001      	movs	r0, #1
 80056b8:	e65b      	b.n	8005372 <_dtoa_r+0x80a>
 80056ba:	9b08      	ldr	r3, [sp, #32]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f77f aed6 	ble.w	800546e <_dtoa_r+0x906>
 80056c2:	4656      	mov	r6, sl
 80056c4:	4621      	mov	r1, r4
 80056c6:	4648      	mov	r0, r9
 80056c8:	f7ff f9c3 	bl	8004a52 <quorem>
 80056cc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80056d0:	9b08      	ldr	r3, [sp, #32]
 80056d2:	f806 8b01 	strb.w	r8, [r6], #1
 80056d6:	eba6 020a 	sub.w	r2, r6, sl
 80056da:	4293      	cmp	r3, r2
 80056dc:	ddb3      	ble.n	8005646 <_dtoa_r+0xade>
 80056de:	4649      	mov	r1, r9
 80056e0:	2300      	movs	r3, #0
 80056e2:	220a      	movs	r2, #10
 80056e4:	4658      	mov	r0, fp
 80056e6:	f000 f967 	bl	80059b8 <__multadd>
 80056ea:	4681      	mov	r9, r0
 80056ec:	e7ea      	b.n	80056c4 <_dtoa_r+0xb5c>
 80056ee:	bf00      	nop
 80056f0:	08006d34 	.word	0x08006d34
 80056f4:	08006cb8 	.word	0x08006cb8

080056f8 <_free_r>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	4605      	mov	r5, r0
 80056fc:	2900      	cmp	r1, #0
 80056fe:	d040      	beq.n	8005782 <_free_r+0x8a>
 8005700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005704:	1f0c      	subs	r4, r1, #4
 8005706:	2b00      	cmp	r3, #0
 8005708:	bfb8      	it	lt
 800570a:	18e4      	addlt	r4, r4, r3
 800570c:	f000 f8e6 	bl	80058dc <__malloc_lock>
 8005710:	4a1c      	ldr	r2, [pc, #112]	@ (8005784 <_free_r+0x8c>)
 8005712:	6813      	ldr	r3, [r2, #0]
 8005714:	b933      	cbnz	r3, 8005724 <_free_r+0x2c>
 8005716:	6063      	str	r3, [r4, #4]
 8005718:	6014      	str	r4, [r2, #0]
 800571a:	4628      	mov	r0, r5
 800571c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005720:	f000 b8e2 	b.w	80058e8 <__malloc_unlock>
 8005724:	42a3      	cmp	r3, r4
 8005726:	d908      	bls.n	800573a <_free_r+0x42>
 8005728:	6820      	ldr	r0, [r4, #0]
 800572a:	1821      	adds	r1, r4, r0
 800572c:	428b      	cmp	r3, r1
 800572e:	bf01      	itttt	eq
 8005730:	6819      	ldreq	r1, [r3, #0]
 8005732:	685b      	ldreq	r3, [r3, #4]
 8005734:	1809      	addeq	r1, r1, r0
 8005736:	6021      	streq	r1, [r4, #0]
 8005738:	e7ed      	b.n	8005716 <_free_r+0x1e>
 800573a:	461a      	mov	r2, r3
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	b10b      	cbz	r3, 8005744 <_free_r+0x4c>
 8005740:	42a3      	cmp	r3, r4
 8005742:	d9fa      	bls.n	800573a <_free_r+0x42>
 8005744:	6811      	ldr	r1, [r2, #0]
 8005746:	1850      	adds	r0, r2, r1
 8005748:	42a0      	cmp	r0, r4
 800574a:	d10b      	bne.n	8005764 <_free_r+0x6c>
 800574c:	6820      	ldr	r0, [r4, #0]
 800574e:	4401      	add	r1, r0
 8005750:	1850      	adds	r0, r2, r1
 8005752:	4283      	cmp	r3, r0
 8005754:	6011      	str	r1, [r2, #0]
 8005756:	d1e0      	bne.n	800571a <_free_r+0x22>
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	4408      	add	r0, r1
 800575e:	6010      	str	r0, [r2, #0]
 8005760:	6053      	str	r3, [r2, #4]
 8005762:	e7da      	b.n	800571a <_free_r+0x22>
 8005764:	d902      	bls.n	800576c <_free_r+0x74>
 8005766:	230c      	movs	r3, #12
 8005768:	602b      	str	r3, [r5, #0]
 800576a:	e7d6      	b.n	800571a <_free_r+0x22>
 800576c:	6820      	ldr	r0, [r4, #0]
 800576e:	1821      	adds	r1, r4, r0
 8005770:	428b      	cmp	r3, r1
 8005772:	bf01      	itttt	eq
 8005774:	6819      	ldreq	r1, [r3, #0]
 8005776:	685b      	ldreq	r3, [r3, #4]
 8005778:	1809      	addeq	r1, r1, r0
 800577a:	6021      	streq	r1, [r4, #0]
 800577c:	6063      	str	r3, [r4, #4]
 800577e:	6054      	str	r4, [r2, #4]
 8005780:	e7cb      	b.n	800571a <_free_r+0x22>
 8005782:	bd38      	pop	{r3, r4, r5, pc}
 8005784:	200003e8 	.word	0x200003e8

08005788 <malloc>:
 8005788:	4b02      	ldr	r3, [pc, #8]	@ (8005794 <malloc+0xc>)
 800578a:	4601      	mov	r1, r0
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	f000 b825 	b.w	80057dc <_malloc_r>
 8005792:	bf00      	nop
 8005794:	20000030 	.word	0x20000030

08005798 <sbrk_aligned>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	4e0f      	ldr	r6, [pc, #60]	@ (80057d8 <sbrk_aligned+0x40>)
 800579c:	460c      	mov	r4, r1
 800579e:	6831      	ldr	r1, [r6, #0]
 80057a0:	4605      	mov	r5, r0
 80057a2:	b911      	cbnz	r1, 80057aa <sbrk_aligned+0x12>
 80057a4:	f000 fe92 	bl	80064cc <_sbrk_r>
 80057a8:	6030      	str	r0, [r6, #0]
 80057aa:	4621      	mov	r1, r4
 80057ac:	4628      	mov	r0, r5
 80057ae:	f000 fe8d 	bl	80064cc <_sbrk_r>
 80057b2:	1c43      	adds	r3, r0, #1
 80057b4:	d103      	bne.n	80057be <sbrk_aligned+0x26>
 80057b6:	f04f 34ff 	mov.w	r4, #4294967295
 80057ba:	4620      	mov	r0, r4
 80057bc:	bd70      	pop	{r4, r5, r6, pc}
 80057be:	1cc4      	adds	r4, r0, #3
 80057c0:	f024 0403 	bic.w	r4, r4, #3
 80057c4:	42a0      	cmp	r0, r4
 80057c6:	d0f8      	beq.n	80057ba <sbrk_aligned+0x22>
 80057c8:	1a21      	subs	r1, r4, r0
 80057ca:	4628      	mov	r0, r5
 80057cc:	f000 fe7e 	bl	80064cc <_sbrk_r>
 80057d0:	3001      	adds	r0, #1
 80057d2:	d1f2      	bne.n	80057ba <sbrk_aligned+0x22>
 80057d4:	e7ef      	b.n	80057b6 <sbrk_aligned+0x1e>
 80057d6:	bf00      	nop
 80057d8:	200003e4 	.word	0x200003e4

080057dc <_malloc_r>:
 80057dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057e0:	1ccd      	adds	r5, r1, #3
 80057e2:	f025 0503 	bic.w	r5, r5, #3
 80057e6:	3508      	adds	r5, #8
 80057e8:	2d0c      	cmp	r5, #12
 80057ea:	bf38      	it	cc
 80057ec:	250c      	movcc	r5, #12
 80057ee:	2d00      	cmp	r5, #0
 80057f0:	4606      	mov	r6, r0
 80057f2:	db01      	blt.n	80057f8 <_malloc_r+0x1c>
 80057f4:	42a9      	cmp	r1, r5
 80057f6:	d904      	bls.n	8005802 <_malloc_r+0x26>
 80057f8:	230c      	movs	r3, #12
 80057fa:	6033      	str	r3, [r6, #0]
 80057fc:	2000      	movs	r0, #0
 80057fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005802:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058d8 <_malloc_r+0xfc>
 8005806:	f000 f869 	bl	80058dc <__malloc_lock>
 800580a:	f8d8 3000 	ldr.w	r3, [r8]
 800580e:	461c      	mov	r4, r3
 8005810:	bb44      	cbnz	r4, 8005864 <_malloc_r+0x88>
 8005812:	4629      	mov	r1, r5
 8005814:	4630      	mov	r0, r6
 8005816:	f7ff ffbf 	bl	8005798 <sbrk_aligned>
 800581a:	1c43      	adds	r3, r0, #1
 800581c:	4604      	mov	r4, r0
 800581e:	d158      	bne.n	80058d2 <_malloc_r+0xf6>
 8005820:	f8d8 4000 	ldr.w	r4, [r8]
 8005824:	4627      	mov	r7, r4
 8005826:	2f00      	cmp	r7, #0
 8005828:	d143      	bne.n	80058b2 <_malloc_r+0xd6>
 800582a:	2c00      	cmp	r4, #0
 800582c:	d04b      	beq.n	80058c6 <_malloc_r+0xea>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	4639      	mov	r1, r7
 8005832:	4630      	mov	r0, r6
 8005834:	eb04 0903 	add.w	r9, r4, r3
 8005838:	f000 fe48 	bl	80064cc <_sbrk_r>
 800583c:	4581      	cmp	r9, r0
 800583e:	d142      	bne.n	80058c6 <_malloc_r+0xea>
 8005840:	6821      	ldr	r1, [r4, #0]
 8005842:	4630      	mov	r0, r6
 8005844:	1a6d      	subs	r5, r5, r1
 8005846:	4629      	mov	r1, r5
 8005848:	f7ff ffa6 	bl	8005798 <sbrk_aligned>
 800584c:	3001      	adds	r0, #1
 800584e:	d03a      	beq.n	80058c6 <_malloc_r+0xea>
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	442b      	add	r3, r5
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	f8d8 3000 	ldr.w	r3, [r8]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	bb62      	cbnz	r2, 80058b8 <_malloc_r+0xdc>
 800585e:	f8c8 7000 	str.w	r7, [r8]
 8005862:	e00f      	b.n	8005884 <_malloc_r+0xa8>
 8005864:	6822      	ldr	r2, [r4, #0]
 8005866:	1b52      	subs	r2, r2, r5
 8005868:	d420      	bmi.n	80058ac <_malloc_r+0xd0>
 800586a:	2a0b      	cmp	r2, #11
 800586c:	d917      	bls.n	800589e <_malloc_r+0xc2>
 800586e:	1961      	adds	r1, r4, r5
 8005870:	42a3      	cmp	r3, r4
 8005872:	6025      	str	r5, [r4, #0]
 8005874:	bf18      	it	ne
 8005876:	6059      	strne	r1, [r3, #4]
 8005878:	6863      	ldr	r3, [r4, #4]
 800587a:	bf08      	it	eq
 800587c:	f8c8 1000 	streq.w	r1, [r8]
 8005880:	5162      	str	r2, [r4, r5]
 8005882:	604b      	str	r3, [r1, #4]
 8005884:	4630      	mov	r0, r6
 8005886:	f000 f82f 	bl	80058e8 <__malloc_unlock>
 800588a:	f104 000b 	add.w	r0, r4, #11
 800588e:	1d23      	adds	r3, r4, #4
 8005890:	f020 0007 	bic.w	r0, r0, #7
 8005894:	1ac2      	subs	r2, r0, r3
 8005896:	bf1c      	itt	ne
 8005898:	1a1b      	subne	r3, r3, r0
 800589a:	50a3      	strne	r3, [r4, r2]
 800589c:	e7af      	b.n	80057fe <_malloc_r+0x22>
 800589e:	6862      	ldr	r2, [r4, #4]
 80058a0:	42a3      	cmp	r3, r4
 80058a2:	bf0c      	ite	eq
 80058a4:	f8c8 2000 	streq.w	r2, [r8]
 80058a8:	605a      	strne	r2, [r3, #4]
 80058aa:	e7eb      	b.n	8005884 <_malloc_r+0xa8>
 80058ac:	4623      	mov	r3, r4
 80058ae:	6864      	ldr	r4, [r4, #4]
 80058b0:	e7ae      	b.n	8005810 <_malloc_r+0x34>
 80058b2:	463c      	mov	r4, r7
 80058b4:	687f      	ldr	r7, [r7, #4]
 80058b6:	e7b6      	b.n	8005826 <_malloc_r+0x4a>
 80058b8:	461a      	mov	r2, r3
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	42a3      	cmp	r3, r4
 80058be:	d1fb      	bne.n	80058b8 <_malloc_r+0xdc>
 80058c0:	2300      	movs	r3, #0
 80058c2:	6053      	str	r3, [r2, #4]
 80058c4:	e7de      	b.n	8005884 <_malloc_r+0xa8>
 80058c6:	230c      	movs	r3, #12
 80058c8:	4630      	mov	r0, r6
 80058ca:	6033      	str	r3, [r6, #0]
 80058cc:	f000 f80c 	bl	80058e8 <__malloc_unlock>
 80058d0:	e794      	b.n	80057fc <_malloc_r+0x20>
 80058d2:	6005      	str	r5, [r0, #0]
 80058d4:	e7d6      	b.n	8005884 <_malloc_r+0xa8>
 80058d6:	bf00      	nop
 80058d8:	200003e8 	.word	0x200003e8

080058dc <__malloc_lock>:
 80058dc:	4801      	ldr	r0, [pc, #4]	@ (80058e4 <__malloc_lock+0x8>)
 80058de:	f7ff b8a8 	b.w	8004a32 <__retarget_lock_acquire_recursive>
 80058e2:	bf00      	nop
 80058e4:	200003e0 	.word	0x200003e0

080058e8 <__malloc_unlock>:
 80058e8:	4801      	ldr	r0, [pc, #4]	@ (80058f0 <__malloc_unlock+0x8>)
 80058ea:	f7ff b8a3 	b.w	8004a34 <__retarget_lock_release_recursive>
 80058ee:	bf00      	nop
 80058f0:	200003e0 	.word	0x200003e0

080058f4 <_Balloc>:
 80058f4:	b570      	push	{r4, r5, r6, lr}
 80058f6:	69c6      	ldr	r6, [r0, #28]
 80058f8:	4604      	mov	r4, r0
 80058fa:	460d      	mov	r5, r1
 80058fc:	b976      	cbnz	r6, 800591c <_Balloc+0x28>
 80058fe:	2010      	movs	r0, #16
 8005900:	f7ff ff42 	bl	8005788 <malloc>
 8005904:	4602      	mov	r2, r0
 8005906:	61e0      	str	r0, [r4, #28]
 8005908:	b920      	cbnz	r0, 8005914 <_Balloc+0x20>
 800590a:	216b      	movs	r1, #107	@ 0x6b
 800590c:	4b17      	ldr	r3, [pc, #92]	@ (800596c <_Balloc+0x78>)
 800590e:	4818      	ldr	r0, [pc, #96]	@ (8005970 <_Balloc+0x7c>)
 8005910:	f000 fdfa 	bl	8006508 <__assert_func>
 8005914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005918:	6006      	str	r6, [r0, #0]
 800591a:	60c6      	str	r6, [r0, #12]
 800591c:	69e6      	ldr	r6, [r4, #28]
 800591e:	68f3      	ldr	r3, [r6, #12]
 8005920:	b183      	cbz	r3, 8005944 <_Balloc+0x50>
 8005922:	69e3      	ldr	r3, [r4, #28]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800592a:	b9b8      	cbnz	r0, 800595c <_Balloc+0x68>
 800592c:	2101      	movs	r1, #1
 800592e:	fa01 f605 	lsl.w	r6, r1, r5
 8005932:	1d72      	adds	r2, r6, #5
 8005934:	4620      	mov	r0, r4
 8005936:	0092      	lsls	r2, r2, #2
 8005938:	f000 fe04 	bl	8006544 <_calloc_r>
 800593c:	b160      	cbz	r0, 8005958 <_Balloc+0x64>
 800593e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005942:	e00e      	b.n	8005962 <_Balloc+0x6e>
 8005944:	2221      	movs	r2, #33	@ 0x21
 8005946:	2104      	movs	r1, #4
 8005948:	4620      	mov	r0, r4
 800594a:	f000 fdfb 	bl	8006544 <_calloc_r>
 800594e:	69e3      	ldr	r3, [r4, #28]
 8005950:	60f0      	str	r0, [r6, #12]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e4      	bne.n	8005922 <_Balloc+0x2e>
 8005958:	2000      	movs	r0, #0
 800595a:	bd70      	pop	{r4, r5, r6, pc}
 800595c:	6802      	ldr	r2, [r0, #0]
 800595e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005962:	2300      	movs	r3, #0
 8005964:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005968:	e7f7      	b.n	800595a <_Balloc+0x66>
 800596a:	bf00      	nop
 800596c:	08006cc5 	.word	0x08006cc5
 8005970:	08006d45 	.word	0x08006d45

08005974 <_Bfree>:
 8005974:	b570      	push	{r4, r5, r6, lr}
 8005976:	69c6      	ldr	r6, [r0, #28]
 8005978:	4605      	mov	r5, r0
 800597a:	460c      	mov	r4, r1
 800597c:	b976      	cbnz	r6, 800599c <_Bfree+0x28>
 800597e:	2010      	movs	r0, #16
 8005980:	f7ff ff02 	bl	8005788 <malloc>
 8005984:	4602      	mov	r2, r0
 8005986:	61e8      	str	r0, [r5, #28]
 8005988:	b920      	cbnz	r0, 8005994 <_Bfree+0x20>
 800598a:	218f      	movs	r1, #143	@ 0x8f
 800598c:	4b08      	ldr	r3, [pc, #32]	@ (80059b0 <_Bfree+0x3c>)
 800598e:	4809      	ldr	r0, [pc, #36]	@ (80059b4 <_Bfree+0x40>)
 8005990:	f000 fdba 	bl	8006508 <__assert_func>
 8005994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005998:	6006      	str	r6, [r0, #0]
 800599a:	60c6      	str	r6, [r0, #12]
 800599c:	b13c      	cbz	r4, 80059ae <_Bfree+0x3a>
 800599e:	69eb      	ldr	r3, [r5, #28]
 80059a0:	6862      	ldr	r2, [r4, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059a8:	6021      	str	r1, [r4, #0]
 80059aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80059ae:	bd70      	pop	{r4, r5, r6, pc}
 80059b0:	08006cc5 	.word	0x08006cc5
 80059b4:	08006d45 	.word	0x08006d45

080059b8 <__multadd>:
 80059b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059bc:	4607      	mov	r7, r0
 80059be:	460c      	mov	r4, r1
 80059c0:	461e      	mov	r6, r3
 80059c2:	2000      	movs	r0, #0
 80059c4:	690d      	ldr	r5, [r1, #16]
 80059c6:	f101 0c14 	add.w	ip, r1, #20
 80059ca:	f8dc 3000 	ldr.w	r3, [ip]
 80059ce:	3001      	adds	r0, #1
 80059d0:	b299      	uxth	r1, r3
 80059d2:	fb02 6101 	mla	r1, r2, r1, r6
 80059d6:	0c1e      	lsrs	r6, r3, #16
 80059d8:	0c0b      	lsrs	r3, r1, #16
 80059da:	fb02 3306 	mla	r3, r2, r6, r3
 80059de:	b289      	uxth	r1, r1
 80059e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80059e4:	4285      	cmp	r5, r0
 80059e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80059ea:	f84c 1b04 	str.w	r1, [ip], #4
 80059ee:	dcec      	bgt.n	80059ca <__multadd+0x12>
 80059f0:	b30e      	cbz	r6, 8005a36 <__multadd+0x7e>
 80059f2:	68a3      	ldr	r3, [r4, #8]
 80059f4:	42ab      	cmp	r3, r5
 80059f6:	dc19      	bgt.n	8005a2c <__multadd+0x74>
 80059f8:	6861      	ldr	r1, [r4, #4]
 80059fa:	4638      	mov	r0, r7
 80059fc:	3101      	adds	r1, #1
 80059fe:	f7ff ff79 	bl	80058f4 <_Balloc>
 8005a02:	4680      	mov	r8, r0
 8005a04:	b928      	cbnz	r0, 8005a12 <__multadd+0x5a>
 8005a06:	4602      	mov	r2, r0
 8005a08:	21ba      	movs	r1, #186	@ 0xba
 8005a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a3c <__multadd+0x84>)
 8005a0c:	480c      	ldr	r0, [pc, #48]	@ (8005a40 <__multadd+0x88>)
 8005a0e:	f000 fd7b 	bl	8006508 <__assert_func>
 8005a12:	6922      	ldr	r2, [r4, #16]
 8005a14:	f104 010c 	add.w	r1, r4, #12
 8005a18:	3202      	adds	r2, #2
 8005a1a:	0092      	lsls	r2, r2, #2
 8005a1c:	300c      	adds	r0, #12
 8005a1e:	f000 fd65 	bl	80064ec <memcpy>
 8005a22:	4621      	mov	r1, r4
 8005a24:	4638      	mov	r0, r7
 8005a26:	f7ff ffa5 	bl	8005974 <_Bfree>
 8005a2a:	4644      	mov	r4, r8
 8005a2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a30:	3501      	adds	r5, #1
 8005a32:	615e      	str	r6, [r3, #20]
 8005a34:	6125      	str	r5, [r4, #16]
 8005a36:	4620      	mov	r0, r4
 8005a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a3c:	08006d34 	.word	0x08006d34
 8005a40:	08006d45 	.word	0x08006d45

08005a44 <__hi0bits>:
 8005a44:	4603      	mov	r3, r0
 8005a46:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005a4a:	bf3a      	itte	cc
 8005a4c:	0403      	lslcc	r3, r0, #16
 8005a4e:	2010      	movcc	r0, #16
 8005a50:	2000      	movcs	r0, #0
 8005a52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a56:	bf3c      	itt	cc
 8005a58:	021b      	lslcc	r3, r3, #8
 8005a5a:	3008      	addcc	r0, #8
 8005a5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a60:	bf3c      	itt	cc
 8005a62:	011b      	lslcc	r3, r3, #4
 8005a64:	3004      	addcc	r0, #4
 8005a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a6a:	bf3c      	itt	cc
 8005a6c:	009b      	lslcc	r3, r3, #2
 8005a6e:	3002      	addcc	r0, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	db05      	blt.n	8005a80 <__hi0bits+0x3c>
 8005a74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005a78:	f100 0001 	add.w	r0, r0, #1
 8005a7c:	bf08      	it	eq
 8005a7e:	2020      	moveq	r0, #32
 8005a80:	4770      	bx	lr

08005a82 <__lo0bits>:
 8005a82:	6803      	ldr	r3, [r0, #0]
 8005a84:	4602      	mov	r2, r0
 8005a86:	f013 0007 	ands.w	r0, r3, #7
 8005a8a:	d00b      	beq.n	8005aa4 <__lo0bits+0x22>
 8005a8c:	07d9      	lsls	r1, r3, #31
 8005a8e:	d421      	bmi.n	8005ad4 <__lo0bits+0x52>
 8005a90:	0798      	lsls	r0, r3, #30
 8005a92:	bf49      	itett	mi
 8005a94:	085b      	lsrmi	r3, r3, #1
 8005a96:	089b      	lsrpl	r3, r3, #2
 8005a98:	2001      	movmi	r0, #1
 8005a9a:	6013      	strmi	r3, [r2, #0]
 8005a9c:	bf5c      	itt	pl
 8005a9e:	2002      	movpl	r0, #2
 8005aa0:	6013      	strpl	r3, [r2, #0]
 8005aa2:	4770      	bx	lr
 8005aa4:	b299      	uxth	r1, r3
 8005aa6:	b909      	cbnz	r1, 8005aac <__lo0bits+0x2a>
 8005aa8:	2010      	movs	r0, #16
 8005aaa:	0c1b      	lsrs	r3, r3, #16
 8005aac:	b2d9      	uxtb	r1, r3
 8005aae:	b909      	cbnz	r1, 8005ab4 <__lo0bits+0x32>
 8005ab0:	3008      	adds	r0, #8
 8005ab2:	0a1b      	lsrs	r3, r3, #8
 8005ab4:	0719      	lsls	r1, r3, #28
 8005ab6:	bf04      	itt	eq
 8005ab8:	091b      	lsreq	r3, r3, #4
 8005aba:	3004      	addeq	r0, #4
 8005abc:	0799      	lsls	r1, r3, #30
 8005abe:	bf04      	itt	eq
 8005ac0:	089b      	lsreq	r3, r3, #2
 8005ac2:	3002      	addeq	r0, #2
 8005ac4:	07d9      	lsls	r1, r3, #31
 8005ac6:	d403      	bmi.n	8005ad0 <__lo0bits+0x4e>
 8005ac8:	085b      	lsrs	r3, r3, #1
 8005aca:	f100 0001 	add.w	r0, r0, #1
 8005ace:	d003      	beq.n	8005ad8 <__lo0bits+0x56>
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	4770      	bx	lr
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	4770      	bx	lr
 8005ad8:	2020      	movs	r0, #32
 8005ada:	4770      	bx	lr

08005adc <__i2b>:
 8005adc:	b510      	push	{r4, lr}
 8005ade:	460c      	mov	r4, r1
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	f7ff ff07 	bl	80058f4 <_Balloc>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	b928      	cbnz	r0, 8005af6 <__i2b+0x1a>
 8005aea:	f240 1145 	movw	r1, #325	@ 0x145
 8005aee:	4b04      	ldr	r3, [pc, #16]	@ (8005b00 <__i2b+0x24>)
 8005af0:	4804      	ldr	r0, [pc, #16]	@ (8005b04 <__i2b+0x28>)
 8005af2:	f000 fd09 	bl	8006508 <__assert_func>
 8005af6:	2301      	movs	r3, #1
 8005af8:	6144      	str	r4, [r0, #20]
 8005afa:	6103      	str	r3, [r0, #16]
 8005afc:	bd10      	pop	{r4, pc}
 8005afe:	bf00      	nop
 8005b00:	08006d34 	.word	0x08006d34
 8005b04:	08006d45 	.word	0x08006d45

08005b08 <__multiply>:
 8005b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0c:	4614      	mov	r4, r2
 8005b0e:	690a      	ldr	r2, [r1, #16]
 8005b10:	6923      	ldr	r3, [r4, #16]
 8005b12:	460f      	mov	r7, r1
 8005b14:	429a      	cmp	r2, r3
 8005b16:	bfa2      	ittt	ge
 8005b18:	4623      	movge	r3, r4
 8005b1a:	460c      	movge	r4, r1
 8005b1c:	461f      	movge	r7, r3
 8005b1e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005b22:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005b26:	68a3      	ldr	r3, [r4, #8]
 8005b28:	6861      	ldr	r1, [r4, #4]
 8005b2a:	eb0a 0609 	add.w	r6, sl, r9
 8005b2e:	42b3      	cmp	r3, r6
 8005b30:	b085      	sub	sp, #20
 8005b32:	bfb8      	it	lt
 8005b34:	3101      	addlt	r1, #1
 8005b36:	f7ff fedd 	bl	80058f4 <_Balloc>
 8005b3a:	b930      	cbnz	r0, 8005b4a <__multiply+0x42>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005b42:	4b43      	ldr	r3, [pc, #268]	@ (8005c50 <__multiply+0x148>)
 8005b44:	4843      	ldr	r0, [pc, #268]	@ (8005c54 <__multiply+0x14c>)
 8005b46:	f000 fcdf 	bl	8006508 <__assert_func>
 8005b4a:	f100 0514 	add.w	r5, r0, #20
 8005b4e:	462b      	mov	r3, r5
 8005b50:	2200      	movs	r2, #0
 8005b52:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005b56:	4543      	cmp	r3, r8
 8005b58:	d321      	bcc.n	8005b9e <__multiply+0x96>
 8005b5a:	f107 0114 	add.w	r1, r7, #20
 8005b5e:	f104 0214 	add.w	r2, r4, #20
 8005b62:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005b66:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005b6a:	9302      	str	r3, [sp, #8]
 8005b6c:	1b13      	subs	r3, r2, r4
 8005b6e:	3b15      	subs	r3, #21
 8005b70:	f023 0303 	bic.w	r3, r3, #3
 8005b74:	3304      	adds	r3, #4
 8005b76:	f104 0715 	add.w	r7, r4, #21
 8005b7a:	42ba      	cmp	r2, r7
 8005b7c:	bf38      	it	cc
 8005b7e:	2304      	movcc	r3, #4
 8005b80:	9301      	str	r3, [sp, #4]
 8005b82:	9b02      	ldr	r3, [sp, #8]
 8005b84:	9103      	str	r1, [sp, #12]
 8005b86:	428b      	cmp	r3, r1
 8005b88:	d80c      	bhi.n	8005ba4 <__multiply+0x9c>
 8005b8a:	2e00      	cmp	r6, #0
 8005b8c:	dd03      	ble.n	8005b96 <__multiply+0x8e>
 8005b8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d05a      	beq.n	8005c4c <__multiply+0x144>
 8005b96:	6106      	str	r6, [r0, #16]
 8005b98:	b005      	add	sp, #20
 8005b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b9e:	f843 2b04 	str.w	r2, [r3], #4
 8005ba2:	e7d8      	b.n	8005b56 <__multiply+0x4e>
 8005ba4:	f8b1 a000 	ldrh.w	sl, [r1]
 8005ba8:	f1ba 0f00 	cmp.w	sl, #0
 8005bac:	d023      	beq.n	8005bf6 <__multiply+0xee>
 8005bae:	46a9      	mov	r9, r5
 8005bb0:	f04f 0c00 	mov.w	ip, #0
 8005bb4:	f104 0e14 	add.w	lr, r4, #20
 8005bb8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005bbc:	f8d9 3000 	ldr.w	r3, [r9]
 8005bc0:	fa1f fb87 	uxth.w	fp, r7
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	fb0a 330b 	mla	r3, sl, fp, r3
 8005bca:	4463      	add	r3, ip
 8005bcc:	f8d9 c000 	ldr.w	ip, [r9]
 8005bd0:	0c3f      	lsrs	r7, r7, #16
 8005bd2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005bd6:	fb0a c707 	mla	r7, sl, r7, ip
 8005bda:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005be4:	4572      	cmp	r2, lr
 8005be6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005bea:	f849 3b04 	str.w	r3, [r9], #4
 8005bee:	d8e3      	bhi.n	8005bb8 <__multiply+0xb0>
 8005bf0:	9b01      	ldr	r3, [sp, #4]
 8005bf2:	f845 c003 	str.w	ip, [r5, r3]
 8005bf6:	9b03      	ldr	r3, [sp, #12]
 8005bf8:	3104      	adds	r1, #4
 8005bfa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005bfe:	f1b9 0f00 	cmp.w	r9, #0
 8005c02:	d021      	beq.n	8005c48 <__multiply+0x140>
 8005c04:	46ae      	mov	lr, r5
 8005c06:	f04f 0a00 	mov.w	sl, #0
 8005c0a:	682b      	ldr	r3, [r5, #0]
 8005c0c:	f104 0c14 	add.w	ip, r4, #20
 8005c10:	f8bc b000 	ldrh.w	fp, [ip]
 8005c14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	fb09 770b 	mla	r7, r9, fp, r7
 8005c1e:	4457      	add	r7, sl
 8005c20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005c24:	f84e 3b04 	str.w	r3, [lr], #4
 8005c28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005c2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c30:	f8be 3000 	ldrh.w	r3, [lr]
 8005c34:	4562      	cmp	r2, ip
 8005c36:	fb09 330a 	mla	r3, r9, sl, r3
 8005c3a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005c3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c42:	d8e5      	bhi.n	8005c10 <__multiply+0x108>
 8005c44:	9f01      	ldr	r7, [sp, #4]
 8005c46:	51eb      	str	r3, [r5, r7]
 8005c48:	3504      	adds	r5, #4
 8005c4a:	e79a      	b.n	8005b82 <__multiply+0x7a>
 8005c4c:	3e01      	subs	r6, #1
 8005c4e:	e79c      	b.n	8005b8a <__multiply+0x82>
 8005c50:	08006d34 	.word	0x08006d34
 8005c54:	08006d45 	.word	0x08006d45

08005c58 <__pow5mult>:
 8005c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c5c:	4615      	mov	r5, r2
 8005c5e:	f012 0203 	ands.w	r2, r2, #3
 8005c62:	4607      	mov	r7, r0
 8005c64:	460e      	mov	r6, r1
 8005c66:	d007      	beq.n	8005c78 <__pow5mult+0x20>
 8005c68:	4c25      	ldr	r4, [pc, #148]	@ (8005d00 <__pow5mult+0xa8>)
 8005c6a:	3a01      	subs	r2, #1
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c72:	f7ff fea1 	bl	80059b8 <__multadd>
 8005c76:	4606      	mov	r6, r0
 8005c78:	10ad      	asrs	r5, r5, #2
 8005c7a:	d03d      	beq.n	8005cf8 <__pow5mult+0xa0>
 8005c7c:	69fc      	ldr	r4, [r7, #28]
 8005c7e:	b97c      	cbnz	r4, 8005ca0 <__pow5mult+0x48>
 8005c80:	2010      	movs	r0, #16
 8005c82:	f7ff fd81 	bl	8005788 <malloc>
 8005c86:	4602      	mov	r2, r0
 8005c88:	61f8      	str	r0, [r7, #28]
 8005c8a:	b928      	cbnz	r0, 8005c98 <__pow5mult+0x40>
 8005c8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005c90:	4b1c      	ldr	r3, [pc, #112]	@ (8005d04 <__pow5mult+0xac>)
 8005c92:	481d      	ldr	r0, [pc, #116]	@ (8005d08 <__pow5mult+0xb0>)
 8005c94:	f000 fc38 	bl	8006508 <__assert_func>
 8005c98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c9c:	6004      	str	r4, [r0, #0]
 8005c9e:	60c4      	str	r4, [r0, #12]
 8005ca0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005ca4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ca8:	b94c      	cbnz	r4, 8005cbe <__pow5mult+0x66>
 8005caa:	f240 2171 	movw	r1, #625	@ 0x271
 8005cae:	4638      	mov	r0, r7
 8005cb0:	f7ff ff14 	bl	8005adc <__i2b>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	f8c8 0008 	str.w	r0, [r8, #8]
 8005cbc:	6003      	str	r3, [r0, #0]
 8005cbe:	f04f 0900 	mov.w	r9, #0
 8005cc2:	07eb      	lsls	r3, r5, #31
 8005cc4:	d50a      	bpl.n	8005cdc <__pow5mult+0x84>
 8005cc6:	4631      	mov	r1, r6
 8005cc8:	4622      	mov	r2, r4
 8005cca:	4638      	mov	r0, r7
 8005ccc:	f7ff ff1c 	bl	8005b08 <__multiply>
 8005cd0:	4680      	mov	r8, r0
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	4638      	mov	r0, r7
 8005cd6:	f7ff fe4d 	bl	8005974 <_Bfree>
 8005cda:	4646      	mov	r6, r8
 8005cdc:	106d      	asrs	r5, r5, #1
 8005cde:	d00b      	beq.n	8005cf8 <__pow5mult+0xa0>
 8005ce0:	6820      	ldr	r0, [r4, #0]
 8005ce2:	b938      	cbnz	r0, 8005cf4 <__pow5mult+0x9c>
 8005ce4:	4622      	mov	r2, r4
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	4638      	mov	r0, r7
 8005cea:	f7ff ff0d 	bl	8005b08 <__multiply>
 8005cee:	6020      	str	r0, [r4, #0]
 8005cf0:	f8c0 9000 	str.w	r9, [r0]
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	e7e4      	b.n	8005cc2 <__pow5mult+0x6a>
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cfe:	bf00      	nop
 8005d00:	08006da0 	.word	0x08006da0
 8005d04:	08006cc5 	.word	0x08006cc5
 8005d08:	08006d45 	.word	0x08006d45

08005d0c <__lshift>:
 8005d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d10:	460c      	mov	r4, r1
 8005d12:	4607      	mov	r7, r0
 8005d14:	4691      	mov	r9, r2
 8005d16:	6923      	ldr	r3, [r4, #16]
 8005d18:	6849      	ldr	r1, [r1, #4]
 8005d1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d1e:	68a3      	ldr	r3, [r4, #8]
 8005d20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d24:	f108 0601 	add.w	r6, r8, #1
 8005d28:	42b3      	cmp	r3, r6
 8005d2a:	db0b      	blt.n	8005d44 <__lshift+0x38>
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	f7ff fde1 	bl	80058f4 <_Balloc>
 8005d32:	4605      	mov	r5, r0
 8005d34:	b948      	cbnz	r0, 8005d4a <__lshift+0x3e>
 8005d36:	4602      	mov	r2, r0
 8005d38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005d3c:	4b27      	ldr	r3, [pc, #156]	@ (8005ddc <__lshift+0xd0>)
 8005d3e:	4828      	ldr	r0, [pc, #160]	@ (8005de0 <__lshift+0xd4>)
 8005d40:	f000 fbe2 	bl	8006508 <__assert_func>
 8005d44:	3101      	adds	r1, #1
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	e7ee      	b.n	8005d28 <__lshift+0x1c>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f100 0114 	add.w	r1, r0, #20
 8005d50:	f100 0210 	add.w	r2, r0, #16
 8005d54:	4618      	mov	r0, r3
 8005d56:	4553      	cmp	r3, sl
 8005d58:	db33      	blt.n	8005dc2 <__lshift+0xb6>
 8005d5a:	6920      	ldr	r0, [r4, #16]
 8005d5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d60:	f104 0314 	add.w	r3, r4, #20
 8005d64:	f019 091f 	ands.w	r9, r9, #31
 8005d68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d70:	d02b      	beq.n	8005dca <__lshift+0xbe>
 8005d72:	468a      	mov	sl, r1
 8005d74:	2200      	movs	r2, #0
 8005d76:	f1c9 0e20 	rsb	lr, r9, #32
 8005d7a:	6818      	ldr	r0, [r3, #0]
 8005d7c:	fa00 f009 	lsl.w	r0, r0, r9
 8005d80:	4310      	orrs	r0, r2
 8005d82:	f84a 0b04 	str.w	r0, [sl], #4
 8005d86:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d8a:	459c      	cmp	ip, r3
 8005d8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d90:	d8f3      	bhi.n	8005d7a <__lshift+0x6e>
 8005d92:	ebac 0304 	sub.w	r3, ip, r4
 8005d96:	3b15      	subs	r3, #21
 8005d98:	f023 0303 	bic.w	r3, r3, #3
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	f104 0015 	add.w	r0, r4, #21
 8005da2:	4584      	cmp	ip, r0
 8005da4:	bf38      	it	cc
 8005da6:	2304      	movcc	r3, #4
 8005da8:	50ca      	str	r2, [r1, r3]
 8005daa:	b10a      	cbz	r2, 8005db0 <__lshift+0xa4>
 8005dac:	f108 0602 	add.w	r6, r8, #2
 8005db0:	3e01      	subs	r6, #1
 8005db2:	4638      	mov	r0, r7
 8005db4:	4621      	mov	r1, r4
 8005db6:	612e      	str	r6, [r5, #16]
 8005db8:	f7ff fddc 	bl	8005974 <_Bfree>
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	e7c5      	b.n	8005d56 <__lshift+0x4a>
 8005dca:	3904      	subs	r1, #4
 8005dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dd0:	459c      	cmp	ip, r3
 8005dd2:	f841 2f04 	str.w	r2, [r1, #4]!
 8005dd6:	d8f9      	bhi.n	8005dcc <__lshift+0xc0>
 8005dd8:	e7ea      	b.n	8005db0 <__lshift+0xa4>
 8005dda:	bf00      	nop
 8005ddc:	08006d34 	.word	0x08006d34
 8005de0:	08006d45 	.word	0x08006d45

08005de4 <__mcmp>:
 8005de4:	4603      	mov	r3, r0
 8005de6:	690a      	ldr	r2, [r1, #16]
 8005de8:	6900      	ldr	r0, [r0, #16]
 8005dea:	b530      	push	{r4, r5, lr}
 8005dec:	1a80      	subs	r0, r0, r2
 8005dee:	d10e      	bne.n	8005e0e <__mcmp+0x2a>
 8005df0:	3314      	adds	r3, #20
 8005df2:	3114      	adds	r1, #20
 8005df4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005df8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005dfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e04:	4295      	cmp	r5, r2
 8005e06:	d003      	beq.n	8005e10 <__mcmp+0x2c>
 8005e08:	d205      	bcs.n	8005e16 <__mcmp+0x32>
 8005e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0e:	bd30      	pop	{r4, r5, pc}
 8005e10:	42a3      	cmp	r3, r4
 8005e12:	d3f3      	bcc.n	8005dfc <__mcmp+0x18>
 8005e14:	e7fb      	b.n	8005e0e <__mcmp+0x2a>
 8005e16:	2001      	movs	r0, #1
 8005e18:	e7f9      	b.n	8005e0e <__mcmp+0x2a>
	...

08005e1c <__mdiff>:
 8005e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e20:	4689      	mov	r9, r1
 8005e22:	4606      	mov	r6, r0
 8005e24:	4611      	mov	r1, r2
 8005e26:	4648      	mov	r0, r9
 8005e28:	4614      	mov	r4, r2
 8005e2a:	f7ff ffdb 	bl	8005de4 <__mcmp>
 8005e2e:	1e05      	subs	r5, r0, #0
 8005e30:	d112      	bne.n	8005e58 <__mdiff+0x3c>
 8005e32:	4629      	mov	r1, r5
 8005e34:	4630      	mov	r0, r6
 8005e36:	f7ff fd5d 	bl	80058f4 <_Balloc>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	b928      	cbnz	r0, 8005e4a <__mdiff+0x2e>
 8005e3e:	f240 2137 	movw	r1, #567	@ 0x237
 8005e42:	4b3e      	ldr	r3, [pc, #248]	@ (8005f3c <__mdiff+0x120>)
 8005e44:	483e      	ldr	r0, [pc, #248]	@ (8005f40 <__mdiff+0x124>)
 8005e46:	f000 fb5f 	bl	8006508 <__assert_func>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005e50:	4610      	mov	r0, r2
 8005e52:	b003      	add	sp, #12
 8005e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e58:	bfbc      	itt	lt
 8005e5a:	464b      	movlt	r3, r9
 8005e5c:	46a1      	movlt	r9, r4
 8005e5e:	4630      	mov	r0, r6
 8005e60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005e64:	bfba      	itte	lt
 8005e66:	461c      	movlt	r4, r3
 8005e68:	2501      	movlt	r5, #1
 8005e6a:	2500      	movge	r5, #0
 8005e6c:	f7ff fd42 	bl	80058f4 <_Balloc>
 8005e70:	4602      	mov	r2, r0
 8005e72:	b918      	cbnz	r0, 8005e7c <__mdiff+0x60>
 8005e74:	f240 2145 	movw	r1, #581	@ 0x245
 8005e78:	4b30      	ldr	r3, [pc, #192]	@ (8005f3c <__mdiff+0x120>)
 8005e7a:	e7e3      	b.n	8005e44 <__mdiff+0x28>
 8005e7c:	f100 0b14 	add.w	fp, r0, #20
 8005e80:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005e84:	f109 0310 	add.w	r3, r9, #16
 8005e88:	60c5      	str	r5, [r0, #12]
 8005e8a:	f04f 0c00 	mov.w	ip, #0
 8005e8e:	f109 0514 	add.w	r5, r9, #20
 8005e92:	46d9      	mov	r9, fp
 8005e94:	6926      	ldr	r6, [r4, #16]
 8005e96:	f104 0e14 	add.w	lr, r4, #20
 8005e9a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005e9e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	9b01      	ldr	r3, [sp, #4]
 8005ea6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005eaa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005eae:	b281      	uxth	r1, r0
 8005eb0:	9301      	str	r3, [sp, #4]
 8005eb2:	fa1f f38a 	uxth.w	r3, sl
 8005eb6:	1a5b      	subs	r3, r3, r1
 8005eb8:	0c00      	lsrs	r0, r0, #16
 8005eba:	4463      	add	r3, ip
 8005ebc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005ec0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005eca:	4576      	cmp	r6, lr
 8005ecc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ed0:	f849 3b04 	str.w	r3, [r9], #4
 8005ed4:	d8e6      	bhi.n	8005ea4 <__mdiff+0x88>
 8005ed6:	1b33      	subs	r3, r6, r4
 8005ed8:	3b15      	subs	r3, #21
 8005eda:	f023 0303 	bic.w	r3, r3, #3
 8005ede:	3415      	adds	r4, #21
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	42a6      	cmp	r6, r4
 8005ee4:	bf38      	it	cc
 8005ee6:	2304      	movcc	r3, #4
 8005ee8:	441d      	add	r5, r3
 8005eea:	445b      	add	r3, fp
 8005eec:	461e      	mov	r6, r3
 8005eee:	462c      	mov	r4, r5
 8005ef0:	4544      	cmp	r4, r8
 8005ef2:	d30e      	bcc.n	8005f12 <__mdiff+0xf6>
 8005ef4:	f108 0103 	add.w	r1, r8, #3
 8005ef8:	1b49      	subs	r1, r1, r5
 8005efa:	f021 0103 	bic.w	r1, r1, #3
 8005efe:	3d03      	subs	r5, #3
 8005f00:	45a8      	cmp	r8, r5
 8005f02:	bf38      	it	cc
 8005f04:	2100      	movcc	r1, #0
 8005f06:	440b      	add	r3, r1
 8005f08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005f0c:	b199      	cbz	r1, 8005f36 <__mdiff+0x11a>
 8005f0e:	6117      	str	r7, [r2, #16]
 8005f10:	e79e      	b.n	8005e50 <__mdiff+0x34>
 8005f12:	46e6      	mov	lr, ip
 8005f14:	f854 1b04 	ldr.w	r1, [r4], #4
 8005f18:	fa1f fc81 	uxth.w	ip, r1
 8005f1c:	44f4      	add	ip, lr
 8005f1e:	0c08      	lsrs	r0, r1, #16
 8005f20:	4471      	add	r1, lr
 8005f22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005f26:	b289      	uxth	r1, r1
 8005f28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005f2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005f30:	f846 1b04 	str.w	r1, [r6], #4
 8005f34:	e7dc      	b.n	8005ef0 <__mdiff+0xd4>
 8005f36:	3f01      	subs	r7, #1
 8005f38:	e7e6      	b.n	8005f08 <__mdiff+0xec>
 8005f3a:	bf00      	nop
 8005f3c:	08006d34 	.word	0x08006d34
 8005f40:	08006d45 	.word	0x08006d45

08005f44 <__d2b>:
 8005f44:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005f48:	2101      	movs	r1, #1
 8005f4a:	4690      	mov	r8, r2
 8005f4c:	4699      	mov	r9, r3
 8005f4e:	9e08      	ldr	r6, [sp, #32]
 8005f50:	f7ff fcd0 	bl	80058f4 <_Balloc>
 8005f54:	4604      	mov	r4, r0
 8005f56:	b930      	cbnz	r0, 8005f66 <__d2b+0x22>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	f240 310f 	movw	r1, #783	@ 0x30f
 8005f5e:	4b23      	ldr	r3, [pc, #140]	@ (8005fec <__d2b+0xa8>)
 8005f60:	4823      	ldr	r0, [pc, #140]	@ (8005ff0 <__d2b+0xac>)
 8005f62:	f000 fad1 	bl	8006508 <__assert_func>
 8005f66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005f6a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f6e:	b10d      	cbz	r5, 8005f74 <__d2b+0x30>
 8005f70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f74:	9301      	str	r3, [sp, #4]
 8005f76:	f1b8 0300 	subs.w	r3, r8, #0
 8005f7a:	d024      	beq.n	8005fc6 <__d2b+0x82>
 8005f7c:	4668      	mov	r0, sp
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	f7ff fd7f 	bl	8005a82 <__lo0bits>
 8005f84:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005f88:	b1d8      	cbz	r0, 8005fc2 <__d2b+0x7e>
 8005f8a:	f1c0 0320 	rsb	r3, r0, #32
 8005f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f92:	430b      	orrs	r3, r1
 8005f94:	40c2      	lsrs	r2, r0
 8005f96:	6163      	str	r3, [r4, #20]
 8005f98:	9201      	str	r2, [sp, #4]
 8005f9a:	9b01      	ldr	r3, [sp, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	bf0c      	ite	eq
 8005fa0:	2201      	moveq	r2, #1
 8005fa2:	2202      	movne	r2, #2
 8005fa4:	61a3      	str	r3, [r4, #24]
 8005fa6:	6122      	str	r2, [r4, #16]
 8005fa8:	b1ad      	cbz	r5, 8005fd6 <__d2b+0x92>
 8005faa:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005fae:	4405      	add	r5, r0
 8005fb0:	6035      	str	r5, [r6, #0]
 8005fb2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fb8:	6018      	str	r0, [r3, #0]
 8005fba:	4620      	mov	r0, r4
 8005fbc:	b002      	add	sp, #8
 8005fbe:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005fc2:	6161      	str	r1, [r4, #20]
 8005fc4:	e7e9      	b.n	8005f9a <__d2b+0x56>
 8005fc6:	a801      	add	r0, sp, #4
 8005fc8:	f7ff fd5b 	bl	8005a82 <__lo0bits>
 8005fcc:	9b01      	ldr	r3, [sp, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	6163      	str	r3, [r4, #20]
 8005fd2:	3020      	adds	r0, #32
 8005fd4:	e7e7      	b.n	8005fa6 <__d2b+0x62>
 8005fd6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005fda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005fde:	6030      	str	r0, [r6, #0]
 8005fe0:	6918      	ldr	r0, [r3, #16]
 8005fe2:	f7ff fd2f 	bl	8005a44 <__hi0bits>
 8005fe6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005fea:	e7e4      	b.n	8005fb6 <__d2b+0x72>
 8005fec:	08006d34 	.word	0x08006d34
 8005ff0:	08006d45 	.word	0x08006d45

08005ff4 <__sfputc_r>:
 8005ff4:	6893      	ldr	r3, [r2, #8]
 8005ff6:	b410      	push	{r4}
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	6093      	str	r3, [r2, #8]
 8005ffe:	da07      	bge.n	8006010 <__sfputc_r+0x1c>
 8006000:	6994      	ldr	r4, [r2, #24]
 8006002:	42a3      	cmp	r3, r4
 8006004:	db01      	blt.n	800600a <__sfputc_r+0x16>
 8006006:	290a      	cmp	r1, #10
 8006008:	d102      	bne.n	8006010 <__sfputc_r+0x1c>
 800600a:	bc10      	pop	{r4}
 800600c:	f7fe bbff 	b.w	800480e <__swbuf_r>
 8006010:	6813      	ldr	r3, [r2, #0]
 8006012:	1c58      	adds	r0, r3, #1
 8006014:	6010      	str	r0, [r2, #0]
 8006016:	7019      	strb	r1, [r3, #0]
 8006018:	4608      	mov	r0, r1
 800601a:	bc10      	pop	{r4}
 800601c:	4770      	bx	lr

0800601e <__sfputs_r>:
 800601e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006020:	4606      	mov	r6, r0
 8006022:	460f      	mov	r7, r1
 8006024:	4614      	mov	r4, r2
 8006026:	18d5      	adds	r5, r2, r3
 8006028:	42ac      	cmp	r4, r5
 800602a:	d101      	bne.n	8006030 <__sfputs_r+0x12>
 800602c:	2000      	movs	r0, #0
 800602e:	e007      	b.n	8006040 <__sfputs_r+0x22>
 8006030:	463a      	mov	r2, r7
 8006032:	4630      	mov	r0, r6
 8006034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006038:	f7ff ffdc 	bl	8005ff4 <__sfputc_r>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d1f3      	bne.n	8006028 <__sfputs_r+0xa>
 8006040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006044 <_vfiprintf_r>:
 8006044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006048:	460d      	mov	r5, r1
 800604a:	4614      	mov	r4, r2
 800604c:	4698      	mov	r8, r3
 800604e:	4606      	mov	r6, r0
 8006050:	b09d      	sub	sp, #116	@ 0x74
 8006052:	b118      	cbz	r0, 800605c <_vfiprintf_r+0x18>
 8006054:	6a03      	ldr	r3, [r0, #32]
 8006056:	b90b      	cbnz	r3, 800605c <_vfiprintf_r+0x18>
 8006058:	f7fe faf0 	bl	800463c <__sinit>
 800605c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800605e:	07d9      	lsls	r1, r3, #31
 8006060:	d405      	bmi.n	800606e <_vfiprintf_r+0x2a>
 8006062:	89ab      	ldrh	r3, [r5, #12]
 8006064:	059a      	lsls	r2, r3, #22
 8006066:	d402      	bmi.n	800606e <_vfiprintf_r+0x2a>
 8006068:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800606a:	f7fe fce2 	bl	8004a32 <__retarget_lock_acquire_recursive>
 800606e:	89ab      	ldrh	r3, [r5, #12]
 8006070:	071b      	lsls	r3, r3, #28
 8006072:	d501      	bpl.n	8006078 <_vfiprintf_r+0x34>
 8006074:	692b      	ldr	r3, [r5, #16]
 8006076:	b99b      	cbnz	r3, 80060a0 <_vfiprintf_r+0x5c>
 8006078:	4629      	mov	r1, r5
 800607a:	4630      	mov	r0, r6
 800607c:	f7fe fc06 	bl	800488c <__swsetup_r>
 8006080:	b170      	cbz	r0, 80060a0 <_vfiprintf_r+0x5c>
 8006082:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006084:	07dc      	lsls	r4, r3, #31
 8006086:	d504      	bpl.n	8006092 <_vfiprintf_r+0x4e>
 8006088:	f04f 30ff 	mov.w	r0, #4294967295
 800608c:	b01d      	add	sp, #116	@ 0x74
 800608e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006092:	89ab      	ldrh	r3, [r5, #12]
 8006094:	0598      	lsls	r0, r3, #22
 8006096:	d4f7      	bmi.n	8006088 <_vfiprintf_r+0x44>
 8006098:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800609a:	f7fe fccb 	bl	8004a34 <__retarget_lock_release_recursive>
 800609e:	e7f3      	b.n	8006088 <_vfiprintf_r+0x44>
 80060a0:	2300      	movs	r3, #0
 80060a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80060a4:	2320      	movs	r3, #32
 80060a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060aa:	2330      	movs	r3, #48	@ 0x30
 80060ac:	f04f 0901 	mov.w	r9, #1
 80060b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80060b4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006260 <_vfiprintf_r+0x21c>
 80060b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060bc:	4623      	mov	r3, r4
 80060be:	469a      	mov	sl, r3
 80060c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060c4:	b10a      	cbz	r2, 80060ca <_vfiprintf_r+0x86>
 80060c6:	2a25      	cmp	r2, #37	@ 0x25
 80060c8:	d1f9      	bne.n	80060be <_vfiprintf_r+0x7a>
 80060ca:	ebba 0b04 	subs.w	fp, sl, r4
 80060ce:	d00b      	beq.n	80060e8 <_vfiprintf_r+0xa4>
 80060d0:	465b      	mov	r3, fp
 80060d2:	4622      	mov	r2, r4
 80060d4:	4629      	mov	r1, r5
 80060d6:	4630      	mov	r0, r6
 80060d8:	f7ff ffa1 	bl	800601e <__sfputs_r>
 80060dc:	3001      	adds	r0, #1
 80060de:	f000 80a7 	beq.w	8006230 <_vfiprintf_r+0x1ec>
 80060e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060e4:	445a      	add	r2, fp
 80060e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80060e8:	f89a 3000 	ldrb.w	r3, [sl]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 809f 	beq.w	8006230 <_vfiprintf_r+0x1ec>
 80060f2:	2300      	movs	r3, #0
 80060f4:	f04f 32ff 	mov.w	r2, #4294967295
 80060f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060fc:	f10a 0a01 	add.w	sl, sl, #1
 8006100:	9304      	str	r3, [sp, #16]
 8006102:	9307      	str	r3, [sp, #28]
 8006104:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006108:	931a      	str	r3, [sp, #104]	@ 0x68
 800610a:	4654      	mov	r4, sl
 800610c:	2205      	movs	r2, #5
 800610e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006112:	4853      	ldr	r0, [pc, #332]	@ (8006260 <_vfiprintf_r+0x21c>)
 8006114:	f7fe fc8f 	bl	8004a36 <memchr>
 8006118:	9a04      	ldr	r2, [sp, #16]
 800611a:	b9d8      	cbnz	r0, 8006154 <_vfiprintf_r+0x110>
 800611c:	06d1      	lsls	r1, r2, #27
 800611e:	bf44      	itt	mi
 8006120:	2320      	movmi	r3, #32
 8006122:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006126:	0713      	lsls	r3, r2, #28
 8006128:	bf44      	itt	mi
 800612a:	232b      	movmi	r3, #43	@ 0x2b
 800612c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006130:	f89a 3000 	ldrb.w	r3, [sl]
 8006134:	2b2a      	cmp	r3, #42	@ 0x2a
 8006136:	d015      	beq.n	8006164 <_vfiprintf_r+0x120>
 8006138:	4654      	mov	r4, sl
 800613a:	2000      	movs	r0, #0
 800613c:	f04f 0c0a 	mov.w	ip, #10
 8006140:	9a07      	ldr	r2, [sp, #28]
 8006142:	4621      	mov	r1, r4
 8006144:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006148:	3b30      	subs	r3, #48	@ 0x30
 800614a:	2b09      	cmp	r3, #9
 800614c:	d94b      	bls.n	80061e6 <_vfiprintf_r+0x1a2>
 800614e:	b1b0      	cbz	r0, 800617e <_vfiprintf_r+0x13a>
 8006150:	9207      	str	r2, [sp, #28]
 8006152:	e014      	b.n	800617e <_vfiprintf_r+0x13a>
 8006154:	eba0 0308 	sub.w	r3, r0, r8
 8006158:	fa09 f303 	lsl.w	r3, r9, r3
 800615c:	4313      	orrs	r3, r2
 800615e:	46a2      	mov	sl, r4
 8006160:	9304      	str	r3, [sp, #16]
 8006162:	e7d2      	b.n	800610a <_vfiprintf_r+0xc6>
 8006164:	9b03      	ldr	r3, [sp, #12]
 8006166:	1d19      	adds	r1, r3, #4
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	9103      	str	r1, [sp, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	bfbb      	ittet	lt
 8006170:	425b      	neglt	r3, r3
 8006172:	f042 0202 	orrlt.w	r2, r2, #2
 8006176:	9307      	strge	r3, [sp, #28]
 8006178:	9307      	strlt	r3, [sp, #28]
 800617a:	bfb8      	it	lt
 800617c:	9204      	strlt	r2, [sp, #16]
 800617e:	7823      	ldrb	r3, [r4, #0]
 8006180:	2b2e      	cmp	r3, #46	@ 0x2e
 8006182:	d10a      	bne.n	800619a <_vfiprintf_r+0x156>
 8006184:	7863      	ldrb	r3, [r4, #1]
 8006186:	2b2a      	cmp	r3, #42	@ 0x2a
 8006188:	d132      	bne.n	80061f0 <_vfiprintf_r+0x1ac>
 800618a:	9b03      	ldr	r3, [sp, #12]
 800618c:	3402      	adds	r4, #2
 800618e:	1d1a      	adds	r2, r3, #4
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	9203      	str	r2, [sp, #12]
 8006194:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006198:	9305      	str	r3, [sp, #20]
 800619a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006264 <_vfiprintf_r+0x220>
 800619e:	2203      	movs	r2, #3
 80061a0:	4650      	mov	r0, sl
 80061a2:	7821      	ldrb	r1, [r4, #0]
 80061a4:	f7fe fc47 	bl	8004a36 <memchr>
 80061a8:	b138      	cbz	r0, 80061ba <_vfiprintf_r+0x176>
 80061aa:	2240      	movs	r2, #64	@ 0x40
 80061ac:	9b04      	ldr	r3, [sp, #16]
 80061ae:	eba0 000a 	sub.w	r0, r0, sl
 80061b2:	4082      	lsls	r2, r0
 80061b4:	4313      	orrs	r3, r2
 80061b6:	3401      	adds	r4, #1
 80061b8:	9304      	str	r3, [sp, #16]
 80061ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061be:	2206      	movs	r2, #6
 80061c0:	4829      	ldr	r0, [pc, #164]	@ (8006268 <_vfiprintf_r+0x224>)
 80061c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061c6:	f7fe fc36 	bl	8004a36 <memchr>
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d03f      	beq.n	800624e <_vfiprintf_r+0x20a>
 80061ce:	4b27      	ldr	r3, [pc, #156]	@ (800626c <_vfiprintf_r+0x228>)
 80061d0:	bb1b      	cbnz	r3, 800621a <_vfiprintf_r+0x1d6>
 80061d2:	9b03      	ldr	r3, [sp, #12]
 80061d4:	3307      	adds	r3, #7
 80061d6:	f023 0307 	bic.w	r3, r3, #7
 80061da:	3308      	adds	r3, #8
 80061dc:	9303      	str	r3, [sp, #12]
 80061de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061e0:	443b      	add	r3, r7
 80061e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80061e4:	e76a      	b.n	80060bc <_vfiprintf_r+0x78>
 80061e6:	460c      	mov	r4, r1
 80061e8:	2001      	movs	r0, #1
 80061ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80061ee:	e7a8      	b.n	8006142 <_vfiprintf_r+0xfe>
 80061f0:	2300      	movs	r3, #0
 80061f2:	f04f 0c0a 	mov.w	ip, #10
 80061f6:	4619      	mov	r1, r3
 80061f8:	3401      	adds	r4, #1
 80061fa:	9305      	str	r3, [sp, #20]
 80061fc:	4620      	mov	r0, r4
 80061fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006202:	3a30      	subs	r2, #48	@ 0x30
 8006204:	2a09      	cmp	r2, #9
 8006206:	d903      	bls.n	8006210 <_vfiprintf_r+0x1cc>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0c6      	beq.n	800619a <_vfiprintf_r+0x156>
 800620c:	9105      	str	r1, [sp, #20]
 800620e:	e7c4      	b.n	800619a <_vfiprintf_r+0x156>
 8006210:	4604      	mov	r4, r0
 8006212:	2301      	movs	r3, #1
 8006214:	fb0c 2101 	mla	r1, ip, r1, r2
 8006218:	e7f0      	b.n	80061fc <_vfiprintf_r+0x1b8>
 800621a:	ab03      	add	r3, sp, #12
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	462a      	mov	r2, r5
 8006220:	4630      	mov	r0, r6
 8006222:	4b13      	ldr	r3, [pc, #76]	@ (8006270 <_vfiprintf_r+0x22c>)
 8006224:	a904      	add	r1, sp, #16
 8006226:	f7fd fdbf 	bl	8003da8 <_printf_float>
 800622a:	4607      	mov	r7, r0
 800622c:	1c78      	adds	r0, r7, #1
 800622e:	d1d6      	bne.n	80061de <_vfiprintf_r+0x19a>
 8006230:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006232:	07d9      	lsls	r1, r3, #31
 8006234:	d405      	bmi.n	8006242 <_vfiprintf_r+0x1fe>
 8006236:	89ab      	ldrh	r3, [r5, #12]
 8006238:	059a      	lsls	r2, r3, #22
 800623a:	d402      	bmi.n	8006242 <_vfiprintf_r+0x1fe>
 800623c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800623e:	f7fe fbf9 	bl	8004a34 <__retarget_lock_release_recursive>
 8006242:	89ab      	ldrh	r3, [r5, #12]
 8006244:	065b      	lsls	r3, r3, #25
 8006246:	f53f af1f 	bmi.w	8006088 <_vfiprintf_r+0x44>
 800624a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800624c:	e71e      	b.n	800608c <_vfiprintf_r+0x48>
 800624e:	ab03      	add	r3, sp, #12
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	462a      	mov	r2, r5
 8006254:	4630      	mov	r0, r6
 8006256:	4b06      	ldr	r3, [pc, #24]	@ (8006270 <_vfiprintf_r+0x22c>)
 8006258:	a904      	add	r1, sp, #16
 800625a:	f7fe f843 	bl	80042e4 <_printf_i>
 800625e:	e7e4      	b.n	800622a <_vfiprintf_r+0x1e6>
 8006260:	08006ea0 	.word	0x08006ea0
 8006264:	08006ea6 	.word	0x08006ea6
 8006268:	08006eaa 	.word	0x08006eaa
 800626c:	08003da9 	.word	0x08003da9
 8006270:	0800601f 	.word	0x0800601f

08006274 <__sflush_r>:
 8006274:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627a:	0716      	lsls	r6, r2, #28
 800627c:	4605      	mov	r5, r0
 800627e:	460c      	mov	r4, r1
 8006280:	d454      	bmi.n	800632c <__sflush_r+0xb8>
 8006282:	684b      	ldr	r3, [r1, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	dc02      	bgt.n	800628e <__sflush_r+0x1a>
 8006288:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800628a:	2b00      	cmp	r3, #0
 800628c:	dd48      	ble.n	8006320 <__sflush_r+0xac>
 800628e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006290:	2e00      	cmp	r6, #0
 8006292:	d045      	beq.n	8006320 <__sflush_r+0xac>
 8006294:	2300      	movs	r3, #0
 8006296:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800629a:	682f      	ldr	r7, [r5, #0]
 800629c:	6a21      	ldr	r1, [r4, #32]
 800629e:	602b      	str	r3, [r5, #0]
 80062a0:	d030      	beq.n	8006304 <__sflush_r+0x90>
 80062a2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	0759      	lsls	r1, r3, #29
 80062a8:	d505      	bpl.n	80062b6 <__sflush_r+0x42>
 80062aa:	6863      	ldr	r3, [r4, #4]
 80062ac:	1ad2      	subs	r2, r2, r3
 80062ae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062b0:	b10b      	cbz	r3, 80062b6 <__sflush_r+0x42>
 80062b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062b4:	1ad2      	subs	r2, r2, r3
 80062b6:	2300      	movs	r3, #0
 80062b8:	4628      	mov	r0, r5
 80062ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062bc:	6a21      	ldr	r1, [r4, #32]
 80062be:	47b0      	blx	r6
 80062c0:	1c43      	adds	r3, r0, #1
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	d106      	bne.n	80062d4 <__sflush_r+0x60>
 80062c6:	6829      	ldr	r1, [r5, #0]
 80062c8:	291d      	cmp	r1, #29
 80062ca:	d82b      	bhi.n	8006324 <__sflush_r+0xb0>
 80062cc:	4a28      	ldr	r2, [pc, #160]	@ (8006370 <__sflush_r+0xfc>)
 80062ce:	410a      	asrs	r2, r1
 80062d0:	07d6      	lsls	r6, r2, #31
 80062d2:	d427      	bmi.n	8006324 <__sflush_r+0xb0>
 80062d4:	2200      	movs	r2, #0
 80062d6:	6062      	str	r2, [r4, #4]
 80062d8:	6922      	ldr	r2, [r4, #16]
 80062da:	04d9      	lsls	r1, r3, #19
 80062dc:	6022      	str	r2, [r4, #0]
 80062de:	d504      	bpl.n	80062ea <__sflush_r+0x76>
 80062e0:	1c42      	adds	r2, r0, #1
 80062e2:	d101      	bne.n	80062e8 <__sflush_r+0x74>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	b903      	cbnz	r3, 80062ea <__sflush_r+0x76>
 80062e8:	6560      	str	r0, [r4, #84]	@ 0x54
 80062ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062ec:	602f      	str	r7, [r5, #0]
 80062ee:	b1b9      	cbz	r1, 8006320 <__sflush_r+0xac>
 80062f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062f4:	4299      	cmp	r1, r3
 80062f6:	d002      	beq.n	80062fe <__sflush_r+0x8a>
 80062f8:	4628      	mov	r0, r5
 80062fa:	f7ff f9fd 	bl	80056f8 <_free_r>
 80062fe:	2300      	movs	r3, #0
 8006300:	6363      	str	r3, [r4, #52]	@ 0x34
 8006302:	e00d      	b.n	8006320 <__sflush_r+0xac>
 8006304:	2301      	movs	r3, #1
 8006306:	4628      	mov	r0, r5
 8006308:	47b0      	blx	r6
 800630a:	4602      	mov	r2, r0
 800630c:	1c50      	adds	r0, r2, #1
 800630e:	d1c9      	bne.n	80062a4 <__sflush_r+0x30>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0c6      	beq.n	80062a4 <__sflush_r+0x30>
 8006316:	2b1d      	cmp	r3, #29
 8006318:	d001      	beq.n	800631e <__sflush_r+0xaa>
 800631a:	2b16      	cmp	r3, #22
 800631c:	d11d      	bne.n	800635a <__sflush_r+0xe6>
 800631e:	602f      	str	r7, [r5, #0]
 8006320:	2000      	movs	r0, #0
 8006322:	e021      	b.n	8006368 <__sflush_r+0xf4>
 8006324:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006328:	b21b      	sxth	r3, r3
 800632a:	e01a      	b.n	8006362 <__sflush_r+0xee>
 800632c:	690f      	ldr	r7, [r1, #16]
 800632e:	2f00      	cmp	r7, #0
 8006330:	d0f6      	beq.n	8006320 <__sflush_r+0xac>
 8006332:	0793      	lsls	r3, r2, #30
 8006334:	bf18      	it	ne
 8006336:	2300      	movne	r3, #0
 8006338:	680e      	ldr	r6, [r1, #0]
 800633a:	bf08      	it	eq
 800633c:	694b      	ldreq	r3, [r1, #20]
 800633e:	1bf6      	subs	r6, r6, r7
 8006340:	600f      	str	r7, [r1, #0]
 8006342:	608b      	str	r3, [r1, #8]
 8006344:	2e00      	cmp	r6, #0
 8006346:	ddeb      	ble.n	8006320 <__sflush_r+0xac>
 8006348:	4633      	mov	r3, r6
 800634a:	463a      	mov	r2, r7
 800634c:	4628      	mov	r0, r5
 800634e:	6a21      	ldr	r1, [r4, #32]
 8006350:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006354:	47e0      	blx	ip
 8006356:	2800      	cmp	r0, #0
 8006358:	dc07      	bgt.n	800636a <__sflush_r+0xf6>
 800635a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800635e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006362:	f04f 30ff 	mov.w	r0, #4294967295
 8006366:	81a3      	strh	r3, [r4, #12]
 8006368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800636a:	4407      	add	r7, r0
 800636c:	1a36      	subs	r6, r6, r0
 800636e:	e7e9      	b.n	8006344 <__sflush_r+0xd0>
 8006370:	dfbffffe 	.word	0xdfbffffe

08006374 <_fflush_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	690b      	ldr	r3, [r1, #16]
 8006378:	4605      	mov	r5, r0
 800637a:	460c      	mov	r4, r1
 800637c:	b913      	cbnz	r3, 8006384 <_fflush_r+0x10>
 800637e:	2500      	movs	r5, #0
 8006380:	4628      	mov	r0, r5
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	b118      	cbz	r0, 800638e <_fflush_r+0x1a>
 8006386:	6a03      	ldr	r3, [r0, #32]
 8006388:	b90b      	cbnz	r3, 800638e <_fflush_r+0x1a>
 800638a:	f7fe f957 	bl	800463c <__sinit>
 800638e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0f3      	beq.n	800637e <_fflush_r+0xa>
 8006396:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006398:	07d0      	lsls	r0, r2, #31
 800639a:	d404      	bmi.n	80063a6 <_fflush_r+0x32>
 800639c:	0599      	lsls	r1, r3, #22
 800639e:	d402      	bmi.n	80063a6 <_fflush_r+0x32>
 80063a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063a2:	f7fe fb46 	bl	8004a32 <__retarget_lock_acquire_recursive>
 80063a6:	4628      	mov	r0, r5
 80063a8:	4621      	mov	r1, r4
 80063aa:	f7ff ff63 	bl	8006274 <__sflush_r>
 80063ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063b0:	4605      	mov	r5, r0
 80063b2:	07da      	lsls	r2, r3, #31
 80063b4:	d4e4      	bmi.n	8006380 <_fflush_r+0xc>
 80063b6:	89a3      	ldrh	r3, [r4, #12]
 80063b8:	059b      	lsls	r3, r3, #22
 80063ba:	d4e1      	bmi.n	8006380 <_fflush_r+0xc>
 80063bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063be:	f7fe fb39 	bl	8004a34 <__retarget_lock_release_recursive>
 80063c2:	e7dd      	b.n	8006380 <_fflush_r+0xc>

080063c4 <__swhatbuf_r>:
 80063c4:	b570      	push	{r4, r5, r6, lr}
 80063c6:	460c      	mov	r4, r1
 80063c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063cc:	4615      	mov	r5, r2
 80063ce:	2900      	cmp	r1, #0
 80063d0:	461e      	mov	r6, r3
 80063d2:	b096      	sub	sp, #88	@ 0x58
 80063d4:	da0c      	bge.n	80063f0 <__swhatbuf_r+0x2c>
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	2100      	movs	r1, #0
 80063da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80063de:	bf14      	ite	ne
 80063e0:	2340      	movne	r3, #64	@ 0x40
 80063e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80063e6:	2000      	movs	r0, #0
 80063e8:	6031      	str	r1, [r6, #0]
 80063ea:	602b      	str	r3, [r5, #0]
 80063ec:	b016      	add	sp, #88	@ 0x58
 80063ee:	bd70      	pop	{r4, r5, r6, pc}
 80063f0:	466a      	mov	r2, sp
 80063f2:	f000 f849 	bl	8006488 <_fstat_r>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	dbed      	blt.n	80063d6 <__swhatbuf_r+0x12>
 80063fa:	9901      	ldr	r1, [sp, #4]
 80063fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006400:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006404:	4259      	negs	r1, r3
 8006406:	4159      	adcs	r1, r3
 8006408:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800640c:	e7eb      	b.n	80063e6 <__swhatbuf_r+0x22>

0800640e <__smakebuf_r>:
 800640e:	898b      	ldrh	r3, [r1, #12]
 8006410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006412:	079d      	lsls	r5, r3, #30
 8006414:	4606      	mov	r6, r0
 8006416:	460c      	mov	r4, r1
 8006418:	d507      	bpl.n	800642a <__smakebuf_r+0x1c>
 800641a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800641e:	6023      	str	r3, [r4, #0]
 8006420:	6123      	str	r3, [r4, #16]
 8006422:	2301      	movs	r3, #1
 8006424:	6163      	str	r3, [r4, #20]
 8006426:	b003      	add	sp, #12
 8006428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800642a:	466a      	mov	r2, sp
 800642c:	ab01      	add	r3, sp, #4
 800642e:	f7ff ffc9 	bl	80063c4 <__swhatbuf_r>
 8006432:	9f00      	ldr	r7, [sp, #0]
 8006434:	4605      	mov	r5, r0
 8006436:	4639      	mov	r1, r7
 8006438:	4630      	mov	r0, r6
 800643a:	f7ff f9cf 	bl	80057dc <_malloc_r>
 800643e:	b948      	cbnz	r0, 8006454 <__smakebuf_r+0x46>
 8006440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006444:	059a      	lsls	r2, r3, #22
 8006446:	d4ee      	bmi.n	8006426 <__smakebuf_r+0x18>
 8006448:	f023 0303 	bic.w	r3, r3, #3
 800644c:	f043 0302 	orr.w	r3, r3, #2
 8006450:	81a3      	strh	r3, [r4, #12]
 8006452:	e7e2      	b.n	800641a <__smakebuf_r+0xc>
 8006454:	89a3      	ldrh	r3, [r4, #12]
 8006456:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800645a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800645e:	81a3      	strh	r3, [r4, #12]
 8006460:	9b01      	ldr	r3, [sp, #4]
 8006462:	6020      	str	r0, [r4, #0]
 8006464:	b15b      	cbz	r3, 800647e <__smakebuf_r+0x70>
 8006466:	4630      	mov	r0, r6
 8006468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800646c:	f000 f81e 	bl	80064ac <_isatty_r>
 8006470:	b128      	cbz	r0, 800647e <__smakebuf_r+0x70>
 8006472:	89a3      	ldrh	r3, [r4, #12]
 8006474:	f023 0303 	bic.w	r3, r3, #3
 8006478:	f043 0301 	orr.w	r3, r3, #1
 800647c:	81a3      	strh	r3, [r4, #12]
 800647e:	89a3      	ldrh	r3, [r4, #12]
 8006480:	431d      	orrs	r5, r3
 8006482:	81a5      	strh	r5, [r4, #12]
 8006484:	e7cf      	b.n	8006426 <__smakebuf_r+0x18>
	...

08006488 <_fstat_r>:
 8006488:	b538      	push	{r3, r4, r5, lr}
 800648a:	2300      	movs	r3, #0
 800648c:	4d06      	ldr	r5, [pc, #24]	@ (80064a8 <_fstat_r+0x20>)
 800648e:	4604      	mov	r4, r0
 8006490:	4608      	mov	r0, r1
 8006492:	4611      	mov	r1, r2
 8006494:	602b      	str	r3, [r5, #0]
 8006496:	f7fb fcbe 	bl	8001e16 <_fstat>
 800649a:	1c43      	adds	r3, r0, #1
 800649c:	d102      	bne.n	80064a4 <_fstat_r+0x1c>
 800649e:	682b      	ldr	r3, [r5, #0]
 80064a0:	b103      	cbz	r3, 80064a4 <_fstat_r+0x1c>
 80064a2:	6023      	str	r3, [r4, #0]
 80064a4:	bd38      	pop	{r3, r4, r5, pc}
 80064a6:	bf00      	nop
 80064a8:	200003dc 	.word	0x200003dc

080064ac <_isatty_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	2300      	movs	r3, #0
 80064b0:	4d05      	ldr	r5, [pc, #20]	@ (80064c8 <_isatty_r+0x1c>)
 80064b2:	4604      	mov	r4, r0
 80064b4:	4608      	mov	r0, r1
 80064b6:	602b      	str	r3, [r5, #0]
 80064b8:	f7fb fcbc 	bl	8001e34 <_isatty>
 80064bc:	1c43      	adds	r3, r0, #1
 80064be:	d102      	bne.n	80064c6 <_isatty_r+0x1a>
 80064c0:	682b      	ldr	r3, [r5, #0]
 80064c2:	b103      	cbz	r3, 80064c6 <_isatty_r+0x1a>
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	bd38      	pop	{r3, r4, r5, pc}
 80064c8:	200003dc 	.word	0x200003dc

080064cc <_sbrk_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	2300      	movs	r3, #0
 80064d0:	4d05      	ldr	r5, [pc, #20]	@ (80064e8 <_sbrk_r+0x1c>)
 80064d2:	4604      	mov	r4, r0
 80064d4:	4608      	mov	r0, r1
 80064d6:	602b      	str	r3, [r5, #0]
 80064d8:	f7fb fcc2 	bl	8001e60 <_sbrk>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_sbrk_r+0x1a>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_sbrk_r+0x1a>
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	200003dc 	.word	0x200003dc

080064ec <memcpy>:
 80064ec:	440a      	add	r2, r1
 80064ee:	4291      	cmp	r1, r2
 80064f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80064f4:	d100      	bne.n	80064f8 <memcpy+0xc>
 80064f6:	4770      	bx	lr
 80064f8:	b510      	push	{r4, lr}
 80064fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064fe:	4291      	cmp	r1, r2
 8006500:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006504:	d1f9      	bne.n	80064fa <memcpy+0xe>
 8006506:	bd10      	pop	{r4, pc}

08006508 <__assert_func>:
 8006508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800650a:	4614      	mov	r4, r2
 800650c:	461a      	mov	r2, r3
 800650e:	4b09      	ldr	r3, [pc, #36]	@ (8006534 <__assert_func+0x2c>)
 8006510:	4605      	mov	r5, r0
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68d8      	ldr	r0, [r3, #12]
 8006516:	b954      	cbnz	r4, 800652e <__assert_func+0x26>
 8006518:	4b07      	ldr	r3, [pc, #28]	@ (8006538 <__assert_func+0x30>)
 800651a:	461c      	mov	r4, r3
 800651c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006520:	9100      	str	r1, [sp, #0]
 8006522:	462b      	mov	r3, r5
 8006524:	4905      	ldr	r1, [pc, #20]	@ (800653c <__assert_func+0x34>)
 8006526:	f000 f841 	bl	80065ac <fiprintf>
 800652a:	f000 f851 	bl	80065d0 <abort>
 800652e:	4b04      	ldr	r3, [pc, #16]	@ (8006540 <__assert_func+0x38>)
 8006530:	e7f4      	b.n	800651c <__assert_func+0x14>
 8006532:	bf00      	nop
 8006534:	20000030 	.word	0x20000030
 8006538:	08006ef6 	.word	0x08006ef6
 800653c:	08006ec8 	.word	0x08006ec8
 8006540:	08006ebb 	.word	0x08006ebb

08006544 <_calloc_r>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	fba1 5402 	umull	r5, r4, r1, r2
 800654a:	b93c      	cbnz	r4, 800655c <_calloc_r+0x18>
 800654c:	4629      	mov	r1, r5
 800654e:	f7ff f945 	bl	80057dc <_malloc_r>
 8006552:	4606      	mov	r6, r0
 8006554:	b928      	cbnz	r0, 8006562 <_calloc_r+0x1e>
 8006556:	2600      	movs	r6, #0
 8006558:	4630      	mov	r0, r6
 800655a:	bd70      	pop	{r4, r5, r6, pc}
 800655c:	220c      	movs	r2, #12
 800655e:	6002      	str	r2, [r0, #0]
 8006560:	e7f9      	b.n	8006556 <_calloc_r+0x12>
 8006562:	462a      	mov	r2, r5
 8006564:	4621      	mov	r1, r4
 8006566:	f7fe f9e7 	bl	8004938 <memset>
 800656a:	e7f5      	b.n	8006558 <_calloc_r+0x14>

0800656c <__ascii_mbtowc>:
 800656c:	b082      	sub	sp, #8
 800656e:	b901      	cbnz	r1, 8006572 <__ascii_mbtowc+0x6>
 8006570:	a901      	add	r1, sp, #4
 8006572:	b142      	cbz	r2, 8006586 <__ascii_mbtowc+0x1a>
 8006574:	b14b      	cbz	r3, 800658a <__ascii_mbtowc+0x1e>
 8006576:	7813      	ldrb	r3, [r2, #0]
 8006578:	600b      	str	r3, [r1, #0]
 800657a:	7812      	ldrb	r2, [r2, #0]
 800657c:	1e10      	subs	r0, r2, #0
 800657e:	bf18      	it	ne
 8006580:	2001      	movne	r0, #1
 8006582:	b002      	add	sp, #8
 8006584:	4770      	bx	lr
 8006586:	4610      	mov	r0, r2
 8006588:	e7fb      	b.n	8006582 <__ascii_mbtowc+0x16>
 800658a:	f06f 0001 	mvn.w	r0, #1
 800658e:	e7f8      	b.n	8006582 <__ascii_mbtowc+0x16>

08006590 <__ascii_wctomb>:
 8006590:	4603      	mov	r3, r0
 8006592:	4608      	mov	r0, r1
 8006594:	b141      	cbz	r1, 80065a8 <__ascii_wctomb+0x18>
 8006596:	2aff      	cmp	r2, #255	@ 0xff
 8006598:	d904      	bls.n	80065a4 <__ascii_wctomb+0x14>
 800659a:	228a      	movs	r2, #138	@ 0x8a
 800659c:	f04f 30ff 	mov.w	r0, #4294967295
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	4770      	bx	lr
 80065a4:	2001      	movs	r0, #1
 80065a6:	700a      	strb	r2, [r1, #0]
 80065a8:	4770      	bx	lr
	...

080065ac <fiprintf>:
 80065ac:	b40e      	push	{r1, r2, r3}
 80065ae:	b503      	push	{r0, r1, lr}
 80065b0:	4601      	mov	r1, r0
 80065b2:	ab03      	add	r3, sp, #12
 80065b4:	4805      	ldr	r0, [pc, #20]	@ (80065cc <fiprintf+0x20>)
 80065b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80065ba:	6800      	ldr	r0, [r0, #0]
 80065bc:	9301      	str	r3, [sp, #4]
 80065be:	f7ff fd41 	bl	8006044 <_vfiprintf_r>
 80065c2:	b002      	add	sp, #8
 80065c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80065c8:	b003      	add	sp, #12
 80065ca:	4770      	bx	lr
 80065cc:	20000030 	.word	0x20000030

080065d0 <abort>:
 80065d0:	2006      	movs	r0, #6
 80065d2:	b508      	push	{r3, lr}
 80065d4:	f000 f82c 	bl	8006630 <raise>
 80065d8:	2001      	movs	r0, #1
 80065da:	f7fb fbe9 	bl	8001db0 <_exit>

080065de <_raise_r>:
 80065de:	291f      	cmp	r1, #31
 80065e0:	b538      	push	{r3, r4, r5, lr}
 80065e2:	4605      	mov	r5, r0
 80065e4:	460c      	mov	r4, r1
 80065e6:	d904      	bls.n	80065f2 <_raise_r+0x14>
 80065e8:	2316      	movs	r3, #22
 80065ea:	6003      	str	r3, [r0, #0]
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295
 80065f0:	bd38      	pop	{r3, r4, r5, pc}
 80065f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80065f4:	b112      	cbz	r2, 80065fc <_raise_r+0x1e>
 80065f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065fa:	b94b      	cbnz	r3, 8006610 <_raise_r+0x32>
 80065fc:	4628      	mov	r0, r5
 80065fe:	f000 f831 	bl	8006664 <_getpid_r>
 8006602:	4622      	mov	r2, r4
 8006604:	4601      	mov	r1, r0
 8006606:	4628      	mov	r0, r5
 8006608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800660c:	f000 b818 	b.w	8006640 <_kill_r>
 8006610:	2b01      	cmp	r3, #1
 8006612:	d00a      	beq.n	800662a <_raise_r+0x4c>
 8006614:	1c59      	adds	r1, r3, #1
 8006616:	d103      	bne.n	8006620 <_raise_r+0x42>
 8006618:	2316      	movs	r3, #22
 800661a:	6003      	str	r3, [r0, #0]
 800661c:	2001      	movs	r0, #1
 800661e:	e7e7      	b.n	80065f0 <_raise_r+0x12>
 8006620:	2100      	movs	r1, #0
 8006622:	4620      	mov	r0, r4
 8006624:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006628:	4798      	blx	r3
 800662a:	2000      	movs	r0, #0
 800662c:	e7e0      	b.n	80065f0 <_raise_r+0x12>
	...

08006630 <raise>:
 8006630:	4b02      	ldr	r3, [pc, #8]	@ (800663c <raise+0xc>)
 8006632:	4601      	mov	r1, r0
 8006634:	6818      	ldr	r0, [r3, #0]
 8006636:	f7ff bfd2 	b.w	80065de <_raise_r>
 800663a:	bf00      	nop
 800663c:	20000030 	.word	0x20000030

08006640 <_kill_r>:
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	2300      	movs	r3, #0
 8006644:	4d06      	ldr	r5, [pc, #24]	@ (8006660 <_kill_r+0x20>)
 8006646:	4604      	mov	r4, r0
 8006648:	4608      	mov	r0, r1
 800664a:	4611      	mov	r1, r2
 800664c:	602b      	str	r3, [r5, #0]
 800664e:	f7fb fb9f 	bl	8001d90 <_kill>
 8006652:	1c43      	adds	r3, r0, #1
 8006654:	d102      	bne.n	800665c <_kill_r+0x1c>
 8006656:	682b      	ldr	r3, [r5, #0]
 8006658:	b103      	cbz	r3, 800665c <_kill_r+0x1c>
 800665a:	6023      	str	r3, [r4, #0]
 800665c:	bd38      	pop	{r3, r4, r5, pc}
 800665e:	bf00      	nop
 8006660:	200003dc 	.word	0x200003dc

08006664 <_getpid_r>:
 8006664:	f7fb bb8d 	b.w	8001d82 <_getpid>

08006668 <sqrt>:
 8006668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666a:	4606      	mov	r6, r0
 800666c:	460f      	mov	r7, r1
 800666e:	f000 f9b3 	bl	80069d8 <__ieee754_sqrt>
 8006672:	4632      	mov	r2, r6
 8006674:	4604      	mov	r4, r0
 8006676:	460d      	mov	r5, r1
 8006678:	463b      	mov	r3, r7
 800667a:	4630      	mov	r0, r6
 800667c:	4639      	mov	r1, r7
 800667e:	f7fa fa91 	bl	8000ba4 <__aeabi_dcmpun>
 8006682:	b990      	cbnz	r0, 80066aa <sqrt+0x42>
 8006684:	2200      	movs	r2, #0
 8006686:	2300      	movs	r3, #0
 8006688:	4630      	mov	r0, r6
 800668a:	4639      	mov	r1, r7
 800668c:	f7fa fa62 	bl	8000b54 <__aeabi_dcmplt>
 8006690:	b158      	cbz	r0, 80066aa <sqrt+0x42>
 8006692:	f7fe f9a3 	bl	80049dc <__errno>
 8006696:	2321      	movs	r3, #33	@ 0x21
 8006698:	2200      	movs	r2, #0
 800669a:	6003      	str	r3, [r0, #0]
 800669c:	2300      	movs	r3, #0
 800669e:	4610      	mov	r0, r2
 80066a0:	4619      	mov	r1, r3
 80066a2:	f7fa f90f 	bl	80008c4 <__aeabi_ddiv>
 80066a6:	4604      	mov	r4, r0
 80066a8:	460d      	mov	r5, r1
 80066aa:	4620      	mov	r0, r4
 80066ac:	4629      	mov	r1, r5
 80066ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080066b0 <atan>:
 80066b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b4:	4bbc      	ldr	r3, [pc, #752]	@ (80069a8 <atan+0x2f8>)
 80066b6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80066ba:	429e      	cmp	r6, r3
 80066bc:	4604      	mov	r4, r0
 80066be:	460d      	mov	r5, r1
 80066c0:	468b      	mov	fp, r1
 80066c2:	d918      	bls.n	80066f6 <atan+0x46>
 80066c4:	4bb9      	ldr	r3, [pc, #740]	@ (80069ac <atan+0x2fc>)
 80066c6:	429e      	cmp	r6, r3
 80066c8:	d801      	bhi.n	80066ce <atan+0x1e>
 80066ca:	d109      	bne.n	80066e0 <atan+0x30>
 80066cc:	b140      	cbz	r0, 80066e0 <atan+0x30>
 80066ce:	4622      	mov	r2, r4
 80066d0:	462b      	mov	r3, r5
 80066d2:	4620      	mov	r0, r4
 80066d4:	4629      	mov	r1, r5
 80066d6:	f7f9 fe15 	bl	8000304 <__adddf3>
 80066da:	4604      	mov	r4, r0
 80066dc:	460d      	mov	r5, r1
 80066de:	e006      	b.n	80066ee <atan+0x3e>
 80066e0:	f1bb 0f00 	cmp.w	fp, #0
 80066e4:	f340 8123 	ble.w	800692e <atan+0x27e>
 80066e8:	a593      	add	r5, pc, #588	@ (adr r5, 8006938 <atan+0x288>)
 80066ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066ee:	4620      	mov	r0, r4
 80066f0:	4629      	mov	r1, r5
 80066f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f6:	4bae      	ldr	r3, [pc, #696]	@ (80069b0 <atan+0x300>)
 80066f8:	429e      	cmp	r6, r3
 80066fa:	d811      	bhi.n	8006720 <atan+0x70>
 80066fc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006700:	429e      	cmp	r6, r3
 8006702:	d80a      	bhi.n	800671a <atan+0x6a>
 8006704:	a38e      	add	r3, pc, #568	@ (adr r3, 8006940 <atan+0x290>)
 8006706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670a:	f7f9 fdfb 	bl	8000304 <__adddf3>
 800670e:	2200      	movs	r2, #0
 8006710:	4ba8      	ldr	r3, [pc, #672]	@ (80069b4 <atan+0x304>)
 8006712:	f7fa fa3d 	bl	8000b90 <__aeabi_dcmpgt>
 8006716:	2800      	cmp	r0, #0
 8006718:	d1e9      	bne.n	80066ee <atan+0x3e>
 800671a:	f04f 3aff 	mov.w	sl, #4294967295
 800671e:	e027      	b.n	8006770 <atan+0xc0>
 8006720:	f000 f956 	bl	80069d0 <fabs>
 8006724:	4ba4      	ldr	r3, [pc, #656]	@ (80069b8 <atan+0x308>)
 8006726:	4604      	mov	r4, r0
 8006728:	429e      	cmp	r6, r3
 800672a:	460d      	mov	r5, r1
 800672c:	f200 80b8 	bhi.w	80068a0 <atan+0x1f0>
 8006730:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006734:	429e      	cmp	r6, r3
 8006736:	f200 809c 	bhi.w	8006872 <atan+0x1c2>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	f7f9 fde1 	bl	8000304 <__adddf3>
 8006742:	2200      	movs	r2, #0
 8006744:	4b9b      	ldr	r3, [pc, #620]	@ (80069b4 <atan+0x304>)
 8006746:	f7f9 fddb 	bl	8000300 <__aeabi_dsub>
 800674a:	2200      	movs	r2, #0
 800674c:	4606      	mov	r6, r0
 800674e:	460f      	mov	r7, r1
 8006750:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006754:	4620      	mov	r0, r4
 8006756:	4629      	mov	r1, r5
 8006758:	f7f9 fdd4 	bl	8000304 <__adddf3>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	4630      	mov	r0, r6
 8006762:	4639      	mov	r1, r7
 8006764:	f7fa f8ae 	bl	80008c4 <__aeabi_ddiv>
 8006768:	f04f 0a00 	mov.w	sl, #0
 800676c:	4604      	mov	r4, r0
 800676e:	460d      	mov	r5, r1
 8006770:	4622      	mov	r2, r4
 8006772:	462b      	mov	r3, r5
 8006774:	4620      	mov	r0, r4
 8006776:	4629      	mov	r1, r5
 8006778:	f7f9 ff7a 	bl	8000670 <__aeabi_dmul>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4680      	mov	r8, r0
 8006782:	4689      	mov	r9, r1
 8006784:	f7f9 ff74 	bl	8000670 <__aeabi_dmul>
 8006788:	a36f      	add	r3, pc, #444	@ (adr r3, 8006948 <atan+0x298>)
 800678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678e:	4606      	mov	r6, r0
 8006790:	460f      	mov	r7, r1
 8006792:	f7f9 ff6d 	bl	8000670 <__aeabi_dmul>
 8006796:	a36e      	add	r3, pc, #440	@ (adr r3, 8006950 <atan+0x2a0>)
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	f7f9 fdb2 	bl	8000304 <__adddf3>
 80067a0:	4632      	mov	r2, r6
 80067a2:	463b      	mov	r3, r7
 80067a4:	f7f9 ff64 	bl	8000670 <__aeabi_dmul>
 80067a8:	a36b      	add	r3, pc, #428	@ (adr r3, 8006958 <atan+0x2a8>)
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	f7f9 fda9 	bl	8000304 <__adddf3>
 80067b2:	4632      	mov	r2, r6
 80067b4:	463b      	mov	r3, r7
 80067b6:	f7f9 ff5b 	bl	8000670 <__aeabi_dmul>
 80067ba:	a369      	add	r3, pc, #420	@ (adr r3, 8006960 <atan+0x2b0>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f7f9 fda0 	bl	8000304 <__adddf3>
 80067c4:	4632      	mov	r2, r6
 80067c6:	463b      	mov	r3, r7
 80067c8:	f7f9 ff52 	bl	8000670 <__aeabi_dmul>
 80067cc:	a366      	add	r3, pc, #408	@ (adr r3, 8006968 <atan+0x2b8>)
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	f7f9 fd97 	bl	8000304 <__adddf3>
 80067d6:	4632      	mov	r2, r6
 80067d8:	463b      	mov	r3, r7
 80067da:	f7f9 ff49 	bl	8000670 <__aeabi_dmul>
 80067de:	a364      	add	r3, pc, #400	@ (adr r3, 8006970 <atan+0x2c0>)
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	f7f9 fd8e 	bl	8000304 <__adddf3>
 80067e8:	4642      	mov	r2, r8
 80067ea:	464b      	mov	r3, r9
 80067ec:	f7f9 ff40 	bl	8000670 <__aeabi_dmul>
 80067f0:	a361      	add	r3, pc, #388	@ (adr r3, 8006978 <atan+0x2c8>)
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	4680      	mov	r8, r0
 80067f8:	4689      	mov	r9, r1
 80067fa:	4630      	mov	r0, r6
 80067fc:	4639      	mov	r1, r7
 80067fe:	f7f9 ff37 	bl	8000670 <__aeabi_dmul>
 8006802:	a35f      	add	r3, pc, #380	@ (adr r3, 8006980 <atan+0x2d0>)
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	f7f9 fd7a 	bl	8000300 <__aeabi_dsub>
 800680c:	4632      	mov	r2, r6
 800680e:	463b      	mov	r3, r7
 8006810:	f7f9 ff2e 	bl	8000670 <__aeabi_dmul>
 8006814:	a35c      	add	r3, pc, #368	@ (adr r3, 8006988 <atan+0x2d8>)
 8006816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681a:	f7f9 fd71 	bl	8000300 <__aeabi_dsub>
 800681e:	4632      	mov	r2, r6
 8006820:	463b      	mov	r3, r7
 8006822:	f7f9 ff25 	bl	8000670 <__aeabi_dmul>
 8006826:	a35a      	add	r3, pc, #360	@ (adr r3, 8006990 <atan+0x2e0>)
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	f7f9 fd68 	bl	8000300 <__aeabi_dsub>
 8006830:	4632      	mov	r2, r6
 8006832:	463b      	mov	r3, r7
 8006834:	f7f9 ff1c 	bl	8000670 <__aeabi_dmul>
 8006838:	a357      	add	r3, pc, #348	@ (adr r3, 8006998 <atan+0x2e8>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f7f9 fd5f 	bl	8000300 <__aeabi_dsub>
 8006842:	4632      	mov	r2, r6
 8006844:	463b      	mov	r3, r7
 8006846:	f7f9 ff13 	bl	8000670 <__aeabi_dmul>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	4640      	mov	r0, r8
 8006850:	4649      	mov	r1, r9
 8006852:	f7f9 fd57 	bl	8000304 <__adddf3>
 8006856:	4622      	mov	r2, r4
 8006858:	462b      	mov	r3, r5
 800685a:	f7f9 ff09 	bl	8000670 <__aeabi_dmul>
 800685e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	d144      	bne.n	80068f2 <atan+0x242>
 8006868:	4620      	mov	r0, r4
 800686a:	4629      	mov	r1, r5
 800686c:	f7f9 fd48 	bl	8000300 <__aeabi_dsub>
 8006870:	e733      	b.n	80066da <atan+0x2a>
 8006872:	2200      	movs	r2, #0
 8006874:	4b4f      	ldr	r3, [pc, #316]	@ (80069b4 <atan+0x304>)
 8006876:	f7f9 fd43 	bl	8000300 <__aeabi_dsub>
 800687a:	2200      	movs	r2, #0
 800687c:	4606      	mov	r6, r0
 800687e:	460f      	mov	r7, r1
 8006880:	4620      	mov	r0, r4
 8006882:	4629      	mov	r1, r5
 8006884:	4b4b      	ldr	r3, [pc, #300]	@ (80069b4 <atan+0x304>)
 8006886:	f7f9 fd3d 	bl	8000304 <__adddf3>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	4630      	mov	r0, r6
 8006890:	4639      	mov	r1, r7
 8006892:	f7fa f817 	bl	80008c4 <__aeabi_ddiv>
 8006896:	f04f 0a01 	mov.w	sl, #1
 800689a:	4604      	mov	r4, r0
 800689c:	460d      	mov	r5, r1
 800689e:	e767      	b.n	8006770 <atan+0xc0>
 80068a0:	4b46      	ldr	r3, [pc, #280]	@ (80069bc <atan+0x30c>)
 80068a2:	429e      	cmp	r6, r3
 80068a4:	d21a      	bcs.n	80068dc <atan+0x22c>
 80068a6:	2200      	movs	r2, #0
 80068a8:	4b45      	ldr	r3, [pc, #276]	@ (80069c0 <atan+0x310>)
 80068aa:	f7f9 fd29 	bl	8000300 <__aeabi_dsub>
 80068ae:	2200      	movs	r2, #0
 80068b0:	4606      	mov	r6, r0
 80068b2:	460f      	mov	r7, r1
 80068b4:	4620      	mov	r0, r4
 80068b6:	4629      	mov	r1, r5
 80068b8:	4b41      	ldr	r3, [pc, #260]	@ (80069c0 <atan+0x310>)
 80068ba:	f7f9 fed9 	bl	8000670 <__aeabi_dmul>
 80068be:	2200      	movs	r2, #0
 80068c0:	4b3c      	ldr	r3, [pc, #240]	@ (80069b4 <atan+0x304>)
 80068c2:	f7f9 fd1f 	bl	8000304 <__adddf3>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4630      	mov	r0, r6
 80068cc:	4639      	mov	r1, r7
 80068ce:	f7f9 fff9 	bl	80008c4 <__aeabi_ddiv>
 80068d2:	f04f 0a02 	mov.w	sl, #2
 80068d6:	4604      	mov	r4, r0
 80068d8:	460d      	mov	r5, r1
 80068da:	e749      	b.n	8006770 <atan+0xc0>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	2000      	movs	r0, #0
 80068e2:	4938      	ldr	r1, [pc, #224]	@ (80069c4 <atan+0x314>)
 80068e4:	f7f9 ffee 	bl	80008c4 <__aeabi_ddiv>
 80068e8:	f04f 0a03 	mov.w	sl, #3
 80068ec:	4604      	mov	r4, r0
 80068ee:	460d      	mov	r5, r1
 80068f0:	e73e      	b.n	8006770 <atan+0xc0>
 80068f2:	4b35      	ldr	r3, [pc, #212]	@ (80069c8 <atan+0x318>)
 80068f4:	4e35      	ldr	r6, [pc, #212]	@ (80069cc <atan+0x31c>)
 80068f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	f7f9 fcff 	bl	8000300 <__aeabi_dsub>
 8006902:	4622      	mov	r2, r4
 8006904:	462b      	mov	r3, r5
 8006906:	f7f9 fcfb 	bl	8000300 <__aeabi_dsub>
 800690a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800690e:	4602      	mov	r2, r0
 8006910:	460b      	mov	r3, r1
 8006912:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006916:	f7f9 fcf3 	bl	8000300 <__aeabi_dsub>
 800691a:	f1bb 0f00 	cmp.w	fp, #0
 800691e:	4604      	mov	r4, r0
 8006920:	460d      	mov	r5, r1
 8006922:	f6bf aee4 	bge.w	80066ee <atan+0x3e>
 8006926:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800692a:	461d      	mov	r5, r3
 800692c:	e6df      	b.n	80066ee <atan+0x3e>
 800692e:	a51c      	add	r5, pc, #112	@ (adr r5, 80069a0 <atan+0x2f0>)
 8006930:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006934:	e6db      	b.n	80066ee <atan+0x3e>
 8006936:	bf00      	nop
 8006938:	54442d18 	.word	0x54442d18
 800693c:	3ff921fb 	.word	0x3ff921fb
 8006940:	8800759c 	.word	0x8800759c
 8006944:	7e37e43c 	.word	0x7e37e43c
 8006948:	e322da11 	.word	0xe322da11
 800694c:	3f90ad3a 	.word	0x3f90ad3a
 8006950:	24760deb 	.word	0x24760deb
 8006954:	3fa97b4b 	.word	0x3fa97b4b
 8006958:	a0d03d51 	.word	0xa0d03d51
 800695c:	3fb10d66 	.word	0x3fb10d66
 8006960:	c54c206e 	.word	0xc54c206e
 8006964:	3fb745cd 	.word	0x3fb745cd
 8006968:	920083ff 	.word	0x920083ff
 800696c:	3fc24924 	.word	0x3fc24924
 8006970:	5555550d 	.word	0x5555550d
 8006974:	3fd55555 	.word	0x3fd55555
 8006978:	2c6a6c2f 	.word	0x2c6a6c2f
 800697c:	bfa2b444 	.word	0xbfa2b444
 8006980:	52defd9a 	.word	0x52defd9a
 8006984:	3fadde2d 	.word	0x3fadde2d
 8006988:	af749a6d 	.word	0xaf749a6d
 800698c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006990:	fe231671 	.word	0xfe231671
 8006994:	3fbc71c6 	.word	0x3fbc71c6
 8006998:	9998ebc4 	.word	0x9998ebc4
 800699c:	3fc99999 	.word	0x3fc99999
 80069a0:	54442d18 	.word	0x54442d18
 80069a4:	bff921fb 	.word	0xbff921fb
 80069a8:	440fffff 	.word	0x440fffff
 80069ac:	7ff00000 	.word	0x7ff00000
 80069b0:	3fdbffff 	.word	0x3fdbffff
 80069b4:	3ff00000 	.word	0x3ff00000
 80069b8:	3ff2ffff 	.word	0x3ff2ffff
 80069bc:	40038000 	.word	0x40038000
 80069c0:	3ff80000 	.word	0x3ff80000
 80069c4:	bff00000 	.word	0xbff00000
 80069c8:	08006ff8 	.word	0x08006ff8
 80069cc:	08007018 	.word	0x08007018

080069d0 <fabs>:
 80069d0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80069d4:	4619      	mov	r1, r3
 80069d6:	4770      	bx	lr

080069d8 <__ieee754_sqrt>:
 80069d8:	4a67      	ldr	r2, [pc, #412]	@ (8006b78 <__ieee754_sqrt+0x1a0>)
 80069da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069de:	438a      	bics	r2, r1
 80069e0:	4606      	mov	r6, r0
 80069e2:	460f      	mov	r7, r1
 80069e4:	460b      	mov	r3, r1
 80069e6:	4604      	mov	r4, r0
 80069e8:	d10e      	bne.n	8006a08 <__ieee754_sqrt+0x30>
 80069ea:	4602      	mov	r2, r0
 80069ec:	f7f9 fe40 	bl	8000670 <__aeabi_dmul>
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	4630      	mov	r0, r6
 80069f6:	4639      	mov	r1, r7
 80069f8:	f7f9 fc84 	bl	8000304 <__adddf3>
 80069fc:	4606      	mov	r6, r0
 80069fe:	460f      	mov	r7, r1
 8006a00:	4630      	mov	r0, r6
 8006a02:	4639      	mov	r1, r7
 8006a04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a08:	2900      	cmp	r1, #0
 8006a0a:	dc0c      	bgt.n	8006a26 <__ieee754_sqrt+0x4e>
 8006a0c:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8006a10:	4302      	orrs	r2, r0
 8006a12:	d0f5      	beq.n	8006a00 <__ieee754_sqrt+0x28>
 8006a14:	b189      	cbz	r1, 8006a3a <__ieee754_sqrt+0x62>
 8006a16:	4602      	mov	r2, r0
 8006a18:	f7f9 fc72 	bl	8000300 <__aeabi_dsub>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	f7f9 ff50 	bl	80008c4 <__aeabi_ddiv>
 8006a24:	e7ea      	b.n	80069fc <__ieee754_sqrt+0x24>
 8006a26:	150a      	asrs	r2, r1, #20
 8006a28:	d115      	bne.n	8006a56 <__ieee754_sqrt+0x7e>
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	e009      	b.n	8006a42 <__ieee754_sqrt+0x6a>
 8006a2e:	0ae3      	lsrs	r3, r4, #11
 8006a30:	3a15      	subs	r2, #21
 8006a32:	0564      	lsls	r4, r4, #21
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0fa      	beq.n	8006a2e <__ieee754_sqrt+0x56>
 8006a38:	e7f7      	b.n	8006a2a <__ieee754_sqrt+0x52>
 8006a3a:	460a      	mov	r2, r1
 8006a3c:	e7fa      	b.n	8006a34 <__ieee754_sqrt+0x5c>
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	3101      	adds	r1, #1
 8006a42:	02d8      	lsls	r0, r3, #11
 8006a44:	d5fb      	bpl.n	8006a3e <__ieee754_sqrt+0x66>
 8006a46:	1e48      	subs	r0, r1, #1
 8006a48:	1a12      	subs	r2, r2, r0
 8006a4a:	f1c1 0020 	rsb	r0, r1, #32
 8006a4e:	fa24 f000 	lsr.w	r0, r4, r0
 8006a52:	4303      	orrs	r3, r0
 8006a54:	408c      	lsls	r4, r1
 8006a56:	2600      	movs	r6, #0
 8006a58:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8006a5c:	2116      	movs	r1, #22
 8006a5e:	07d2      	lsls	r2, r2, #31
 8006a60:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8006a64:	4632      	mov	r2, r6
 8006a66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a6e:	bf5c      	itt	pl
 8006a70:	005b      	lslpl	r3, r3, #1
 8006a72:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8006a76:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006a7a:	bf58      	it	pl
 8006a7c:	0064      	lslpl	r4, r4, #1
 8006a7e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006a82:	107f      	asrs	r7, r7, #1
 8006a84:	0064      	lsls	r4, r4, #1
 8006a86:	1815      	adds	r5, r2, r0
 8006a88:	429d      	cmp	r5, r3
 8006a8a:	bfde      	ittt	le
 8006a8c:	182a      	addle	r2, r5, r0
 8006a8e:	1b5b      	suble	r3, r3, r5
 8006a90:	1836      	addle	r6, r6, r0
 8006a92:	0fe5      	lsrs	r5, r4, #31
 8006a94:	3901      	subs	r1, #1
 8006a96:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006a9a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006a9e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006aa2:	d1f0      	bne.n	8006a86 <__ieee754_sqrt+0xae>
 8006aa4:	460d      	mov	r5, r1
 8006aa6:	f04f 0a20 	mov.w	sl, #32
 8006aaa:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	eb01 0c00 	add.w	ip, r1, r0
 8006ab4:	db02      	blt.n	8006abc <__ieee754_sqrt+0xe4>
 8006ab6:	d113      	bne.n	8006ae0 <__ieee754_sqrt+0x108>
 8006ab8:	45a4      	cmp	ip, r4
 8006aba:	d811      	bhi.n	8006ae0 <__ieee754_sqrt+0x108>
 8006abc:	f1bc 0f00 	cmp.w	ip, #0
 8006ac0:	eb0c 0100 	add.w	r1, ip, r0
 8006ac4:	da42      	bge.n	8006b4c <__ieee754_sqrt+0x174>
 8006ac6:	2900      	cmp	r1, #0
 8006ac8:	db40      	blt.n	8006b4c <__ieee754_sqrt+0x174>
 8006aca:	f102 0e01 	add.w	lr, r2, #1
 8006ace:	1a9b      	subs	r3, r3, r2
 8006ad0:	4672      	mov	r2, lr
 8006ad2:	45a4      	cmp	ip, r4
 8006ad4:	bf88      	it	hi
 8006ad6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006ada:	eba4 040c 	sub.w	r4, r4, ip
 8006ade:	4405      	add	r5, r0
 8006ae0:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8006ae4:	f1ba 0a01 	subs.w	sl, sl, #1
 8006ae8:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8006aec:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006af0:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006af4:	d1db      	bne.n	8006aae <__ieee754_sqrt+0xd6>
 8006af6:	431c      	orrs	r4, r3
 8006af8:	d01a      	beq.n	8006b30 <__ieee754_sqrt+0x158>
 8006afa:	4c20      	ldr	r4, [pc, #128]	@ (8006b7c <__ieee754_sqrt+0x1a4>)
 8006afc:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8006b80 <__ieee754_sqrt+0x1a8>
 8006b00:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006b04:	e9db 2300 	ldrd	r2, r3, [fp]
 8006b08:	f7f9 fbfa 	bl	8000300 <__aeabi_dsub>
 8006b0c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4640      	mov	r0, r8
 8006b16:	4649      	mov	r1, r9
 8006b18:	f7fa f826 	bl	8000b68 <__aeabi_dcmple>
 8006b1c:	b140      	cbz	r0, 8006b30 <__ieee754_sqrt+0x158>
 8006b1e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006b22:	e9db 2300 	ldrd	r2, r3, [fp]
 8006b26:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006b2a:	d111      	bne.n	8006b50 <__ieee754_sqrt+0x178>
 8006b2c:	4655      	mov	r5, sl
 8006b2e:	3601      	adds	r6, #1
 8006b30:	1072      	asrs	r2, r6, #1
 8006b32:	086b      	lsrs	r3, r5, #1
 8006b34:	07f1      	lsls	r1, r6, #31
 8006b36:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006b3a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006b3e:	bf48      	it	mi
 8006b40:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006b44:	4618      	mov	r0, r3
 8006b46:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8006b4a:	e757      	b.n	80069fc <__ieee754_sqrt+0x24>
 8006b4c:	4696      	mov	lr, r2
 8006b4e:	e7be      	b.n	8006ace <__ieee754_sqrt+0xf6>
 8006b50:	f7f9 fbd8 	bl	8000304 <__adddf3>
 8006b54:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	4640      	mov	r0, r8
 8006b5e:	4649      	mov	r1, r9
 8006b60:	f7f9 fff8 	bl	8000b54 <__aeabi_dcmplt>
 8006b64:	b120      	cbz	r0, 8006b70 <__ieee754_sqrt+0x198>
 8006b66:	1ca8      	adds	r0, r5, #2
 8006b68:	bf08      	it	eq
 8006b6a:	3601      	addeq	r6, #1
 8006b6c:	3502      	adds	r5, #2
 8006b6e:	e7df      	b.n	8006b30 <__ieee754_sqrt+0x158>
 8006b70:	1c6b      	adds	r3, r5, #1
 8006b72:	f023 0501 	bic.w	r5, r3, #1
 8006b76:	e7db      	b.n	8006b30 <__ieee754_sqrt+0x158>
 8006b78:	7ff00000 	.word	0x7ff00000
 8006b7c:	200001f8 	.word	0x200001f8
 8006b80:	200001f0 	.word	0x200001f0

08006b84 <_init>:
 8006b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b86:	bf00      	nop
 8006b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8a:	bc08      	pop	{r3}
 8006b8c:	469e      	mov	lr, r3
 8006b8e:	4770      	bx	lr

08006b90 <_fini>:
 8006b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b92:	bf00      	nop
 8006b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b96:	bc08      	pop	{r3}
 8006b98:	469e      	mov	lr, r3
 8006b9a:	4770      	bx	lr
